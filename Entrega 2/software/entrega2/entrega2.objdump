
entrega2.elf:     file format elf32-littlenios2
entrega2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004c5c memsz 0x00004c5c flags r-x
    LOAD off    0x00005c7c vaddr 0x0000cc7c paddr 0x0000d6b0 align 2**12
         filesz 0x00000a34 memsz 0x00000a34 flags rw-
    LOAD off    0x000070e4 vaddr 0x0000e0e4 paddr 0x0000e0e4 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004a00  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0000cc30  0000cc30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a34  0000cc7c  0000d6b0  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0000e0e4  0000e0e4  000070e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000e240  0000e240  000066b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000066b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000970  00000000  00000000  000066d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015011  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000056d5  00000000  00000000  0001c059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000062e9  00000000  00000000  0002172e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001318  00000000  00000000  00027a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024da  00000000  00000000  00028d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  0002b20a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002fce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000650  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003251e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00032521  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003252d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003252e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003252f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003253a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00032545  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002e  00000000  00000000  00032559  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f87  00000000  00000000  00032587  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00039fd5  00000000  00000000  0003750e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000cc30 l    d  .rodata	00000000 .rodata
0000cc7c l    d  .rwdata	00000000 .rwdata
0000e0e4 l    d  .bss	00000000 .bss
0000e240 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../entrega2_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00008528 l     F .text	00000008 __fp_unlock
0000853c l     F .text	0000019c __sinit.part.1
000086d8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000cc7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b1c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b2dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b308 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b57c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b664 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b750 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b92c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d6ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000bba0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000bcdc l     F .text	00000034 alt_dev_reg
0000d650 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bfdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c19c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c2fc l     F .text	0000003c alt_get_errno
0000c338 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000e114 g     O .bss	00000004 alt_instruction_exception_handler
0000af98 g     F .text	00000054 _isatty_r
0000b868 g     F .text	0000007c alt_main
000083bc g     F .text	000000c0 _puts_r
0000e140 g     O .bss	00000100 alt_irq
0000acc0 g     F .text	00000060 _lseek_r
0000d6b0 g       *ABS*	00000000 __flash_rwdata_start
0000e240 g       *ABS*	00000000 __alt_heap_start
0000a274 g     F .text	0000005c __sseek
00008888 g     F .text	00000010 __sinit
000086e0 g     F .text	00000078 __sfmoreglue
0000b908 g     F .text	00000024 __malloc_unlock
00009960 g     F .text	0000015c memmove
00008870 g     F .text	00000018 _cleanup
0000e0e4 g     O .bss	00000004 n
0000c580 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
0000e0ec g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000af3c g     F .text	0000005c _fstat_r
0000e100 g     O .bss	00000004 errno
0000a1f0 g     F .text	00000008 __seofread
0000e10c g     O .bss	00000004 alt_argv
0001567c g       *ABS*	00000000 _gp
0000d4d0 g     O .rwdata	00000180 alt_fd_list
0000c5a4 g     F .text	00000090 alt_find_dev
00009818 g     F .text	00000148 memcpy
00008530 g     F .text	0000000c _cleanup_r
0000c280 g     F .text	0000007c alt_io_redirect
0000cc30 g       *ABS*	00000000 __DTOR_END__
0000847c g     F .text	00000014 puts
0000c800 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000be3c g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b0e4 g     F .text	00000064 .hidden __udivsi3
0000b5b8 g     F .text	000000ac isatty
0000e0fc g     O .bss	00000004 __malloc_top_pad
000088d8 g     F .text	000004c8 __sfvwrite_r
0000a148 g     F .text	00000054 _sbrk_r
0000aedc g     F .text	00000060 _read_r
0000d6a0 g     O .rwdata	00000004 alt_max_fd
0000a4e0 g     F .text	000000f0 _fclose_r
0000a85c g     F .text	00000030 fflush
0000e0f8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b3fc g     F .text	00000180 alt_irq_register
0000e0e8 g     O .bss	00000004 ledflag
0000b78c g     F .text	000000dc lseek
0000d680 g     O .rwdata	00000004 _global_impure_ptr
00009be4 g     F .text	00000564 _realloc_r
0000e240 g       *ABS*	00000000 __bss_end
000088a8 g     F .text	00000018 __fp_lock_all
0000e104 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000d4a8 g     O .rwdata	00000028 alt_dev_null
0000bfbc g     F .text	00000020 alt_dcache_flush_all
0000d6b0 g       *ABS*	00000000 __ram_rwdata_end
0000d698 g     O .rwdata	00000008 alt_dev_list
0000bbdc g     F .text	00000100 write
0000cc7c g       *ABS*	00000000 __ram_rodata_end
0000b344 g     F .text	000000b8 fstat
0000d67c g     O .rwdata	00000004 add
0000b148 g     F .text	00000058 .hidden __umodsi3
0000e240 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00008358 g     F .text	00000064 init_pio
0000cc30 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000bf28 g     F .text	00000094 altera_avalon_jtag_uart_write
00008898 g     F .text	00000004 __sfp_lock_acquire
00009734 g     F .text	000000e4 memchr
0000a9b0 g     F .text	00000310 _free_r
0000ca7c g     F .text	00000180 __call_exitprocs
0000d688 g     O .rwdata	00000004 __malloc_sbrk_base
00008230 g     F .text	0000003c _start
0000b968 g     F .text	00000104 read
0000bd48 g     F .text	00000034 alt_sys_init
0000c964 g     F .text	00000118 __register_exitproc
0000b1a0 g     F .text	00000028 .hidden __mulsi3
0000cc7c g       *ABS*	00000000 __ram_rwdata_start
0000cc30 g       *ABS*	00000000 __ram_rodata_start
0000e118 g     O .bss	00000028 __malloc_current_mallinfo
0000bd7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c73c g     F .text	000000c4 alt_get_fd
0000a48c g     F .text	00000054 _close_r
0000c8e8 g     F .text	0000007c memcmp
0000e240 g       *ABS*	00000000 __alt_stack_base
0000a338 g     F .text	00000154 __swsetup_r
00008758 g     F .text	00000118 __sfp
0000d0a0 g     O .rwdata	00000408 __malloc_av_
000088a4 g     F .text	00000004 __sinit_lock_release
0000a19c g     F .text	00000054 __sread
0000e0f0 g     O .bss	00000004 counter
0000c634 g     F .text	00000108 alt_find_file
0000c018 g     F .text	000000a4 alt_dev_llist_insert
0000b8e4 g     F .text	00000024 __malloc_lock
0000baf0 g     F .text	000000b0 sbrk
0000a800 g     F .text	0000005c _fflush_r
0000e0e4 g       *ABS*	00000000 __bss_start
00009abc g     F .text	00000128 memset
0000826c g     F .text	00000088 main
0000e110 g     O .bss	00000004 alt_envp
0000e0f4 g     O .bss	00000004 __malloc_max_total_mem
0000bddc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a2d0 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000a5d0 g     F .text	00000014 fclose
00008f28 g     F .text	0000080c _malloc_r
0000d6a4 g     O .rwdata	00000004 alt_errno
00008da0 g     F .text	000000c4 _fwalk
0000afec g     F .text	00000084 .hidden __divsi3
0000a88c g     F .text	00000124 _malloc_trim_r
0000cc30 g       *ABS*	00000000 __CTOR_END__
0000cc30 g       *ABS*	00000000 __flash_rodata_start
0000cc30 g       *ABS*	00000000 __DTOR_LIST__
0000bd10 g     F .text	00000038 alt_irq_init
0000ba6c g     F .text	00000084 alt_release_fd
0000c89c g     F .text	00000014 atexit
0000a2d8 g     F .text	00000060 _write_r
0000d684 g     O .rwdata	00000004 _impure_ptr
0000e108 g     O .bss	00000004 alt_argc
0000a5e4 g     F .text	0000021c __sflush_r
0000c11c g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
000088c0 g     F .text	00000018 __fp_unlock_all
0000d690 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000d6b0 g       *ABS*	00000000 _edata
0000e240 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
0000a1f8 g     F .text	0000007c __swrite
0000d68c g     O .rwdata	00000004 __malloc_trim_threshold
0000c8b0 g     F .text	00000038 exit
00008e64 g     F .text	000000c4 _fwalk_reent
0000b070 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000889c g     F .text	00000004 __sfp_lock_release
0000cbfc g     F .text	00000034 _exit
0000ad20 g     F .text	000001bc __smakebuf_r
00008490 g     F .text	00000098 strlen
0000c424 g     F .text	0000015c open
0000c17c g     F .text	00000020 alt_icache_flush_all
0000d6a8 g     O .rwdata	00000004 alt_priority_mask
0000c0bc g     F .text	00000060 _do_ctors
000082f4 g     F .text	00000064 handle_button_interrupts
0000b204 g     F .text	000000d8 close
0000b6cc g     F .text	00000084 alt_load
000088a0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10b85004 	addi	r2,r2,-7872
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10b85004 	addi	r2,r2,-7872
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a2a617 	ldw	r2,-30056(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a2a617 	ldw	r2,-30056(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d6959f14 	ori	gp,gp,22140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10b83914 	ori	r2,r2,57572

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18f89014 	ori	r3,r3,57920

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	000b6cc0 	call	b6cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	000b8680 	call	b868 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <alt_after_alt_main>

0000826c <main>:

volatile int ledflag = 0;

void init_pio();

int main() {
    826c:	defffd04 	addi	sp,sp,-12
    8270:	dfc00215 	stw	ra,8(sp)
    8274:	df000115 	stw	fp,4(sp)
    8278:	df000104 	addi	fp,sp,4
	init_pio();
    827c:	00083580 	call	8358 <init_pio>

	unsigned int *p_sw = (unsigned int *)(0x11020);
    8280:	00800074 	movhi	r2,1
    8284:	10840804 	addi	r2,r2,4128
    8288:	e0bfff15 	stw	r2,-4(fp)

	printf("Embarcados++ \n");
    828c:	01000074 	movhi	r4,1
    8290:	21330c04 	addi	r4,r4,-13264
    8294:	000847c0 	call	847c <puts>
	while (1) {
		counter += (n*4)+1;
    8298:	d0a29a17 	ldw	r2,-30104(gp)
    829c:	1085883a 	add	r2,r2,r2
    82a0:	1085883a 	add	r2,r2,r2
    82a4:	10c00044 	addi	r3,r2,1
    82a8:	d0a29d17 	ldw	r2,-30092(gp)
    82ac:	1885883a 	add	r2,r3,r2
    82b0:	d0a29d15 	stw	r2,-30092(gp)
		if (counter > 2500000) {
    82b4:	d0e29d17 	ldw	r3,-30092(gp)
    82b8:	008009b4 	movhi	r2,38
    82bc:	10896804 	addi	r2,r2,9632
    82c0:	10fff50e 	bge	r2,r3,8298 <main+0x2c>
			counter = 0;
    82c4:	d0229d15 	stw	zero,-30092(gp)

			if (ledflag == 0) {
    82c8:	d0a29b17 	ldw	r2,-30100(gp)
    82cc:	1000031e 	bne	r2,zero,82dc <main+0x70>
				ledflag = 0xFF;
    82d0:	00803fc4 	movi	r2,255
    82d4:	d0a29b15 	stw	r2,-30100(gp)
    82d8:	00000106 	br	82e0 <main+0x74>
			} else {
				ledflag = 0;
    82dc:	d0229b15 	stw	zero,-30100(gp)
			}

			  IOWR_32DIRECT(PIO_0_BASE, 0, ledflag);
    82e0:	d0e29b17 	ldw	r3,-30100(gp)
    82e4:	00800074 	movhi	r2,1
    82e8:	10840c04 	addi	r2,r2,4144
    82ec:	10c00035 	stwio	r3,0(r2)

		}
	}
    82f0:	003fe906 	br	8298 <main+0x2c>

000082f4 <handle_button_interrupts>:
 * is then cleared and normal program execution resumes.           *
 * The value stored in *context is used to control program flow    *
 * in the rest of this program's routines.                         *
 ******************************************************************/

void handle_button_interrupts(void* context, alt_u32 id) {
    82f4:	defffc04 	addi	sp,sp,-16
    82f8:	df000315 	stw	fp,12(sp)
    82fc:	df000304 	addi	fp,sp,12
    8300:	e13ffe15 	stw	r4,-8(fp)
    8304:	e17fff15 	stw	r5,-4(fp)
	/* Cast context to edge_capture's type. It is important that this be
	 * declared volatile to avoid unwanted compiler optimization.
	 */
	volatile int* edge_capture_ptr = (volatile int*) context;
    8308:	e0bffe17 	ldw	r2,-8(fp)
    830c:	e0bffd15 	stw	r2,-12(fp)
	/* Store the value in the Button's edge capture register in *context. */
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
    8310:	00800074 	movhi	r2,1
    8314:	10840b04 	addi	r2,r2,4140
    8318:	10c00037 	ldwio	r3,0(r2)
    831c:	e0bffd17 	ldw	r2,-12(fp)
    8320:	10c00015 	stw	r3,0(r2)

	n = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
    8324:	00800074 	movhi	r2,1
    8328:	10840804 	addi	r2,r2,4128
    832c:	10800037 	ldwio	r2,0(r2)
    8330:	d0a29a15 	stw	r2,-30104(gp)

	/* Reset the Button's edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0);
    8334:	0007883a 	mov	r3,zero
    8338:	00800074 	movhi	r2,1
    833c:	10840b04 	addi	r2,r2,4140
    8340:	10c00035 	stwio	r3,0(r2)
}
    8344:	0001883a 	nop
    8348:	e037883a 	mov	sp,fp
    834c:	df000017 	ldw	fp,0(sp)
    8350:	dec00104 	addi	sp,sp,4
    8354:	f800283a 	ret

00008358 <init_pio>:

/* Initialize the pio. */

void init_pio() {
    8358:	defffd04 	addi	sp,sp,-12
    835c:	dfc00215 	stw	ra,8(sp)
    8360:	df000115 	stw	fp,4(sp)
    8364:	df000104 	addi	fp,sp,4
/* Recast the edge_capture pointer to match the alt_irq_register() function
 * prototype. */
void* edge_capture_ptr = (void*) &edge_capture;
    8368:	d0a29c04 	addi	r2,gp,-30096
    836c:	e0bfff15 	stw	r2,-4(fp)
/* Enable first four interrupts. */
IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
    8370:	00c003c4 	movi	r3,15
    8374:	00800074 	movhi	r2,1
    8378:	10840a04 	addi	r2,r2,4136
    837c:	10c00035 	stwio	r3,0(r2)
/* Reset the edge capture register. */
IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
    8380:	0007883a 	mov	r3,zero
    8384:	00800074 	movhi	r2,1
    8388:	10840b04 	addi	r2,r2,4140
    838c:	10c00035 	stwio	r3,0(r2)
/* Register the interrupt handler. */
alt_irq_register(PIO_1_IRQ, edge_capture_ptr, handle_button_interrupts);
    8390:	01800074 	movhi	r6,1
    8394:	31a0bd04 	addi	r6,r6,-32012
    8398:	e17fff17 	ldw	r5,-4(fp)
    839c:	0009883a 	mov	r4,zero
    83a0:	000b3fc0 	call	b3fc <alt_irq_register>
}
    83a4:	0001883a 	nop
    83a8:	e037883a 	mov	sp,fp
    83ac:	dfc00117 	ldw	ra,4(sp)
    83b0:	df000017 	ldw	fp,0(sp)
    83b4:	dec00204 	addi	sp,sp,8
    83b8:	f800283a 	ret

000083bc <_puts_r>:
    83bc:	defff604 	addi	sp,sp,-40
    83c0:	dc000715 	stw	r16,28(sp)
    83c4:	2021883a 	mov	r16,r4
    83c8:	2809883a 	mov	r4,r5
    83cc:	dc400815 	stw	r17,32(sp)
    83d0:	dfc00915 	stw	ra,36(sp)
    83d4:	2823883a 	mov	r17,r5
    83d8:	00084900 	call	8490 <strlen>
    83dc:	10c00044 	addi	r3,r2,1
    83e0:	d8800115 	stw	r2,4(sp)
    83e4:	00800074 	movhi	r2,1
    83e8:	10b31004 	addi	r2,r2,-13248
    83ec:	d8800215 	stw	r2,8(sp)
    83f0:	00800044 	movi	r2,1
    83f4:	d8800315 	stw	r2,12(sp)
    83f8:	00800084 	movi	r2,2
    83fc:	dc400015 	stw	r17,0(sp)
    8400:	d8c00615 	stw	r3,24(sp)
    8404:	dec00415 	stw	sp,16(sp)
    8408:	d8800515 	stw	r2,20(sp)
    840c:	80000226 	beq	r16,zero,8418 <_puts_r+0x5c>
    8410:	80800e17 	ldw	r2,56(r16)
    8414:	10001426 	beq	r2,zero,8468 <_puts_r+0xac>
    8418:	81400217 	ldw	r5,8(r16)
    841c:	2880030b 	ldhu	r2,12(r5)
    8420:	10c8000c 	andi	r3,r2,8192
    8424:	1800061e 	bne	r3,zero,8440 <_puts_r+0x84>
    8428:	29001917 	ldw	r4,100(r5)
    842c:	00f7ffc4 	movi	r3,-8193
    8430:	10880014 	ori	r2,r2,8192
    8434:	20c6703a 	and	r3,r4,r3
    8438:	2880030d 	sth	r2,12(r5)
    843c:	28c01915 	stw	r3,100(r5)
    8440:	d9800404 	addi	r6,sp,16
    8444:	8009883a 	mov	r4,r16
    8448:	00088d80 	call	88d8 <__sfvwrite_r>
    844c:	1000091e 	bne	r2,zero,8474 <_puts_r+0xb8>
    8450:	00800284 	movi	r2,10
    8454:	dfc00917 	ldw	ra,36(sp)
    8458:	dc400817 	ldw	r17,32(sp)
    845c:	dc000717 	ldw	r16,28(sp)
    8460:	dec00a04 	addi	sp,sp,40
    8464:	f800283a 	ret
    8468:	8009883a 	mov	r4,r16
    846c:	00088880 	call	8888 <__sinit>
    8470:	003fe906 	br	8418 <_puts_r+0x5c>
    8474:	00bfffc4 	movi	r2,-1
    8478:	003ff606 	br	8454 <_puts_r+0x98>

0000847c <puts>:
    847c:	00800074 	movhi	r2,1
    8480:	10b5a104 	addi	r2,r2,-10620
    8484:	200b883a 	mov	r5,r4
    8488:	11000017 	ldw	r4,0(r2)
    848c:	00083bc1 	jmpi	83bc <_puts_r>

00008490 <strlen>:
    8490:	208000cc 	andi	r2,r4,3
    8494:	10002026 	beq	r2,zero,8518 <strlen+0x88>
    8498:	20800007 	ldb	r2,0(r4)
    849c:	10002026 	beq	r2,zero,8520 <strlen+0x90>
    84a0:	2005883a 	mov	r2,r4
    84a4:	00000206 	br	84b0 <strlen+0x20>
    84a8:	10c00007 	ldb	r3,0(r2)
    84ac:	18001826 	beq	r3,zero,8510 <strlen+0x80>
    84b0:	10800044 	addi	r2,r2,1
    84b4:	10c000cc 	andi	r3,r2,3
    84b8:	183ffb1e 	bne	r3,zero,84a8 <strlen+0x18>
    84bc:	10c00017 	ldw	r3,0(r2)
    84c0:	01ffbff4 	movhi	r7,65279
    84c4:	39ffbfc4 	addi	r7,r7,-257
    84c8:	00ca303a 	nor	r5,zero,r3
    84cc:	01a02074 	movhi	r6,32897
    84d0:	19c7883a 	add	r3,r3,r7
    84d4:	31a02004 	addi	r6,r6,-32640
    84d8:	1946703a 	and	r3,r3,r5
    84dc:	1986703a 	and	r3,r3,r6
    84e0:	1800091e 	bne	r3,zero,8508 <strlen+0x78>
    84e4:	10800104 	addi	r2,r2,4
    84e8:	10c00017 	ldw	r3,0(r2)
    84ec:	19cb883a 	add	r5,r3,r7
    84f0:	00c6303a 	nor	r3,zero,r3
    84f4:	28c6703a 	and	r3,r5,r3
    84f8:	1986703a 	and	r3,r3,r6
    84fc:	183ff926 	beq	r3,zero,84e4 <strlen+0x54>
    8500:	00000106 	br	8508 <strlen+0x78>
    8504:	10800044 	addi	r2,r2,1
    8508:	10c00007 	ldb	r3,0(r2)
    850c:	183ffd1e 	bne	r3,zero,8504 <strlen+0x74>
    8510:	1105c83a 	sub	r2,r2,r4
    8514:	f800283a 	ret
    8518:	2005883a 	mov	r2,r4
    851c:	003fe706 	br	84bc <strlen+0x2c>
    8520:	0005883a 	mov	r2,zero
    8524:	f800283a 	ret

00008528 <__fp_unlock>:
    8528:	0005883a 	mov	r2,zero
    852c:	f800283a 	ret

00008530 <_cleanup_r>:
    8530:	01400074 	movhi	r5,1
    8534:	29693804 	addi	r5,r5,-23328
    8538:	0008e641 	jmpi	8e64 <_fwalk_reent>

0000853c <__sinit.part.1>:
    853c:	defff704 	addi	sp,sp,-36
    8540:	00c00074 	movhi	r3,1
    8544:	dfc00815 	stw	ra,32(sp)
    8548:	ddc00715 	stw	r23,28(sp)
    854c:	dd800615 	stw	r22,24(sp)
    8550:	dd400515 	stw	r21,20(sp)
    8554:	dd000415 	stw	r20,16(sp)
    8558:	dcc00315 	stw	r19,12(sp)
    855c:	dc800215 	stw	r18,8(sp)
    8560:	dc400115 	stw	r17,4(sp)
    8564:	dc000015 	stw	r16,0(sp)
    8568:	18e14c04 	addi	r3,r3,-31440
    856c:	24000117 	ldw	r16,4(r4)
    8570:	20c00f15 	stw	r3,60(r4)
    8574:	2080bb04 	addi	r2,r4,748
    8578:	00c000c4 	movi	r3,3
    857c:	20c0b915 	stw	r3,740(r4)
    8580:	2080ba15 	stw	r2,744(r4)
    8584:	2000b815 	stw	zero,736(r4)
    8588:	05c00204 	movi	r23,8
    858c:	00800104 	movi	r2,4
    8590:	2025883a 	mov	r18,r4
    8594:	b80d883a 	mov	r6,r23
    8598:	81001704 	addi	r4,r16,92
    859c:	000b883a 	mov	r5,zero
    85a0:	80000015 	stw	zero,0(r16)
    85a4:	80000115 	stw	zero,4(r16)
    85a8:	80000215 	stw	zero,8(r16)
    85ac:	8080030d 	sth	r2,12(r16)
    85b0:	80001915 	stw	zero,100(r16)
    85b4:	8000038d 	sth	zero,14(r16)
    85b8:	80000415 	stw	zero,16(r16)
    85bc:	80000515 	stw	zero,20(r16)
    85c0:	80000615 	stw	zero,24(r16)
    85c4:	0009abc0 	call	9abc <memset>
    85c8:	05800074 	movhi	r22,1
    85cc:	94400217 	ldw	r17,8(r18)
    85d0:	05400074 	movhi	r21,1
    85d4:	05000074 	movhi	r20,1
    85d8:	04c00074 	movhi	r19,1
    85dc:	b5a86704 	addi	r22,r22,-24164
    85e0:	ad687e04 	addi	r21,r21,-24072
    85e4:	a5289d04 	addi	r20,r20,-23948
    85e8:	9ce8b404 	addi	r19,r19,-23856
    85ec:	85800815 	stw	r22,32(r16)
    85f0:	85400915 	stw	r21,36(r16)
    85f4:	85000a15 	stw	r20,40(r16)
    85f8:	84c00b15 	stw	r19,44(r16)
    85fc:	84000715 	stw	r16,28(r16)
    8600:	00800284 	movi	r2,10
    8604:	8880030d 	sth	r2,12(r17)
    8608:	00800044 	movi	r2,1
    860c:	b80d883a 	mov	r6,r23
    8610:	89001704 	addi	r4,r17,92
    8614:	000b883a 	mov	r5,zero
    8618:	88000015 	stw	zero,0(r17)
    861c:	88000115 	stw	zero,4(r17)
    8620:	88000215 	stw	zero,8(r17)
    8624:	88001915 	stw	zero,100(r17)
    8628:	8880038d 	sth	r2,14(r17)
    862c:	88000415 	stw	zero,16(r17)
    8630:	88000515 	stw	zero,20(r17)
    8634:	88000615 	stw	zero,24(r17)
    8638:	0009abc0 	call	9abc <memset>
    863c:	94000317 	ldw	r16,12(r18)
    8640:	00800484 	movi	r2,18
    8644:	8c400715 	stw	r17,28(r17)
    8648:	8d800815 	stw	r22,32(r17)
    864c:	8d400915 	stw	r21,36(r17)
    8650:	8d000a15 	stw	r20,40(r17)
    8654:	8cc00b15 	stw	r19,44(r17)
    8658:	8080030d 	sth	r2,12(r16)
    865c:	00800084 	movi	r2,2
    8660:	80000015 	stw	zero,0(r16)
    8664:	80000115 	stw	zero,4(r16)
    8668:	80000215 	stw	zero,8(r16)
    866c:	80001915 	stw	zero,100(r16)
    8670:	8080038d 	sth	r2,14(r16)
    8674:	80000415 	stw	zero,16(r16)
    8678:	80000515 	stw	zero,20(r16)
    867c:	80000615 	stw	zero,24(r16)
    8680:	b80d883a 	mov	r6,r23
    8684:	000b883a 	mov	r5,zero
    8688:	81001704 	addi	r4,r16,92
    868c:	0009abc0 	call	9abc <memset>
    8690:	00800044 	movi	r2,1
    8694:	84000715 	stw	r16,28(r16)
    8698:	85800815 	stw	r22,32(r16)
    869c:	85400915 	stw	r21,36(r16)
    86a0:	85000a15 	stw	r20,40(r16)
    86a4:	84c00b15 	stw	r19,44(r16)
    86a8:	90800e15 	stw	r2,56(r18)
    86ac:	dfc00817 	ldw	ra,32(sp)
    86b0:	ddc00717 	ldw	r23,28(sp)
    86b4:	dd800617 	ldw	r22,24(sp)
    86b8:	dd400517 	ldw	r21,20(sp)
    86bc:	dd000417 	ldw	r20,16(sp)
    86c0:	dcc00317 	ldw	r19,12(sp)
    86c4:	dc800217 	ldw	r18,8(sp)
    86c8:	dc400117 	ldw	r17,4(sp)
    86cc:	dc000017 	ldw	r16,0(sp)
    86d0:	dec00904 	addi	sp,sp,36
    86d4:	f800283a 	ret

000086d8 <__fp_lock>:
    86d8:	0005883a 	mov	r2,zero
    86dc:	f800283a 	ret

000086e0 <__sfmoreglue>:
    86e0:	defffc04 	addi	sp,sp,-16
    86e4:	dc800215 	stw	r18,8(sp)
    86e8:	2825883a 	mov	r18,r5
    86ec:	dc000015 	stw	r16,0(sp)
    86f0:	01401a04 	movi	r5,104
    86f4:	2021883a 	mov	r16,r4
    86f8:	913fffc4 	addi	r4,r18,-1
    86fc:	dfc00315 	stw	ra,12(sp)
    8700:	dc400115 	stw	r17,4(sp)
    8704:	000b1a00 	call	b1a0 <__mulsi3>
    8708:	8009883a 	mov	r4,r16
    870c:	11401d04 	addi	r5,r2,116
    8710:	1023883a 	mov	r17,r2
    8714:	0008f280 	call	8f28 <_malloc_r>
    8718:	1021883a 	mov	r16,r2
    871c:	10000726 	beq	r2,zero,873c <__sfmoreglue+0x5c>
    8720:	11000304 	addi	r4,r2,12
    8724:	10000015 	stw	zero,0(r2)
    8728:	14800115 	stw	r18,4(r2)
    872c:	11000215 	stw	r4,8(r2)
    8730:	89801a04 	addi	r6,r17,104
    8734:	000b883a 	mov	r5,zero
    8738:	0009abc0 	call	9abc <memset>
    873c:	8005883a 	mov	r2,r16
    8740:	dfc00317 	ldw	ra,12(sp)
    8744:	dc800217 	ldw	r18,8(sp)
    8748:	dc400117 	ldw	r17,4(sp)
    874c:	dc000017 	ldw	r16,0(sp)
    8750:	dec00404 	addi	sp,sp,16
    8754:	f800283a 	ret

00008758 <__sfp>:
    8758:	defffb04 	addi	sp,sp,-20
    875c:	dc000015 	stw	r16,0(sp)
    8760:	04000074 	movhi	r16,1
    8764:	8435a004 	addi	r16,r16,-10624
    8768:	dcc00315 	stw	r19,12(sp)
    876c:	2027883a 	mov	r19,r4
    8770:	81000017 	ldw	r4,0(r16)
    8774:	dfc00415 	stw	ra,16(sp)
    8778:	dc800215 	stw	r18,8(sp)
    877c:	20800e17 	ldw	r2,56(r4)
    8780:	dc400115 	stw	r17,4(sp)
    8784:	1000021e 	bne	r2,zero,8790 <__sfp+0x38>
    8788:	000853c0 	call	853c <__sinit.part.1>
    878c:	81000017 	ldw	r4,0(r16)
    8790:	2480b804 	addi	r18,r4,736
    8794:	047fffc4 	movi	r17,-1
    8798:	91000117 	ldw	r4,4(r18)
    879c:	94000217 	ldw	r16,8(r18)
    87a0:	213fffc4 	addi	r4,r4,-1
    87a4:	20000a16 	blt	r4,zero,87d0 <__sfp+0x78>
    87a8:	8080030f 	ldh	r2,12(r16)
    87ac:	10000c26 	beq	r2,zero,87e0 <__sfp+0x88>
    87b0:	80c01d04 	addi	r3,r16,116
    87b4:	00000206 	br	87c0 <__sfp+0x68>
    87b8:	18bfe60f 	ldh	r2,-104(r3)
    87bc:	10000826 	beq	r2,zero,87e0 <__sfp+0x88>
    87c0:	213fffc4 	addi	r4,r4,-1
    87c4:	1c3ffd04 	addi	r16,r3,-12
    87c8:	18c01a04 	addi	r3,r3,104
    87cc:	247ffa1e 	bne	r4,r17,87b8 <__sfp+0x60>
    87d0:	90800017 	ldw	r2,0(r18)
    87d4:	10001d26 	beq	r2,zero,884c <__sfp+0xf4>
    87d8:	1025883a 	mov	r18,r2
    87dc:	003fee06 	br	8798 <__sfp+0x40>
    87e0:	00bfffc4 	movi	r2,-1
    87e4:	8080038d 	sth	r2,14(r16)
    87e8:	00800044 	movi	r2,1
    87ec:	8080030d 	sth	r2,12(r16)
    87f0:	80001915 	stw	zero,100(r16)
    87f4:	80000015 	stw	zero,0(r16)
    87f8:	80000215 	stw	zero,8(r16)
    87fc:	80000115 	stw	zero,4(r16)
    8800:	80000415 	stw	zero,16(r16)
    8804:	80000515 	stw	zero,20(r16)
    8808:	80000615 	stw	zero,24(r16)
    880c:	01800204 	movi	r6,8
    8810:	000b883a 	mov	r5,zero
    8814:	81001704 	addi	r4,r16,92
    8818:	0009abc0 	call	9abc <memset>
    881c:	8005883a 	mov	r2,r16
    8820:	80000c15 	stw	zero,48(r16)
    8824:	80000d15 	stw	zero,52(r16)
    8828:	80001115 	stw	zero,68(r16)
    882c:	80001215 	stw	zero,72(r16)
    8830:	dfc00417 	ldw	ra,16(sp)
    8834:	dcc00317 	ldw	r19,12(sp)
    8838:	dc800217 	ldw	r18,8(sp)
    883c:	dc400117 	ldw	r17,4(sp)
    8840:	dc000017 	ldw	r16,0(sp)
    8844:	dec00504 	addi	sp,sp,20
    8848:	f800283a 	ret
    884c:	01400104 	movi	r5,4
    8850:	9809883a 	mov	r4,r19
    8854:	00086e00 	call	86e0 <__sfmoreglue>
    8858:	90800015 	stw	r2,0(r18)
    885c:	103fde1e 	bne	r2,zero,87d8 <__sfp+0x80>
    8860:	00800304 	movi	r2,12
    8864:	98800015 	stw	r2,0(r19)
    8868:	0005883a 	mov	r2,zero
    886c:	003ff006 	br	8830 <__sfp+0xd8>

00008870 <_cleanup>:
    8870:	00800074 	movhi	r2,1
    8874:	10b5a004 	addi	r2,r2,-10624
    8878:	11000017 	ldw	r4,0(r2)
    887c:	01400074 	movhi	r5,1
    8880:	29693804 	addi	r5,r5,-23328
    8884:	0008e641 	jmpi	8e64 <_fwalk_reent>

00008888 <__sinit>:
    8888:	20800e17 	ldw	r2,56(r4)
    888c:	10000126 	beq	r2,zero,8894 <__sinit+0xc>
    8890:	f800283a 	ret
    8894:	000853c1 	jmpi	853c <__sinit.part.1>

00008898 <__sfp_lock_acquire>:
    8898:	f800283a 	ret

0000889c <__sfp_lock_release>:
    889c:	f800283a 	ret

000088a0 <__sinit_lock_acquire>:
    88a0:	f800283a 	ret

000088a4 <__sinit_lock_release>:
    88a4:	f800283a 	ret

000088a8 <__fp_lock_all>:
    88a8:	00800074 	movhi	r2,1
    88ac:	10b5a104 	addi	r2,r2,-10620
    88b0:	11000017 	ldw	r4,0(r2)
    88b4:	01400074 	movhi	r5,1
    88b8:	2961b604 	addi	r5,r5,-31016
    88bc:	0008da01 	jmpi	8da0 <_fwalk>

000088c0 <__fp_unlock_all>:
    88c0:	00800074 	movhi	r2,1
    88c4:	10b5a104 	addi	r2,r2,-10620
    88c8:	11000017 	ldw	r4,0(r2)
    88cc:	01400074 	movhi	r5,1
    88d0:	29614a04 	addi	r5,r5,-31448
    88d4:	0008da01 	jmpi	8da0 <_fwalk>

000088d8 <__sfvwrite_r>:
    88d8:	30800217 	ldw	r2,8(r6)
    88dc:	10006726 	beq	r2,zero,8a7c <__sfvwrite_r+0x1a4>
    88e0:	28c0030b 	ldhu	r3,12(r5)
    88e4:	defff404 	addi	sp,sp,-48
    88e8:	dd400715 	stw	r21,28(sp)
    88ec:	dd000615 	stw	r20,24(sp)
    88f0:	dc000215 	stw	r16,8(sp)
    88f4:	dfc00b15 	stw	ra,44(sp)
    88f8:	df000a15 	stw	fp,40(sp)
    88fc:	ddc00915 	stw	r23,36(sp)
    8900:	dd800815 	stw	r22,32(sp)
    8904:	dcc00515 	stw	r19,20(sp)
    8908:	dc800415 	stw	r18,16(sp)
    890c:	dc400315 	stw	r17,12(sp)
    8910:	1880020c 	andi	r2,r3,8
    8914:	2821883a 	mov	r16,r5
    8918:	202b883a 	mov	r21,r4
    891c:	3029883a 	mov	r20,r6
    8920:	10002726 	beq	r2,zero,89c0 <__sfvwrite_r+0xe8>
    8924:	28800417 	ldw	r2,16(r5)
    8928:	10002526 	beq	r2,zero,89c0 <__sfvwrite_r+0xe8>
    892c:	1880008c 	andi	r2,r3,2
    8930:	a4400017 	ldw	r17,0(r20)
    8934:	10002a26 	beq	r2,zero,89e0 <__sfvwrite_r+0x108>
    8938:	05a00034 	movhi	r22,32768
    893c:	0027883a 	mov	r19,zero
    8940:	0025883a 	mov	r18,zero
    8944:	b5bf0004 	addi	r22,r22,-1024
    8948:	980d883a 	mov	r6,r19
    894c:	a809883a 	mov	r4,r21
    8950:	90004626 	beq	r18,zero,8a6c <__sfvwrite_r+0x194>
    8954:	900f883a 	mov	r7,r18
    8958:	b480022e 	bgeu	r22,r18,8964 <__sfvwrite_r+0x8c>
    895c:	01e00034 	movhi	r7,32768
    8960:	39ff0004 	addi	r7,r7,-1024
    8964:	80800917 	ldw	r2,36(r16)
    8968:	81400717 	ldw	r5,28(r16)
    896c:	103ee83a 	callr	r2
    8970:	00805a0e 	bge	zero,r2,8adc <__sfvwrite_r+0x204>
    8974:	a0c00217 	ldw	r3,8(r20)
    8978:	98a7883a 	add	r19,r19,r2
    897c:	90a5c83a 	sub	r18,r18,r2
    8980:	1885c83a 	sub	r2,r3,r2
    8984:	a0800215 	stw	r2,8(r20)
    8988:	103fef1e 	bne	r2,zero,8948 <__sfvwrite_r+0x70>
    898c:	0005883a 	mov	r2,zero
    8990:	dfc00b17 	ldw	ra,44(sp)
    8994:	df000a17 	ldw	fp,40(sp)
    8998:	ddc00917 	ldw	r23,36(sp)
    899c:	dd800817 	ldw	r22,32(sp)
    89a0:	dd400717 	ldw	r21,28(sp)
    89a4:	dd000617 	ldw	r20,24(sp)
    89a8:	dcc00517 	ldw	r19,20(sp)
    89ac:	dc800417 	ldw	r18,16(sp)
    89b0:	dc400317 	ldw	r17,12(sp)
    89b4:	dc000217 	ldw	r16,8(sp)
    89b8:	dec00c04 	addi	sp,sp,48
    89bc:	f800283a 	ret
    89c0:	800b883a 	mov	r5,r16
    89c4:	a809883a 	mov	r4,r21
    89c8:	000a3380 	call	a338 <__swsetup_r>
    89cc:	1000ee1e 	bne	r2,zero,8d88 <__sfvwrite_r+0x4b0>
    89d0:	80c0030b 	ldhu	r3,12(r16)
    89d4:	a4400017 	ldw	r17,0(r20)
    89d8:	1880008c 	andi	r2,r3,2
    89dc:	103fd61e 	bne	r2,zero,8938 <__sfvwrite_r+0x60>
    89e0:	1880004c 	andi	r2,r3,1
    89e4:	1000421e 	bne	r2,zero,8af0 <__sfvwrite_r+0x218>
    89e8:	0039883a 	mov	fp,zero
    89ec:	0025883a 	mov	r18,zero
    89f0:	90001a26 	beq	r18,zero,8a5c <__sfvwrite_r+0x184>
    89f4:	1880800c 	andi	r2,r3,512
    89f8:	84c00217 	ldw	r19,8(r16)
    89fc:	10002126 	beq	r2,zero,8a84 <__sfvwrite_r+0x1ac>
    8a00:	982f883a 	mov	r23,r19
    8a04:	94c09636 	bltu	r18,r19,8c60 <__sfvwrite_r+0x388>
    8a08:	1881200c 	andi	r2,r3,1152
    8a0c:	1000a11e 	bne	r2,zero,8c94 <__sfvwrite_r+0x3bc>
    8a10:	81000017 	ldw	r4,0(r16)
    8a14:	b80d883a 	mov	r6,r23
    8a18:	e00b883a 	mov	r5,fp
    8a1c:	00099600 	call	9960 <memmove>
    8a20:	80c00217 	ldw	r3,8(r16)
    8a24:	81000017 	ldw	r4,0(r16)
    8a28:	9005883a 	mov	r2,r18
    8a2c:	1ce7c83a 	sub	r19,r3,r19
    8a30:	25cf883a 	add	r7,r4,r23
    8a34:	84c00215 	stw	r19,8(r16)
    8a38:	81c00015 	stw	r7,0(r16)
    8a3c:	a0c00217 	ldw	r3,8(r20)
    8a40:	e0b9883a 	add	fp,fp,r2
    8a44:	90a5c83a 	sub	r18,r18,r2
    8a48:	18a7c83a 	sub	r19,r3,r2
    8a4c:	a4c00215 	stw	r19,8(r20)
    8a50:	983fce26 	beq	r19,zero,898c <__sfvwrite_r+0xb4>
    8a54:	80c0030b 	ldhu	r3,12(r16)
    8a58:	903fe61e 	bne	r18,zero,89f4 <__sfvwrite_r+0x11c>
    8a5c:	8f000017 	ldw	fp,0(r17)
    8a60:	8c800117 	ldw	r18,4(r17)
    8a64:	8c400204 	addi	r17,r17,8
    8a68:	003fe106 	br	89f0 <__sfvwrite_r+0x118>
    8a6c:	8cc00017 	ldw	r19,0(r17)
    8a70:	8c800117 	ldw	r18,4(r17)
    8a74:	8c400204 	addi	r17,r17,8
    8a78:	003fb306 	br	8948 <__sfvwrite_r+0x70>
    8a7c:	0005883a 	mov	r2,zero
    8a80:	f800283a 	ret
    8a84:	81000017 	ldw	r4,0(r16)
    8a88:	80800417 	ldw	r2,16(r16)
    8a8c:	11005a36 	bltu	r2,r4,8bf8 <__sfvwrite_r+0x320>
    8a90:	85c00517 	ldw	r23,20(r16)
    8a94:	95c05836 	bltu	r18,r23,8bf8 <__sfvwrite_r+0x320>
    8a98:	00a00034 	movhi	r2,32768
    8a9c:	10bfffc4 	addi	r2,r2,-1
    8aa0:	9009883a 	mov	r4,r18
    8aa4:	1480012e 	bgeu	r2,r18,8aac <__sfvwrite_r+0x1d4>
    8aa8:	1009883a 	mov	r4,r2
    8aac:	b80b883a 	mov	r5,r23
    8ab0:	000afec0 	call	afec <__divsi3>
    8ab4:	b80b883a 	mov	r5,r23
    8ab8:	1009883a 	mov	r4,r2
    8abc:	000b1a00 	call	b1a0 <__mulsi3>
    8ac0:	81400717 	ldw	r5,28(r16)
    8ac4:	80c00917 	ldw	r3,36(r16)
    8ac8:	100f883a 	mov	r7,r2
    8acc:	e00d883a 	mov	r6,fp
    8ad0:	a809883a 	mov	r4,r21
    8ad4:	183ee83a 	callr	r3
    8ad8:	00bfd816 	blt	zero,r2,8a3c <__sfvwrite_r+0x164>
    8adc:	8080030b 	ldhu	r2,12(r16)
    8ae0:	10801014 	ori	r2,r2,64
    8ae4:	8080030d 	sth	r2,12(r16)
    8ae8:	00bfffc4 	movi	r2,-1
    8aec:	003fa806 	br	8990 <__sfvwrite_r+0xb8>
    8af0:	0027883a 	mov	r19,zero
    8af4:	0011883a 	mov	r8,zero
    8af8:	0039883a 	mov	fp,zero
    8afc:	0025883a 	mov	r18,zero
    8b00:	90001f26 	beq	r18,zero,8b80 <__sfvwrite_r+0x2a8>
    8b04:	40005a26 	beq	r8,zero,8c70 <__sfvwrite_r+0x398>
    8b08:	982d883a 	mov	r22,r19
    8b0c:	94c0012e 	bgeu	r18,r19,8b14 <__sfvwrite_r+0x23c>
    8b10:	902d883a 	mov	r22,r18
    8b14:	81000017 	ldw	r4,0(r16)
    8b18:	80800417 	ldw	r2,16(r16)
    8b1c:	b02f883a 	mov	r23,r22
    8b20:	81c00517 	ldw	r7,20(r16)
    8b24:	1100032e 	bgeu	r2,r4,8b34 <__sfvwrite_r+0x25c>
    8b28:	80c00217 	ldw	r3,8(r16)
    8b2c:	38c7883a 	add	r3,r7,r3
    8b30:	1d801816 	blt	r3,r22,8b94 <__sfvwrite_r+0x2bc>
    8b34:	b1c03e16 	blt	r22,r7,8c30 <__sfvwrite_r+0x358>
    8b38:	80800917 	ldw	r2,36(r16)
    8b3c:	81400717 	ldw	r5,28(r16)
    8b40:	e00d883a 	mov	r6,fp
    8b44:	da000115 	stw	r8,4(sp)
    8b48:	a809883a 	mov	r4,r21
    8b4c:	103ee83a 	callr	r2
    8b50:	102f883a 	mov	r23,r2
    8b54:	da000117 	ldw	r8,4(sp)
    8b58:	00bfe00e 	bge	zero,r2,8adc <__sfvwrite_r+0x204>
    8b5c:	9de7c83a 	sub	r19,r19,r23
    8b60:	98001f26 	beq	r19,zero,8be0 <__sfvwrite_r+0x308>
    8b64:	a0800217 	ldw	r2,8(r20)
    8b68:	e5f9883a 	add	fp,fp,r23
    8b6c:	95e5c83a 	sub	r18,r18,r23
    8b70:	15efc83a 	sub	r23,r2,r23
    8b74:	a5c00215 	stw	r23,8(r20)
    8b78:	b83f8426 	beq	r23,zero,898c <__sfvwrite_r+0xb4>
    8b7c:	903fe11e 	bne	r18,zero,8b04 <__sfvwrite_r+0x22c>
    8b80:	8f000017 	ldw	fp,0(r17)
    8b84:	8c800117 	ldw	r18,4(r17)
    8b88:	0011883a 	mov	r8,zero
    8b8c:	8c400204 	addi	r17,r17,8
    8b90:	003fdb06 	br	8b00 <__sfvwrite_r+0x228>
    8b94:	180d883a 	mov	r6,r3
    8b98:	e00b883a 	mov	r5,fp
    8b9c:	da000115 	stw	r8,4(sp)
    8ba0:	d8c00015 	stw	r3,0(sp)
    8ba4:	00099600 	call	9960 <memmove>
    8ba8:	d8c00017 	ldw	r3,0(sp)
    8bac:	80800017 	ldw	r2,0(r16)
    8bb0:	800b883a 	mov	r5,r16
    8bb4:	a809883a 	mov	r4,r21
    8bb8:	10c5883a 	add	r2,r2,r3
    8bbc:	80800015 	stw	r2,0(r16)
    8bc0:	d8c00015 	stw	r3,0(sp)
    8bc4:	000a8000 	call	a800 <_fflush_r>
    8bc8:	d8c00017 	ldw	r3,0(sp)
    8bcc:	da000117 	ldw	r8,4(sp)
    8bd0:	103fc21e 	bne	r2,zero,8adc <__sfvwrite_r+0x204>
    8bd4:	182f883a 	mov	r23,r3
    8bd8:	9de7c83a 	sub	r19,r19,r23
    8bdc:	983fe11e 	bne	r19,zero,8b64 <__sfvwrite_r+0x28c>
    8be0:	800b883a 	mov	r5,r16
    8be4:	a809883a 	mov	r4,r21
    8be8:	000a8000 	call	a800 <_fflush_r>
    8bec:	103fbb1e 	bne	r2,zero,8adc <__sfvwrite_r+0x204>
    8bf0:	0011883a 	mov	r8,zero
    8bf4:	003fdb06 	br	8b64 <__sfvwrite_r+0x28c>
    8bf8:	94c0012e 	bgeu	r18,r19,8c00 <__sfvwrite_r+0x328>
    8bfc:	9027883a 	mov	r19,r18
    8c00:	980d883a 	mov	r6,r19
    8c04:	e00b883a 	mov	r5,fp
    8c08:	00099600 	call	9960 <memmove>
    8c0c:	80800217 	ldw	r2,8(r16)
    8c10:	80c00017 	ldw	r3,0(r16)
    8c14:	14c5c83a 	sub	r2,r2,r19
    8c18:	1cc7883a 	add	r3,r3,r19
    8c1c:	80800215 	stw	r2,8(r16)
    8c20:	80c00015 	stw	r3,0(r16)
    8c24:	10004326 	beq	r2,zero,8d34 <__sfvwrite_r+0x45c>
    8c28:	9805883a 	mov	r2,r19
    8c2c:	003f8306 	br	8a3c <__sfvwrite_r+0x164>
    8c30:	b00d883a 	mov	r6,r22
    8c34:	e00b883a 	mov	r5,fp
    8c38:	da000115 	stw	r8,4(sp)
    8c3c:	00099600 	call	9960 <memmove>
    8c40:	80800217 	ldw	r2,8(r16)
    8c44:	80c00017 	ldw	r3,0(r16)
    8c48:	da000117 	ldw	r8,4(sp)
    8c4c:	1585c83a 	sub	r2,r2,r22
    8c50:	1dad883a 	add	r22,r3,r22
    8c54:	80800215 	stw	r2,8(r16)
    8c58:	85800015 	stw	r22,0(r16)
    8c5c:	003fbf06 	br	8b5c <__sfvwrite_r+0x284>
    8c60:	81000017 	ldw	r4,0(r16)
    8c64:	9027883a 	mov	r19,r18
    8c68:	902f883a 	mov	r23,r18
    8c6c:	003f6906 	br	8a14 <__sfvwrite_r+0x13c>
    8c70:	900d883a 	mov	r6,r18
    8c74:	01400284 	movi	r5,10
    8c78:	e009883a 	mov	r4,fp
    8c7c:	00097340 	call	9734 <memchr>
    8c80:	10003e26 	beq	r2,zero,8d7c <__sfvwrite_r+0x4a4>
    8c84:	10800044 	addi	r2,r2,1
    8c88:	1727c83a 	sub	r19,r2,fp
    8c8c:	02000044 	movi	r8,1
    8c90:	003f9d06 	br	8b08 <__sfvwrite_r+0x230>
    8c94:	80800517 	ldw	r2,20(r16)
    8c98:	81400417 	ldw	r5,16(r16)
    8c9c:	81c00017 	ldw	r7,0(r16)
    8ca0:	10a7883a 	add	r19,r2,r2
    8ca4:	9885883a 	add	r2,r19,r2
    8ca8:	1026d7fa 	srli	r19,r2,31
    8cac:	396dc83a 	sub	r22,r7,r5
    8cb0:	b1000044 	addi	r4,r22,1
    8cb4:	9885883a 	add	r2,r19,r2
    8cb8:	1027d07a 	srai	r19,r2,1
    8cbc:	2485883a 	add	r2,r4,r18
    8cc0:	980d883a 	mov	r6,r19
    8cc4:	9880022e 	bgeu	r19,r2,8cd0 <__sfvwrite_r+0x3f8>
    8cc8:	1027883a 	mov	r19,r2
    8ccc:	100d883a 	mov	r6,r2
    8cd0:	18c1000c 	andi	r3,r3,1024
    8cd4:	18001c26 	beq	r3,zero,8d48 <__sfvwrite_r+0x470>
    8cd8:	300b883a 	mov	r5,r6
    8cdc:	a809883a 	mov	r4,r21
    8ce0:	0008f280 	call	8f28 <_malloc_r>
    8ce4:	102f883a 	mov	r23,r2
    8ce8:	10002926 	beq	r2,zero,8d90 <__sfvwrite_r+0x4b8>
    8cec:	81400417 	ldw	r5,16(r16)
    8cf0:	b00d883a 	mov	r6,r22
    8cf4:	1009883a 	mov	r4,r2
    8cf8:	00098180 	call	9818 <memcpy>
    8cfc:	8080030b 	ldhu	r2,12(r16)
    8d00:	00fedfc4 	movi	r3,-1153
    8d04:	10c4703a 	and	r2,r2,r3
    8d08:	10802014 	ori	r2,r2,128
    8d0c:	8080030d 	sth	r2,12(r16)
    8d10:	bd89883a 	add	r4,r23,r22
    8d14:	9d8fc83a 	sub	r7,r19,r22
    8d18:	85c00415 	stw	r23,16(r16)
    8d1c:	84c00515 	stw	r19,20(r16)
    8d20:	81000015 	stw	r4,0(r16)
    8d24:	9027883a 	mov	r19,r18
    8d28:	81c00215 	stw	r7,8(r16)
    8d2c:	902f883a 	mov	r23,r18
    8d30:	003f3806 	br	8a14 <__sfvwrite_r+0x13c>
    8d34:	800b883a 	mov	r5,r16
    8d38:	a809883a 	mov	r4,r21
    8d3c:	000a8000 	call	a800 <_fflush_r>
    8d40:	103fb926 	beq	r2,zero,8c28 <__sfvwrite_r+0x350>
    8d44:	003f6506 	br	8adc <__sfvwrite_r+0x204>
    8d48:	a809883a 	mov	r4,r21
    8d4c:	0009be40 	call	9be4 <_realloc_r>
    8d50:	102f883a 	mov	r23,r2
    8d54:	103fee1e 	bne	r2,zero,8d10 <__sfvwrite_r+0x438>
    8d58:	81400417 	ldw	r5,16(r16)
    8d5c:	a809883a 	mov	r4,r21
    8d60:	000a9b00 	call	a9b0 <_free_r>
    8d64:	8080030b 	ldhu	r2,12(r16)
    8d68:	00ffdfc4 	movi	r3,-129
    8d6c:	1884703a 	and	r2,r3,r2
    8d70:	00c00304 	movi	r3,12
    8d74:	a8c00015 	stw	r3,0(r21)
    8d78:	003f5906 	br	8ae0 <__sfvwrite_r+0x208>
    8d7c:	94c00044 	addi	r19,r18,1
    8d80:	02000044 	movi	r8,1
    8d84:	003f6006 	br	8b08 <__sfvwrite_r+0x230>
    8d88:	00bfffc4 	movi	r2,-1
    8d8c:	003f0006 	br	8990 <__sfvwrite_r+0xb8>
    8d90:	00800304 	movi	r2,12
    8d94:	a8800015 	stw	r2,0(r21)
    8d98:	8080030b 	ldhu	r2,12(r16)
    8d9c:	003f5006 	br	8ae0 <__sfvwrite_r+0x208>

00008da0 <_fwalk>:
    8da0:	defff704 	addi	sp,sp,-36
    8da4:	dd000415 	stw	r20,16(sp)
    8da8:	dfc00815 	stw	ra,32(sp)
    8dac:	ddc00715 	stw	r23,28(sp)
    8db0:	dd800615 	stw	r22,24(sp)
    8db4:	dd400515 	stw	r21,20(sp)
    8db8:	dcc00315 	stw	r19,12(sp)
    8dbc:	dc800215 	stw	r18,8(sp)
    8dc0:	dc400115 	stw	r17,4(sp)
    8dc4:	dc000015 	stw	r16,0(sp)
    8dc8:	2500b804 	addi	r20,r4,736
    8dcc:	a0002326 	beq	r20,zero,8e5c <_fwalk+0xbc>
    8dd0:	282b883a 	mov	r21,r5
    8dd4:	002f883a 	mov	r23,zero
    8dd8:	05800044 	movi	r22,1
    8ddc:	04ffffc4 	movi	r19,-1
    8de0:	a4400117 	ldw	r17,4(r20)
    8de4:	a4800217 	ldw	r18,8(r20)
    8de8:	8c7fffc4 	addi	r17,r17,-1
    8dec:	88000d16 	blt	r17,zero,8e24 <_fwalk+0x84>
    8df0:	94000304 	addi	r16,r18,12
    8df4:	94800384 	addi	r18,r18,14
    8df8:	8080000b 	ldhu	r2,0(r16)
    8dfc:	8c7fffc4 	addi	r17,r17,-1
    8e00:	813ffd04 	addi	r4,r16,-12
    8e04:	b080042e 	bgeu	r22,r2,8e18 <_fwalk+0x78>
    8e08:	9080000f 	ldh	r2,0(r18)
    8e0c:	14c00226 	beq	r2,r19,8e18 <_fwalk+0x78>
    8e10:	a83ee83a 	callr	r21
    8e14:	b8aeb03a 	or	r23,r23,r2
    8e18:	84001a04 	addi	r16,r16,104
    8e1c:	94801a04 	addi	r18,r18,104
    8e20:	8cfff51e 	bne	r17,r19,8df8 <_fwalk+0x58>
    8e24:	a5000017 	ldw	r20,0(r20)
    8e28:	a03fed1e 	bne	r20,zero,8de0 <_fwalk+0x40>
    8e2c:	b805883a 	mov	r2,r23
    8e30:	dfc00817 	ldw	ra,32(sp)
    8e34:	ddc00717 	ldw	r23,28(sp)
    8e38:	dd800617 	ldw	r22,24(sp)
    8e3c:	dd400517 	ldw	r21,20(sp)
    8e40:	dd000417 	ldw	r20,16(sp)
    8e44:	dcc00317 	ldw	r19,12(sp)
    8e48:	dc800217 	ldw	r18,8(sp)
    8e4c:	dc400117 	ldw	r17,4(sp)
    8e50:	dc000017 	ldw	r16,0(sp)
    8e54:	dec00904 	addi	sp,sp,36
    8e58:	f800283a 	ret
    8e5c:	002f883a 	mov	r23,zero
    8e60:	003ff206 	br	8e2c <_fwalk+0x8c>

00008e64 <_fwalk_reent>:
    8e64:	defff704 	addi	sp,sp,-36
    8e68:	dd000415 	stw	r20,16(sp)
    8e6c:	dfc00815 	stw	ra,32(sp)
    8e70:	ddc00715 	stw	r23,28(sp)
    8e74:	dd800615 	stw	r22,24(sp)
    8e78:	dd400515 	stw	r21,20(sp)
    8e7c:	dcc00315 	stw	r19,12(sp)
    8e80:	dc800215 	stw	r18,8(sp)
    8e84:	dc400115 	stw	r17,4(sp)
    8e88:	dc000015 	stw	r16,0(sp)
    8e8c:	2500b804 	addi	r20,r4,736
    8e90:	a0002326 	beq	r20,zero,8f20 <_fwalk_reent+0xbc>
    8e94:	282b883a 	mov	r21,r5
    8e98:	2027883a 	mov	r19,r4
    8e9c:	002f883a 	mov	r23,zero
    8ea0:	05800044 	movi	r22,1
    8ea4:	04bfffc4 	movi	r18,-1
    8ea8:	a4400117 	ldw	r17,4(r20)
    8eac:	a4000217 	ldw	r16,8(r20)
    8eb0:	8c7fffc4 	addi	r17,r17,-1
    8eb4:	88000c16 	blt	r17,zero,8ee8 <_fwalk_reent+0x84>
    8eb8:	84000304 	addi	r16,r16,12
    8ebc:	8080000b 	ldhu	r2,0(r16)
    8ec0:	8c7fffc4 	addi	r17,r17,-1
    8ec4:	817ffd04 	addi	r5,r16,-12
    8ec8:	b080052e 	bgeu	r22,r2,8ee0 <_fwalk_reent+0x7c>
    8ecc:	8080008f 	ldh	r2,2(r16)
    8ed0:	9809883a 	mov	r4,r19
    8ed4:	14800226 	beq	r2,r18,8ee0 <_fwalk_reent+0x7c>
    8ed8:	a83ee83a 	callr	r21
    8edc:	b8aeb03a 	or	r23,r23,r2
    8ee0:	84001a04 	addi	r16,r16,104
    8ee4:	8cbff51e 	bne	r17,r18,8ebc <_fwalk_reent+0x58>
    8ee8:	a5000017 	ldw	r20,0(r20)
    8eec:	a03fee1e 	bne	r20,zero,8ea8 <_fwalk_reent+0x44>
    8ef0:	b805883a 	mov	r2,r23
    8ef4:	dfc00817 	ldw	ra,32(sp)
    8ef8:	ddc00717 	ldw	r23,28(sp)
    8efc:	dd800617 	ldw	r22,24(sp)
    8f00:	dd400517 	ldw	r21,20(sp)
    8f04:	dd000417 	ldw	r20,16(sp)
    8f08:	dcc00317 	ldw	r19,12(sp)
    8f0c:	dc800217 	ldw	r18,8(sp)
    8f10:	dc400117 	ldw	r17,4(sp)
    8f14:	dc000017 	ldw	r16,0(sp)
    8f18:	dec00904 	addi	sp,sp,36
    8f1c:	f800283a 	ret
    8f20:	002f883a 	mov	r23,zero
    8f24:	003ff206 	br	8ef0 <_fwalk_reent+0x8c>

00008f28 <_malloc_r>:
    8f28:	defff504 	addi	sp,sp,-44
    8f2c:	dc800315 	stw	r18,12(sp)
    8f30:	dfc00a15 	stw	ra,40(sp)
    8f34:	df000915 	stw	fp,36(sp)
    8f38:	ddc00815 	stw	r23,32(sp)
    8f3c:	dd800715 	stw	r22,28(sp)
    8f40:	dd400615 	stw	r21,24(sp)
    8f44:	dd000515 	stw	r20,20(sp)
    8f48:	dcc00415 	stw	r19,16(sp)
    8f4c:	dc400215 	stw	r17,8(sp)
    8f50:	dc000115 	stw	r16,4(sp)
    8f54:	288002c4 	addi	r2,r5,11
    8f58:	00c00584 	movi	r3,22
    8f5c:	2025883a 	mov	r18,r4
    8f60:	18807f2e 	bgeu	r3,r2,9160 <_malloc_r+0x238>
    8f64:	047ffe04 	movi	r17,-8
    8f68:	1462703a 	and	r17,r2,r17
    8f6c:	8800a316 	blt	r17,zero,91fc <_malloc_r+0x2d4>
    8f70:	8940a236 	bltu	r17,r5,91fc <_malloc_r+0x2d4>
    8f74:	000b8e40 	call	b8e4 <__malloc_lock>
    8f78:	00807dc4 	movi	r2,503
    8f7c:	1441e92e 	bgeu	r2,r17,9724 <_malloc_r+0x7fc>
    8f80:	8804d27a 	srli	r2,r17,9
    8f84:	1000a126 	beq	r2,zero,920c <_malloc_r+0x2e4>
    8f88:	00c00104 	movi	r3,4
    8f8c:	18811e36 	bltu	r3,r2,9408 <_malloc_r+0x4e0>
    8f90:	8804d1ba 	srli	r2,r17,6
    8f94:	12000e44 	addi	r8,r2,57
    8f98:	11c00e04 	addi	r7,r2,56
    8f9c:	4209883a 	add	r4,r8,r8
    8fa0:	04c00074 	movhi	r19,1
    8fa4:	2109883a 	add	r4,r4,r4
    8fa8:	9cf42804 	addi	r19,r19,-12128
    8fac:	2109883a 	add	r4,r4,r4
    8fb0:	9909883a 	add	r4,r19,r4
    8fb4:	24000117 	ldw	r16,4(r4)
    8fb8:	213ffe04 	addi	r4,r4,-8
    8fbc:	24009726 	beq	r4,r16,921c <_malloc_r+0x2f4>
    8fc0:	80800117 	ldw	r2,4(r16)
    8fc4:	01bfff04 	movi	r6,-4
    8fc8:	014003c4 	movi	r5,15
    8fcc:	1184703a 	and	r2,r2,r6
    8fd0:	1447c83a 	sub	r3,r2,r17
    8fd4:	28c00716 	blt	r5,r3,8ff4 <_malloc_r+0xcc>
    8fd8:	1800920e 	bge	r3,zero,9224 <_malloc_r+0x2fc>
    8fdc:	84000317 	ldw	r16,12(r16)
    8fe0:	24008e26 	beq	r4,r16,921c <_malloc_r+0x2f4>
    8fe4:	80800117 	ldw	r2,4(r16)
    8fe8:	1184703a 	and	r2,r2,r6
    8fec:	1447c83a 	sub	r3,r2,r17
    8ff0:	28fff90e 	bge	r5,r3,8fd8 <_malloc_r+0xb0>
    8ff4:	3809883a 	mov	r4,r7
    8ff8:	01800074 	movhi	r6,1
    8ffc:	9c000417 	ldw	r16,16(r19)
    9000:	31b42804 	addi	r6,r6,-12128
    9004:	32000204 	addi	r8,r6,8
    9008:	82013426 	beq	r16,r8,94dc <_malloc_r+0x5b4>
    900c:	80c00117 	ldw	r3,4(r16)
    9010:	00bfff04 	movi	r2,-4
    9014:	188e703a 	and	r7,r3,r2
    9018:	3c45c83a 	sub	r2,r7,r17
    901c:	00c003c4 	movi	r3,15
    9020:	18811f16 	blt	r3,r2,94a0 <_malloc_r+0x578>
    9024:	32000515 	stw	r8,20(r6)
    9028:	32000415 	stw	r8,16(r6)
    902c:	10007f0e 	bge	r2,zero,922c <_malloc_r+0x304>
    9030:	00807fc4 	movi	r2,511
    9034:	11c0fd36 	bltu	r2,r7,942c <_malloc_r+0x504>
    9038:	3806d0fa 	srli	r3,r7,3
    903c:	01c00044 	movi	r7,1
    9040:	30800117 	ldw	r2,4(r6)
    9044:	19400044 	addi	r5,r3,1
    9048:	294b883a 	add	r5,r5,r5
    904c:	1807d0ba 	srai	r3,r3,2
    9050:	294b883a 	add	r5,r5,r5
    9054:	294b883a 	add	r5,r5,r5
    9058:	298b883a 	add	r5,r5,r6
    905c:	38c6983a 	sll	r3,r7,r3
    9060:	29c00017 	ldw	r7,0(r5)
    9064:	2a7ffe04 	addi	r9,r5,-8
    9068:	1886b03a 	or	r3,r3,r2
    906c:	82400315 	stw	r9,12(r16)
    9070:	81c00215 	stw	r7,8(r16)
    9074:	30c00115 	stw	r3,4(r6)
    9078:	2c000015 	stw	r16,0(r5)
    907c:	3c000315 	stw	r16,12(r7)
    9080:	2005d0ba 	srai	r2,r4,2
    9084:	01400044 	movi	r5,1
    9088:	288a983a 	sll	r5,r5,r2
    908c:	19406f36 	bltu	r3,r5,924c <_malloc_r+0x324>
    9090:	28c4703a 	and	r2,r5,r3
    9094:	10000a1e 	bne	r2,zero,90c0 <_malloc_r+0x198>
    9098:	00bfff04 	movi	r2,-4
    909c:	294b883a 	add	r5,r5,r5
    90a0:	2088703a 	and	r4,r4,r2
    90a4:	28c4703a 	and	r2,r5,r3
    90a8:	21000104 	addi	r4,r4,4
    90ac:	1000041e 	bne	r2,zero,90c0 <_malloc_r+0x198>
    90b0:	294b883a 	add	r5,r5,r5
    90b4:	28c4703a 	and	r2,r5,r3
    90b8:	21000104 	addi	r4,r4,4
    90bc:	103ffc26 	beq	r2,zero,90b0 <_malloc_r+0x188>
    90c0:	02bfff04 	movi	r10,-4
    90c4:	024003c4 	movi	r9,15
    90c8:	21800044 	addi	r6,r4,1
    90cc:	318d883a 	add	r6,r6,r6
    90d0:	318d883a 	add	r6,r6,r6
    90d4:	318d883a 	add	r6,r6,r6
    90d8:	998d883a 	add	r6,r19,r6
    90dc:	333ffe04 	addi	r12,r6,-8
    90e0:	2017883a 	mov	r11,r4
    90e4:	31800104 	addi	r6,r6,4
    90e8:	34000017 	ldw	r16,0(r6)
    90ec:	31fffd04 	addi	r7,r6,-12
    90f0:	81c0041e 	bne	r16,r7,9104 <_malloc_r+0x1dc>
    90f4:	0000fb06 	br	94e4 <_malloc_r+0x5bc>
    90f8:	1801030e 	bge	r3,zero,9508 <_malloc_r+0x5e0>
    90fc:	84000317 	ldw	r16,12(r16)
    9100:	81c0f826 	beq	r16,r7,94e4 <_malloc_r+0x5bc>
    9104:	80800117 	ldw	r2,4(r16)
    9108:	1284703a 	and	r2,r2,r10
    910c:	1447c83a 	sub	r3,r2,r17
    9110:	48fff90e 	bge	r9,r3,90f8 <_malloc_r+0x1d0>
    9114:	80800317 	ldw	r2,12(r16)
    9118:	81000217 	ldw	r4,8(r16)
    911c:	89400054 	ori	r5,r17,1
    9120:	81400115 	stw	r5,4(r16)
    9124:	20800315 	stw	r2,12(r4)
    9128:	11000215 	stw	r4,8(r2)
    912c:	8463883a 	add	r17,r16,r17
    9130:	9c400515 	stw	r17,20(r19)
    9134:	9c400415 	stw	r17,16(r19)
    9138:	18800054 	ori	r2,r3,1
    913c:	88800115 	stw	r2,4(r17)
    9140:	8a000315 	stw	r8,12(r17)
    9144:	8a000215 	stw	r8,8(r17)
    9148:	88e3883a 	add	r17,r17,r3
    914c:	88c00015 	stw	r3,0(r17)
    9150:	9009883a 	mov	r4,r18
    9154:	000b9080 	call	b908 <__malloc_unlock>
    9158:	80800204 	addi	r2,r16,8
    915c:	00001b06 	br	91cc <_malloc_r+0x2a4>
    9160:	04400404 	movi	r17,16
    9164:	89402536 	bltu	r17,r5,91fc <_malloc_r+0x2d4>
    9168:	000b8e40 	call	b8e4 <__malloc_lock>
    916c:	00800184 	movi	r2,6
    9170:	01000084 	movi	r4,2
    9174:	04c00074 	movhi	r19,1
    9178:	1085883a 	add	r2,r2,r2
    917c:	9cf42804 	addi	r19,r19,-12128
    9180:	1085883a 	add	r2,r2,r2
    9184:	9885883a 	add	r2,r19,r2
    9188:	14000117 	ldw	r16,4(r2)
    918c:	10fffe04 	addi	r3,r2,-8
    9190:	80c0d926 	beq	r16,r3,94f8 <_malloc_r+0x5d0>
    9194:	80c00117 	ldw	r3,4(r16)
    9198:	81000317 	ldw	r4,12(r16)
    919c:	00bfff04 	movi	r2,-4
    91a0:	1884703a 	and	r2,r3,r2
    91a4:	81400217 	ldw	r5,8(r16)
    91a8:	8085883a 	add	r2,r16,r2
    91ac:	10c00117 	ldw	r3,4(r2)
    91b0:	29000315 	stw	r4,12(r5)
    91b4:	21400215 	stw	r5,8(r4)
    91b8:	18c00054 	ori	r3,r3,1
    91bc:	10c00115 	stw	r3,4(r2)
    91c0:	9009883a 	mov	r4,r18
    91c4:	000b9080 	call	b908 <__malloc_unlock>
    91c8:	80800204 	addi	r2,r16,8
    91cc:	dfc00a17 	ldw	ra,40(sp)
    91d0:	df000917 	ldw	fp,36(sp)
    91d4:	ddc00817 	ldw	r23,32(sp)
    91d8:	dd800717 	ldw	r22,28(sp)
    91dc:	dd400617 	ldw	r21,24(sp)
    91e0:	dd000517 	ldw	r20,20(sp)
    91e4:	dcc00417 	ldw	r19,16(sp)
    91e8:	dc800317 	ldw	r18,12(sp)
    91ec:	dc400217 	ldw	r17,8(sp)
    91f0:	dc000117 	ldw	r16,4(sp)
    91f4:	dec00b04 	addi	sp,sp,44
    91f8:	f800283a 	ret
    91fc:	00800304 	movi	r2,12
    9200:	90800015 	stw	r2,0(r18)
    9204:	0005883a 	mov	r2,zero
    9208:	003ff006 	br	91cc <_malloc_r+0x2a4>
    920c:	01002004 	movi	r4,128
    9210:	02001004 	movi	r8,64
    9214:	01c00fc4 	movi	r7,63
    9218:	003f6106 	br	8fa0 <_malloc_r+0x78>
    921c:	4009883a 	mov	r4,r8
    9220:	003f7506 	br	8ff8 <_malloc_r+0xd0>
    9224:	81000317 	ldw	r4,12(r16)
    9228:	003fde06 	br	91a4 <_malloc_r+0x27c>
    922c:	81c5883a 	add	r2,r16,r7
    9230:	11400117 	ldw	r5,4(r2)
    9234:	9009883a 	mov	r4,r18
    9238:	29400054 	ori	r5,r5,1
    923c:	11400115 	stw	r5,4(r2)
    9240:	000b9080 	call	b908 <__malloc_unlock>
    9244:	80800204 	addi	r2,r16,8
    9248:	003fe006 	br	91cc <_malloc_r+0x2a4>
    924c:	9c000217 	ldw	r16,8(r19)
    9250:	00bfff04 	movi	r2,-4
    9254:	85800117 	ldw	r22,4(r16)
    9258:	b0ac703a 	and	r22,r22,r2
    925c:	b4400336 	bltu	r22,r17,926c <_malloc_r+0x344>
    9260:	b445c83a 	sub	r2,r22,r17
    9264:	00c003c4 	movi	r3,15
    9268:	18805d16 	blt	r3,r2,93e0 <_malloc_r+0x4b8>
    926c:	05c00074 	movhi	r23,1
    9270:	00800074 	movhi	r2,1
    9274:	10b83f04 	addi	r2,r2,-7940
    9278:	bdf5a204 	addi	r23,r23,-10616
    927c:	15400017 	ldw	r21,0(r2)
    9280:	b8c00017 	ldw	r3,0(r23)
    9284:	00bfffc4 	movi	r2,-1
    9288:	858d883a 	add	r6,r16,r22
    928c:	8d6b883a 	add	r21,r17,r21
    9290:	1880ea26 	beq	r3,r2,963c <_malloc_r+0x714>
    9294:	ad4403c4 	addi	r21,r21,4111
    9298:	00bc0004 	movi	r2,-4096
    929c:	a8aa703a 	and	r21,r21,r2
    92a0:	a80b883a 	mov	r5,r21
    92a4:	9009883a 	mov	r4,r18
    92a8:	d9800015 	stw	r6,0(sp)
    92ac:	000a1480 	call	a148 <_sbrk_r>
    92b0:	1029883a 	mov	r20,r2
    92b4:	00bfffc4 	movi	r2,-1
    92b8:	d9800017 	ldw	r6,0(sp)
    92bc:	a080e826 	beq	r20,r2,9660 <_malloc_r+0x738>
    92c0:	a180a636 	bltu	r20,r6,955c <_malloc_r+0x634>
    92c4:	07000074 	movhi	fp,1
    92c8:	e7384604 	addi	fp,fp,-7912
    92cc:	e0800017 	ldw	r2,0(fp)
    92d0:	a887883a 	add	r3,r21,r2
    92d4:	e0c00015 	stw	r3,0(fp)
    92d8:	3500e626 	beq	r6,r20,9674 <_malloc_r+0x74c>
    92dc:	b9000017 	ldw	r4,0(r23)
    92e0:	00bfffc4 	movi	r2,-1
    92e4:	2080ee26 	beq	r4,r2,96a0 <_malloc_r+0x778>
    92e8:	a185c83a 	sub	r2,r20,r6
    92ec:	10c5883a 	add	r2,r2,r3
    92f0:	e0800015 	stw	r2,0(fp)
    92f4:	a0c001cc 	andi	r3,r20,7
    92f8:	1800bc26 	beq	r3,zero,95ec <_malloc_r+0x6c4>
    92fc:	a0e9c83a 	sub	r20,r20,r3
    9300:	00840204 	movi	r2,4104
    9304:	a5000204 	addi	r20,r20,8
    9308:	10c7c83a 	sub	r3,r2,r3
    930c:	a545883a 	add	r2,r20,r21
    9310:	1083ffcc 	andi	r2,r2,4095
    9314:	18abc83a 	sub	r21,r3,r2
    9318:	a80b883a 	mov	r5,r21
    931c:	9009883a 	mov	r4,r18
    9320:	000a1480 	call	a148 <_sbrk_r>
    9324:	00ffffc4 	movi	r3,-1
    9328:	10c0e126 	beq	r2,r3,96b0 <_malloc_r+0x788>
    932c:	1505c83a 	sub	r2,r2,r20
    9330:	1545883a 	add	r2,r2,r21
    9334:	10800054 	ori	r2,r2,1
    9338:	e0c00017 	ldw	r3,0(fp)
    933c:	9d000215 	stw	r20,8(r19)
    9340:	a0800115 	stw	r2,4(r20)
    9344:	a8c7883a 	add	r3,r21,r3
    9348:	e0c00015 	stw	r3,0(fp)
    934c:	84c00e26 	beq	r16,r19,9388 <_malloc_r+0x460>
    9350:	018003c4 	movi	r6,15
    9354:	3580a72e 	bgeu	r6,r22,95f4 <_malloc_r+0x6cc>
    9358:	81400117 	ldw	r5,4(r16)
    935c:	013ffe04 	movi	r4,-8
    9360:	b0bffd04 	addi	r2,r22,-12
    9364:	1104703a 	and	r2,r2,r4
    9368:	2900004c 	andi	r4,r5,1
    936c:	2088b03a 	or	r4,r4,r2
    9370:	81000115 	stw	r4,4(r16)
    9374:	01400144 	movi	r5,5
    9378:	8089883a 	add	r4,r16,r2
    937c:	21400115 	stw	r5,4(r4)
    9380:	21400215 	stw	r5,8(r4)
    9384:	3080cd36 	bltu	r6,r2,96bc <_malloc_r+0x794>
    9388:	00800074 	movhi	r2,1
    938c:	10b83e04 	addi	r2,r2,-7944
    9390:	11000017 	ldw	r4,0(r2)
    9394:	20c0012e 	bgeu	r4,r3,939c <_malloc_r+0x474>
    9398:	10c00015 	stw	r3,0(r2)
    939c:	00800074 	movhi	r2,1
    93a0:	10b83d04 	addi	r2,r2,-7948
    93a4:	11000017 	ldw	r4,0(r2)
    93a8:	9c000217 	ldw	r16,8(r19)
    93ac:	20c0012e 	bgeu	r4,r3,93b4 <_malloc_r+0x48c>
    93b0:	10c00015 	stw	r3,0(r2)
    93b4:	80c00117 	ldw	r3,4(r16)
    93b8:	00bfff04 	movi	r2,-4
    93bc:	1886703a 	and	r3,r3,r2
    93c0:	1c45c83a 	sub	r2,r3,r17
    93c4:	1c400236 	bltu	r3,r17,93d0 <_malloc_r+0x4a8>
    93c8:	00c003c4 	movi	r3,15
    93cc:	18800416 	blt	r3,r2,93e0 <_malloc_r+0x4b8>
    93d0:	9009883a 	mov	r4,r18
    93d4:	000b9080 	call	b908 <__malloc_unlock>
    93d8:	0005883a 	mov	r2,zero
    93dc:	003f7b06 	br	91cc <_malloc_r+0x2a4>
    93e0:	88c00054 	ori	r3,r17,1
    93e4:	80c00115 	stw	r3,4(r16)
    93e8:	8463883a 	add	r17,r16,r17
    93ec:	10800054 	ori	r2,r2,1
    93f0:	9c400215 	stw	r17,8(r19)
    93f4:	88800115 	stw	r2,4(r17)
    93f8:	9009883a 	mov	r4,r18
    93fc:	000b9080 	call	b908 <__malloc_unlock>
    9400:	80800204 	addi	r2,r16,8
    9404:	003f7106 	br	91cc <_malloc_r+0x2a4>
    9408:	00c00504 	movi	r3,20
    940c:	18804a2e 	bgeu	r3,r2,9538 <_malloc_r+0x610>
    9410:	00c01504 	movi	r3,84
    9414:	18806e36 	bltu	r3,r2,95d0 <_malloc_r+0x6a8>
    9418:	8804d33a 	srli	r2,r17,12
    941c:	12001bc4 	addi	r8,r2,111
    9420:	11c01b84 	addi	r7,r2,110
    9424:	4209883a 	add	r4,r8,r8
    9428:	003edd06 	br	8fa0 <_malloc_r+0x78>
    942c:	3804d27a 	srli	r2,r7,9
    9430:	00c00104 	movi	r3,4
    9434:	1880442e 	bgeu	r3,r2,9548 <_malloc_r+0x620>
    9438:	00c00504 	movi	r3,20
    943c:	18808136 	bltu	r3,r2,9644 <_malloc_r+0x71c>
    9440:	11401704 	addi	r5,r2,92
    9444:	10c016c4 	addi	r3,r2,91
    9448:	294b883a 	add	r5,r5,r5
    944c:	294b883a 	add	r5,r5,r5
    9450:	294b883a 	add	r5,r5,r5
    9454:	994b883a 	add	r5,r19,r5
    9458:	28800017 	ldw	r2,0(r5)
    945c:	01800074 	movhi	r6,1
    9460:	297ffe04 	addi	r5,r5,-8
    9464:	31b42804 	addi	r6,r6,-12128
    9468:	28806526 	beq	r5,r2,9600 <_malloc_r+0x6d8>
    946c:	01bfff04 	movi	r6,-4
    9470:	10c00117 	ldw	r3,4(r2)
    9474:	1986703a 	and	r3,r3,r6
    9478:	38c0022e 	bgeu	r7,r3,9484 <_malloc_r+0x55c>
    947c:	10800217 	ldw	r2,8(r2)
    9480:	28bffb1e 	bne	r5,r2,9470 <_malloc_r+0x548>
    9484:	11400317 	ldw	r5,12(r2)
    9488:	98c00117 	ldw	r3,4(r19)
    948c:	81400315 	stw	r5,12(r16)
    9490:	80800215 	stw	r2,8(r16)
    9494:	2c000215 	stw	r16,8(r5)
    9498:	14000315 	stw	r16,12(r2)
    949c:	003ef806 	br	9080 <_malloc_r+0x158>
    94a0:	88c00054 	ori	r3,r17,1
    94a4:	80c00115 	stw	r3,4(r16)
    94a8:	8463883a 	add	r17,r16,r17
    94ac:	34400515 	stw	r17,20(r6)
    94b0:	34400415 	stw	r17,16(r6)
    94b4:	10c00054 	ori	r3,r2,1
    94b8:	8a000315 	stw	r8,12(r17)
    94bc:	8a000215 	stw	r8,8(r17)
    94c0:	88c00115 	stw	r3,4(r17)
    94c4:	88a3883a 	add	r17,r17,r2
    94c8:	88800015 	stw	r2,0(r17)
    94cc:	9009883a 	mov	r4,r18
    94d0:	000b9080 	call	b908 <__malloc_unlock>
    94d4:	80800204 	addi	r2,r16,8
    94d8:	003f3c06 	br	91cc <_malloc_r+0x2a4>
    94dc:	30c00117 	ldw	r3,4(r6)
    94e0:	003ee706 	br	9080 <_malloc_r+0x158>
    94e4:	5ac00044 	addi	r11,r11,1
    94e8:	588000cc 	andi	r2,r11,3
    94ec:	31800204 	addi	r6,r6,8
    94f0:	103efd1e 	bne	r2,zero,90e8 <_malloc_r+0x1c0>
    94f4:	00002406 	br	9588 <_malloc_r+0x660>
    94f8:	14000317 	ldw	r16,12(r2)
    94fc:	143f251e 	bne	r2,r16,9194 <_malloc_r+0x26c>
    9500:	21000084 	addi	r4,r4,2
    9504:	003ebc06 	br	8ff8 <_malloc_r+0xd0>
    9508:	8085883a 	add	r2,r16,r2
    950c:	10c00117 	ldw	r3,4(r2)
    9510:	81000317 	ldw	r4,12(r16)
    9514:	81400217 	ldw	r5,8(r16)
    9518:	18c00054 	ori	r3,r3,1
    951c:	10c00115 	stw	r3,4(r2)
    9520:	29000315 	stw	r4,12(r5)
    9524:	21400215 	stw	r5,8(r4)
    9528:	9009883a 	mov	r4,r18
    952c:	000b9080 	call	b908 <__malloc_unlock>
    9530:	80800204 	addi	r2,r16,8
    9534:	003f2506 	br	91cc <_malloc_r+0x2a4>
    9538:	12001704 	addi	r8,r2,92
    953c:	11c016c4 	addi	r7,r2,91
    9540:	4209883a 	add	r4,r8,r8
    9544:	003e9606 	br	8fa0 <_malloc_r+0x78>
    9548:	3804d1ba 	srli	r2,r7,6
    954c:	11400e44 	addi	r5,r2,57
    9550:	10c00e04 	addi	r3,r2,56
    9554:	294b883a 	add	r5,r5,r5
    9558:	003fbc06 	br	944c <_malloc_r+0x524>
    955c:	84ff5926 	beq	r16,r19,92c4 <_malloc_r+0x39c>
    9560:	00800074 	movhi	r2,1
    9564:	10b42804 	addi	r2,r2,-12128
    9568:	14000217 	ldw	r16,8(r2)
    956c:	00bfff04 	movi	r2,-4
    9570:	80c00117 	ldw	r3,4(r16)
    9574:	1886703a 	and	r3,r3,r2
    9578:	003f9106 	br	93c0 <_malloc_r+0x498>
    957c:	60800217 	ldw	r2,8(r12)
    9580:	213fffc4 	addi	r4,r4,-1
    9584:	1300651e 	bne	r2,r12,971c <_malloc_r+0x7f4>
    9588:	208000cc 	andi	r2,r4,3
    958c:	633ffe04 	addi	r12,r12,-8
    9590:	103ffa1e 	bne	r2,zero,957c <_malloc_r+0x654>
    9594:	98800117 	ldw	r2,4(r19)
    9598:	0146303a 	nor	r3,zero,r5
    959c:	1884703a 	and	r2,r3,r2
    95a0:	98800115 	stw	r2,4(r19)
    95a4:	294b883a 	add	r5,r5,r5
    95a8:	117f2836 	bltu	r2,r5,924c <_malloc_r+0x324>
    95ac:	283f2726 	beq	r5,zero,924c <_malloc_r+0x324>
    95b0:	2886703a 	and	r3,r5,r2
    95b4:	5809883a 	mov	r4,r11
    95b8:	183ec31e 	bne	r3,zero,90c8 <_malloc_r+0x1a0>
    95bc:	294b883a 	add	r5,r5,r5
    95c0:	2886703a 	and	r3,r5,r2
    95c4:	21000104 	addi	r4,r4,4
    95c8:	183ffc26 	beq	r3,zero,95bc <_malloc_r+0x694>
    95cc:	003ebe06 	br	90c8 <_malloc_r+0x1a0>
    95d0:	00c05504 	movi	r3,340
    95d4:	18801236 	bltu	r3,r2,9620 <_malloc_r+0x6f8>
    95d8:	8804d3fa 	srli	r2,r17,15
    95dc:	12001e04 	addi	r8,r2,120
    95e0:	11c01dc4 	addi	r7,r2,119
    95e4:	4209883a 	add	r4,r8,r8
    95e8:	003e6d06 	br	8fa0 <_malloc_r+0x78>
    95ec:	00c40004 	movi	r3,4096
    95f0:	003f4606 	br	930c <_malloc_r+0x3e4>
    95f4:	00800044 	movi	r2,1
    95f8:	a0800115 	stw	r2,4(r20)
    95fc:	003f7406 	br	93d0 <_malloc_r+0x4a8>
    9600:	1805d0ba 	srai	r2,r3,2
    9604:	01c00044 	movi	r7,1
    9608:	30c00117 	ldw	r3,4(r6)
    960c:	388e983a 	sll	r7,r7,r2
    9610:	2805883a 	mov	r2,r5
    9614:	38c6b03a 	or	r3,r7,r3
    9618:	30c00115 	stw	r3,4(r6)
    961c:	003f9b06 	br	948c <_malloc_r+0x564>
    9620:	00c15504 	movi	r3,1364
    9624:	18801a36 	bltu	r3,r2,9690 <_malloc_r+0x768>
    9628:	8804d4ba 	srli	r2,r17,18
    962c:	12001f44 	addi	r8,r2,125
    9630:	11c01f04 	addi	r7,r2,124
    9634:	4209883a 	add	r4,r8,r8
    9638:	003e5906 	br	8fa0 <_malloc_r+0x78>
    963c:	ad400404 	addi	r21,r21,16
    9640:	003f1706 	br	92a0 <_malloc_r+0x378>
    9644:	00c01504 	movi	r3,84
    9648:	18802336 	bltu	r3,r2,96d8 <_malloc_r+0x7b0>
    964c:	3804d33a 	srli	r2,r7,12
    9650:	11401bc4 	addi	r5,r2,111
    9654:	10c01b84 	addi	r3,r2,110
    9658:	294b883a 	add	r5,r5,r5
    965c:	003f7b06 	br	944c <_malloc_r+0x524>
    9660:	9c000217 	ldw	r16,8(r19)
    9664:	00bfff04 	movi	r2,-4
    9668:	80c00117 	ldw	r3,4(r16)
    966c:	1886703a 	and	r3,r3,r2
    9670:	003f5306 	br	93c0 <_malloc_r+0x498>
    9674:	3083ffcc 	andi	r2,r6,4095
    9678:	103f181e 	bne	r2,zero,92dc <_malloc_r+0x3b4>
    967c:	99000217 	ldw	r4,8(r19)
    9680:	b545883a 	add	r2,r22,r21
    9684:	10800054 	ori	r2,r2,1
    9688:	20800115 	stw	r2,4(r4)
    968c:	003f3e06 	br	9388 <_malloc_r+0x460>
    9690:	01003f84 	movi	r4,254
    9694:	02001fc4 	movi	r8,127
    9698:	01c01f84 	movi	r7,126
    969c:	003e4006 	br	8fa0 <_malloc_r+0x78>
    96a0:	00800074 	movhi	r2,1
    96a4:	10b5a204 	addi	r2,r2,-10616
    96a8:	15000015 	stw	r20,0(r2)
    96ac:	003f1106 	br	92f4 <_malloc_r+0x3cc>
    96b0:	00800044 	movi	r2,1
    96b4:	002b883a 	mov	r21,zero
    96b8:	003f1f06 	br	9338 <_malloc_r+0x410>
    96bc:	81400204 	addi	r5,r16,8
    96c0:	9009883a 	mov	r4,r18
    96c4:	000a9b00 	call	a9b0 <_free_r>
    96c8:	00800074 	movhi	r2,1
    96cc:	10b84604 	addi	r2,r2,-7912
    96d0:	10c00017 	ldw	r3,0(r2)
    96d4:	003f2c06 	br	9388 <_malloc_r+0x460>
    96d8:	00c05504 	movi	r3,340
    96dc:	18800536 	bltu	r3,r2,96f4 <_malloc_r+0x7cc>
    96e0:	3804d3fa 	srli	r2,r7,15
    96e4:	11401e04 	addi	r5,r2,120
    96e8:	10c01dc4 	addi	r3,r2,119
    96ec:	294b883a 	add	r5,r5,r5
    96f0:	003f5606 	br	944c <_malloc_r+0x524>
    96f4:	00c15504 	movi	r3,1364
    96f8:	18800536 	bltu	r3,r2,9710 <_malloc_r+0x7e8>
    96fc:	3804d4ba 	srli	r2,r7,18
    9700:	11401f44 	addi	r5,r2,125
    9704:	10c01f04 	addi	r3,r2,124
    9708:	294b883a 	add	r5,r5,r5
    970c:	003f4f06 	br	944c <_malloc_r+0x524>
    9710:	01403f84 	movi	r5,254
    9714:	00c01f84 	movi	r3,126
    9718:	003f4c06 	br	944c <_malloc_r+0x524>
    971c:	98800117 	ldw	r2,4(r19)
    9720:	003fa006 	br	95a4 <_malloc_r+0x67c>
    9724:	8808d0fa 	srli	r4,r17,3
    9728:	20800044 	addi	r2,r4,1
    972c:	1085883a 	add	r2,r2,r2
    9730:	003e9006 	br	9174 <_malloc_r+0x24c>

00009734 <memchr>:
    9734:	208000cc 	andi	r2,r4,3
    9738:	280f883a 	mov	r7,r5
    973c:	10003426 	beq	r2,zero,9810 <memchr+0xdc>
    9740:	30bfffc4 	addi	r2,r6,-1
    9744:	30001a26 	beq	r6,zero,97b0 <memchr+0x7c>
    9748:	20c00003 	ldbu	r3,0(r4)
    974c:	29803fcc 	andi	r6,r5,255
    9750:	30c0051e 	bne	r6,r3,9768 <memchr+0x34>
    9754:	00001806 	br	97b8 <memchr+0x84>
    9758:	10001526 	beq	r2,zero,97b0 <memchr+0x7c>
    975c:	20c00003 	ldbu	r3,0(r4)
    9760:	10bfffc4 	addi	r2,r2,-1
    9764:	30c01426 	beq	r6,r3,97b8 <memchr+0x84>
    9768:	21000044 	addi	r4,r4,1
    976c:	20c000cc 	andi	r3,r4,3
    9770:	183ff91e 	bne	r3,zero,9758 <memchr+0x24>
    9774:	020000c4 	movi	r8,3
    9778:	40801136 	bltu	r8,r2,97c0 <memchr+0x8c>
    977c:	10000c26 	beq	r2,zero,97b0 <memchr+0x7c>
    9780:	20c00003 	ldbu	r3,0(r4)
    9784:	29403fcc 	andi	r5,r5,255
    9788:	28c00b26 	beq	r5,r3,97b8 <memchr+0x84>
    978c:	20c00044 	addi	r3,r4,1
    9790:	39803fcc 	andi	r6,r7,255
    9794:	2089883a 	add	r4,r4,r2
    9798:	00000306 	br	97a8 <memchr+0x74>
    979c:	18c00044 	addi	r3,r3,1
    97a0:	197fffc3 	ldbu	r5,-1(r3)
    97a4:	31400526 	beq	r6,r5,97bc <memchr+0x88>
    97a8:	1805883a 	mov	r2,r3
    97ac:	20fffb1e 	bne	r4,r3,979c <memchr+0x68>
    97b0:	0005883a 	mov	r2,zero
    97b4:	f800283a 	ret
    97b8:	2005883a 	mov	r2,r4
    97bc:	f800283a 	ret
    97c0:	28c03fcc 	andi	r3,r5,255
    97c4:	1812923a 	slli	r9,r3,8
    97c8:	02ffbff4 	movhi	r11,65279
    97cc:	02a02074 	movhi	r10,32897
    97d0:	48d2b03a 	or	r9,r9,r3
    97d4:	4806943a 	slli	r3,r9,16
    97d8:	5affbfc4 	addi	r11,r11,-257
    97dc:	52a02004 	addi	r10,r10,-32640
    97e0:	48d2b03a 	or	r9,r9,r3
    97e4:	20c00017 	ldw	r3,0(r4)
    97e8:	48c6f03a 	xor	r3,r9,r3
    97ec:	1acd883a 	add	r6,r3,r11
    97f0:	00c6303a 	nor	r3,zero,r3
    97f4:	30c6703a 	and	r3,r6,r3
    97f8:	1a86703a 	and	r3,r3,r10
    97fc:	183fe01e 	bne	r3,zero,9780 <memchr+0x4c>
    9800:	10bfff04 	addi	r2,r2,-4
    9804:	21000104 	addi	r4,r4,4
    9808:	40bff636 	bltu	r8,r2,97e4 <memchr+0xb0>
    980c:	003fdb06 	br	977c <memchr+0x48>
    9810:	3005883a 	mov	r2,r6
    9814:	003fd706 	br	9774 <memchr+0x40>

00009818 <memcpy>:
    9818:	defffd04 	addi	sp,sp,-12
    981c:	dfc00215 	stw	ra,8(sp)
    9820:	dc400115 	stw	r17,4(sp)
    9824:	dc000015 	stw	r16,0(sp)
    9828:	00c003c4 	movi	r3,15
    982c:	2005883a 	mov	r2,r4
    9830:	1980452e 	bgeu	r3,r6,9948 <memcpy+0x130>
    9834:	2906b03a 	or	r3,r5,r4
    9838:	18c000cc 	andi	r3,r3,3
    983c:	1800441e 	bne	r3,zero,9950 <memcpy+0x138>
    9840:	347ffc04 	addi	r17,r6,-16
    9844:	8822d13a 	srli	r17,r17,4
    9848:	28c00104 	addi	r3,r5,4
    984c:	23400104 	addi	r13,r4,4
    9850:	8820913a 	slli	r16,r17,4
    9854:	2b000204 	addi	r12,r5,8
    9858:	22c00204 	addi	r11,r4,8
    985c:	84000504 	addi	r16,r16,20
    9860:	2a800304 	addi	r10,r5,12
    9864:	22400304 	addi	r9,r4,12
    9868:	2c21883a 	add	r16,r5,r16
    986c:	2811883a 	mov	r8,r5
    9870:	200f883a 	mov	r7,r4
    9874:	41000017 	ldw	r4,0(r8)
    9878:	1fc00017 	ldw	ra,0(r3)
    987c:	63c00017 	ldw	r15,0(r12)
    9880:	39000015 	stw	r4,0(r7)
    9884:	53800017 	ldw	r14,0(r10)
    9888:	6fc00015 	stw	ra,0(r13)
    988c:	5bc00015 	stw	r15,0(r11)
    9890:	4b800015 	stw	r14,0(r9)
    9894:	18c00404 	addi	r3,r3,16
    9898:	39c00404 	addi	r7,r7,16
    989c:	42000404 	addi	r8,r8,16
    98a0:	6b400404 	addi	r13,r13,16
    98a4:	63000404 	addi	r12,r12,16
    98a8:	5ac00404 	addi	r11,r11,16
    98ac:	52800404 	addi	r10,r10,16
    98b0:	4a400404 	addi	r9,r9,16
    98b4:	1c3fef1e 	bne	r3,r16,9874 <memcpy+0x5c>
    98b8:	89c00044 	addi	r7,r17,1
    98bc:	380e913a 	slli	r7,r7,4
    98c0:	310003cc 	andi	r4,r6,15
    98c4:	02c000c4 	movi	r11,3
    98c8:	11c7883a 	add	r3,r2,r7
    98cc:	29cb883a 	add	r5,r5,r7
    98d0:	5900212e 	bgeu	r11,r4,9958 <memcpy+0x140>
    98d4:	1813883a 	mov	r9,r3
    98d8:	2811883a 	mov	r8,r5
    98dc:	200f883a 	mov	r7,r4
    98e0:	42800017 	ldw	r10,0(r8)
    98e4:	4a400104 	addi	r9,r9,4
    98e8:	39ffff04 	addi	r7,r7,-4
    98ec:	4abfff15 	stw	r10,-4(r9)
    98f0:	42000104 	addi	r8,r8,4
    98f4:	59fffa36 	bltu	r11,r7,98e0 <memcpy+0xc8>
    98f8:	213fff04 	addi	r4,r4,-4
    98fc:	2008d0ba 	srli	r4,r4,2
    9900:	318000cc 	andi	r6,r6,3
    9904:	21000044 	addi	r4,r4,1
    9908:	2109883a 	add	r4,r4,r4
    990c:	2109883a 	add	r4,r4,r4
    9910:	1907883a 	add	r3,r3,r4
    9914:	290b883a 	add	r5,r5,r4
    9918:	30000626 	beq	r6,zero,9934 <memcpy+0x11c>
    991c:	198d883a 	add	r6,r3,r6
    9920:	29c00003 	ldbu	r7,0(r5)
    9924:	18c00044 	addi	r3,r3,1
    9928:	29400044 	addi	r5,r5,1
    992c:	19ffffc5 	stb	r7,-1(r3)
    9930:	19bffb1e 	bne	r3,r6,9920 <memcpy+0x108>
    9934:	dfc00217 	ldw	ra,8(sp)
    9938:	dc400117 	ldw	r17,4(sp)
    993c:	dc000017 	ldw	r16,0(sp)
    9940:	dec00304 	addi	sp,sp,12
    9944:	f800283a 	ret
    9948:	2007883a 	mov	r3,r4
    994c:	003ff206 	br	9918 <memcpy+0x100>
    9950:	2007883a 	mov	r3,r4
    9954:	003ff106 	br	991c <memcpy+0x104>
    9958:	200d883a 	mov	r6,r4
    995c:	003fee06 	br	9918 <memcpy+0x100>

00009960 <memmove>:
    9960:	2005883a 	mov	r2,r4
    9964:	29000b2e 	bgeu	r5,r4,9994 <memmove+0x34>
    9968:	298f883a 	add	r7,r5,r6
    996c:	21c0092e 	bgeu	r4,r7,9994 <memmove+0x34>
    9970:	2187883a 	add	r3,r4,r6
    9974:	198bc83a 	sub	r5,r3,r6
    9978:	30004826 	beq	r6,zero,9a9c <memmove+0x13c>
    997c:	39ffffc4 	addi	r7,r7,-1
    9980:	39000003 	ldbu	r4,0(r7)
    9984:	18ffffc4 	addi	r3,r3,-1
    9988:	19000005 	stb	r4,0(r3)
    998c:	28fffb1e 	bne	r5,r3,997c <memmove+0x1c>
    9990:	f800283a 	ret
    9994:	00c003c4 	movi	r3,15
    9998:	1980412e 	bgeu	r3,r6,9aa0 <memmove+0x140>
    999c:	2886b03a 	or	r3,r5,r2
    99a0:	18c000cc 	andi	r3,r3,3
    99a4:	1800401e 	bne	r3,zero,9aa8 <memmove+0x148>
    99a8:	33fffc04 	addi	r15,r6,-16
    99ac:	781ed13a 	srli	r15,r15,4
    99b0:	28c00104 	addi	r3,r5,4
    99b4:	13400104 	addi	r13,r2,4
    99b8:	781c913a 	slli	r14,r15,4
    99bc:	2b000204 	addi	r12,r5,8
    99c0:	12c00204 	addi	r11,r2,8
    99c4:	73800504 	addi	r14,r14,20
    99c8:	2a800304 	addi	r10,r5,12
    99cc:	12400304 	addi	r9,r2,12
    99d0:	2b9d883a 	add	r14,r5,r14
    99d4:	2811883a 	mov	r8,r5
    99d8:	100f883a 	mov	r7,r2
    99dc:	41000017 	ldw	r4,0(r8)
    99e0:	39c00404 	addi	r7,r7,16
    99e4:	18c00404 	addi	r3,r3,16
    99e8:	393ffc15 	stw	r4,-16(r7)
    99ec:	193ffc17 	ldw	r4,-16(r3)
    99f0:	6b400404 	addi	r13,r13,16
    99f4:	5ac00404 	addi	r11,r11,16
    99f8:	693ffc15 	stw	r4,-16(r13)
    99fc:	61000017 	ldw	r4,0(r12)
    9a00:	4a400404 	addi	r9,r9,16
    9a04:	42000404 	addi	r8,r8,16
    9a08:	593ffc15 	stw	r4,-16(r11)
    9a0c:	51000017 	ldw	r4,0(r10)
    9a10:	63000404 	addi	r12,r12,16
    9a14:	52800404 	addi	r10,r10,16
    9a18:	493ffc15 	stw	r4,-16(r9)
    9a1c:	1bbfef1e 	bne	r3,r14,99dc <memmove+0x7c>
    9a20:	79000044 	addi	r4,r15,1
    9a24:	2008913a 	slli	r4,r4,4
    9a28:	328003cc 	andi	r10,r6,15
    9a2c:	02c000c4 	movi	r11,3
    9a30:	1107883a 	add	r3,r2,r4
    9a34:	290b883a 	add	r5,r5,r4
    9a38:	5a801e2e 	bgeu	r11,r10,9ab4 <memmove+0x154>
    9a3c:	1813883a 	mov	r9,r3
    9a40:	2811883a 	mov	r8,r5
    9a44:	500f883a 	mov	r7,r10
    9a48:	41000017 	ldw	r4,0(r8)
    9a4c:	4a400104 	addi	r9,r9,4
    9a50:	39ffff04 	addi	r7,r7,-4
    9a54:	493fff15 	stw	r4,-4(r9)
    9a58:	42000104 	addi	r8,r8,4
    9a5c:	59fffa36 	bltu	r11,r7,9a48 <memmove+0xe8>
    9a60:	513fff04 	addi	r4,r10,-4
    9a64:	2008d0ba 	srli	r4,r4,2
    9a68:	318000cc 	andi	r6,r6,3
    9a6c:	21000044 	addi	r4,r4,1
    9a70:	2109883a 	add	r4,r4,r4
    9a74:	2109883a 	add	r4,r4,r4
    9a78:	1907883a 	add	r3,r3,r4
    9a7c:	290b883a 	add	r5,r5,r4
    9a80:	30000b26 	beq	r6,zero,9ab0 <memmove+0x150>
    9a84:	198d883a 	add	r6,r3,r6
    9a88:	29c00003 	ldbu	r7,0(r5)
    9a8c:	18c00044 	addi	r3,r3,1
    9a90:	29400044 	addi	r5,r5,1
    9a94:	19ffffc5 	stb	r7,-1(r3)
    9a98:	19bffb1e 	bne	r3,r6,9a88 <memmove+0x128>
    9a9c:	f800283a 	ret
    9aa0:	1007883a 	mov	r3,r2
    9aa4:	003ff606 	br	9a80 <memmove+0x120>
    9aa8:	1007883a 	mov	r3,r2
    9aac:	003ff506 	br	9a84 <memmove+0x124>
    9ab0:	f800283a 	ret
    9ab4:	500d883a 	mov	r6,r10
    9ab8:	003ff106 	br	9a80 <memmove+0x120>

00009abc <memset>:
    9abc:	20c000cc 	andi	r3,r4,3
    9ac0:	2005883a 	mov	r2,r4
    9ac4:	18004426 	beq	r3,zero,9bd8 <memset+0x11c>
    9ac8:	31ffffc4 	addi	r7,r6,-1
    9acc:	30004026 	beq	r6,zero,9bd0 <memset+0x114>
    9ad0:	2813883a 	mov	r9,r5
    9ad4:	200d883a 	mov	r6,r4
    9ad8:	2007883a 	mov	r3,r4
    9adc:	00000406 	br	9af0 <memset+0x34>
    9ae0:	3a3fffc4 	addi	r8,r7,-1
    9ae4:	31800044 	addi	r6,r6,1
    9ae8:	38003926 	beq	r7,zero,9bd0 <memset+0x114>
    9aec:	400f883a 	mov	r7,r8
    9af0:	18c00044 	addi	r3,r3,1
    9af4:	32400005 	stb	r9,0(r6)
    9af8:	1a0000cc 	andi	r8,r3,3
    9afc:	403ff81e 	bne	r8,zero,9ae0 <memset+0x24>
    9b00:	010000c4 	movi	r4,3
    9b04:	21c02d2e 	bgeu	r4,r7,9bbc <memset+0x100>
    9b08:	29003fcc 	andi	r4,r5,255
    9b0c:	200c923a 	slli	r6,r4,8
    9b10:	3108b03a 	or	r4,r6,r4
    9b14:	200c943a 	slli	r6,r4,16
    9b18:	218cb03a 	or	r6,r4,r6
    9b1c:	010003c4 	movi	r4,15
    9b20:	21c0182e 	bgeu	r4,r7,9b84 <memset+0xc8>
    9b24:	3b3ffc04 	addi	r12,r7,-16
    9b28:	6018d13a 	srli	r12,r12,4
    9b2c:	1a000104 	addi	r8,r3,4
    9b30:	1ac00204 	addi	r11,r3,8
    9b34:	6008913a 	slli	r4,r12,4
    9b38:	1a800304 	addi	r10,r3,12
    9b3c:	1813883a 	mov	r9,r3
    9b40:	21000504 	addi	r4,r4,20
    9b44:	1909883a 	add	r4,r3,r4
    9b48:	49800015 	stw	r6,0(r9)
    9b4c:	41800015 	stw	r6,0(r8)
    9b50:	59800015 	stw	r6,0(r11)
    9b54:	51800015 	stw	r6,0(r10)
    9b58:	42000404 	addi	r8,r8,16
    9b5c:	4a400404 	addi	r9,r9,16
    9b60:	5ac00404 	addi	r11,r11,16
    9b64:	52800404 	addi	r10,r10,16
    9b68:	413ff71e 	bne	r8,r4,9b48 <memset+0x8c>
    9b6c:	63000044 	addi	r12,r12,1
    9b70:	6018913a 	slli	r12,r12,4
    9b74:	39c003cc 	andi	r7,r7,15
    9b78:	010000c4 	movi	r4,3
    9b7c:	1b07883a 	add	r3,r3,r12
    9b80:	21c00e2e 	bgeu	r4,r7,9bbc <memset+0x100>
    9b84:	1813883a 	mov	r9,r3
    9b88:	3811883a 	mov	r8,r7
    9b8c:	010000c4 	movi	r4,3
    9b90:	49800015 	stw	r6,0(r9)
    9b94:	423fff04 	addi	r8,r8,-4
    9b98:	4a400104 	addi	r9,r9,4
    9b9c:	223ffc36 	bltu	r4,r8,9b90 <memset+0xd4>
    9ba0:	393fff04 	addi	r4,r7,-4
    9ba4:	2008d0ba 	srli	r4,r4,2
    9ba8:	39c000cc 	andi	r7,r7,3
    9bac:	21000044 	addi	r4,r4,1
    9bb0:	2109883a 	add	r4,r4,r4
    9bb4:	2109883a 	add	r4,r4,r4
    9bb8:	1907883a 	add	r3,r3,r4
    9bbc:	38000526 	beq	r7,zero,9bd4 <memset+0x118>
    9bc0:	19cf883a 	add	r7,r3,r7
    9bc4:	19400005 	stb	r5,0(r3)
    9bc8:	18c00044 	addi	r3,r3,1
    9bcc:	38fffd1e 	bne	r7,r3,9bc4 <memset+0x108>
    9bd0:	f800283a 	ret
    9bd4:	f800283a 	ret
    9bd8:	2007883a 	mov	r3,r4
    9bdc:	300f883a 	mov	r7,r6
    9be0:	003fc706 	br	9b00 <memset+0x44>

00009be4 <_realloc_r>:
    9be4:	defff604 	addi	sp,sp,-40
    9be8:	dc800215 	stw	r18,8(sp)
    9bec:	dfc00915 	stw	ra,36(sp)
    9bf0:	df000815 	stw	fp,32(sp)
    9bf4:	ddc00715 	stw	r23,28(sp)
    9bf8:	dd800615 	stw	r22,24(sp)
    9bfc:	dd400515 	stw	r21,20(sp)
    9c00:	dd000415 	stw	r20,16(sp)
    9c04:	dcc00315 	stw	r19,12(sp)
    9c08:	dc400115 	stw	r17,4(sp)
    9c0c:	dc000015 	stw	r16,0(sp)
    9c10:	3025883a 	mov	r18,r6
    9c14:	2800b726 	beq	r5,zero,9ef4 <_realloc_r+0x310>
    9c18:	282b883a 	mov	r21,r5
    9c1c:	2029883a 	mov	r20,r4
    9c20:	000b8e40 	call	b8e4 <__malloc_lock>
    9c24:	a8bfff17 	ldw	r2,-4(r21)
    9c28:	043fff04 	movi	r16,-4
    9c2c:	90c002c4 	addi	r3,r18,11
    9c30:	01000584 	movi	r4,22
    9c34:	acfffe04 	addi	r19,r21,-8
    9c38:	1420703a 	and	r16,r2,r16
    9c3c:	20c0332e 	bgeu	r4,r3,9d0c <_realloc_r+0x128>
    9c40:	047ffe04 	movi	r17,-8
    9c44:	1c62703a 	and	r17,r3,r17
    9c48:	8807883a 	mov	r3,r17
    9c4c:	88005816 	blt	r17,zero,9db0 <_realloc_r+0x1cc>
    9c50:	8c805736 	bltu	r17,r18,9db0 <_realloc_r+0x1cc>
    9c54:	80c0300e 	bge	r16,r3,9d18 <_realloc_r+0x134>
    9c58:	07000074 	movhi	fp,1
    9c5c:	e7342804 	addi	fp,fp,-12128
    9c60:	e1c00217 	ldw	r7,8(fp)
    9c64:	9c09883a 	add	r4,r19,r16
    9c68:	22000117 	ldw	r8,4(r4)
    9c6c:	21c06326 	beq	r4,r7,9dfc <_realloc_r+0x218>
    9c70:	017fff84 	movi	r5,-2
    9c74:	414a703a 	and	r5,r8,r5
    9c78:	214b883a 	add	r5,r4,r5
    9c7c:	29800117 	ldw	r6,4(r5)
    9c80:	3180004c 	andi	r6,r6,1
    9c84:	30003f26 	beq	r6,zero,9d84 <_realloc_r+0x1a0>
    9c88:	1080004c 	andi	r2,r2,1
    9c8c:	10008326 	beq	r2,zero,9e9c <_realloc_r+0x2b8>
    9c90:	900b883a 	mov	r5,r18
    9c94:	a009883a 	mov	r4,r20
    9c98:	0008f280 	call	8f28 <_malloc_r>
    9c9c:	1025883a 	mov	r18,r2
    9ca0:	10011e26 	beq	r2,zero,a11c <_realloc_r+0x538>
    9ca4:	a93fff17 	ldw	r4,-4(r21)
    9ca8:	10fffe04 	addi	r3,r2,-8
    9cac:	00bfff84 	movi	r2,-2
    9cb0:	2084703a 	and	r2,r4,r2
    9cb4:	9885883a 	add	r2,r19,r2
    9cb8:	1880ee26 	beq	r3,r2,a074 <_realloc_r+0x490>
    9cbc:	81bfff04 	addi	r6,r16,-4
    9cc0:	00800904 	movi	r2,36
    9cc4:	1180b836 	bltu	r2,r6,9fa8 <_realloc_r+0x3c4>
    9cc8:	00c004c4 	movi	r3,19
    9ccc:	19809636 	bltu	r3,r6,9f28 <_realloc_r+0x344>
    9cd0:	9005883a 	mov	r2,r18
    9cd4:	a807883a 	mov	r3,r21
    9cd8:	19000017 	ldw	r4,0(r3)
    9cdc:	11000015 	stw	r4,0(r2)
    9ce0:	19000117 	ldw	r4,4(r3)
    9ce4:	11000115 	stw	r4,4(r2)
    9ce8:	18c00217 	ldw	r3,8(r3)
    9cec:	10c00215 	stw	r3,8(r2)
    9cf0:	a80b883a 	mov	r5,r21
    9cf4:	a009883a 	mov	r4,r20
    9cf8:	000a9b00 	call	a9b0 <_free_r>
    9cfc:	a009883a 	mov	r4,r20
    9d00:	000b9080 	call	b908 <__malloc_unlock>
    9d04:	9005883a 	mov	r2,r18
    9d08:	00001206 	br	9d54 <_realloc_r+0x170>
    9d0c:	00c00404 	movi	r3,16
    9d10:	1823883a 	mov	r17,r3
    9d14:	003fce06 	br	9c50 <_realloc_r+0x6c>
    9d18:	a825883a 	mov	r18,r21
    9d1c:	8445c83a 	sub	r2,r16,r17
    9d20:	00c003c4 	movi	r3,15
    9d24:	18802636 	bltu	r3,r2,9dc0 <_realloc_r+0x1dc>
    9d28:	99800117 	ldw	r6,4(r19)
    9d2c:	9c07883a 	add	r3,r19,r16
    9d30:	3180004c 	andi	r6,r6,1
    9d34:	3420b03a 	or	r16,r6,r16
    9d38:	9c000115 	stw	r16,4(r19)
    9d3c:	18800117 	ldw	r2,4(r3)
    9d40:	10800054 	ori	r2,r2,1
    9d44:	18800115 	stw	r2,4(r3)
    9d48:	a009883a 	mov	r4,r20
    9d4c:	000b9080 	call	b908 <__malloc_unlock>
    9d50:	9005883a 	mov	r2,r18
    9d54:	dfc00917 	ldw	ra,36(sp)
    9d58:	df000817 	ldw	fp,32(sp)
    9d5c:	ddc00717 	ldw	r23,28(sp)
    9d60:	dd800617 	ldw	r22,24(sp)
    9d64:	dd400517 	ldw	r21,20(sp)
    9d68:	dd000417 	ldw	r20,16(sp)
    9d6c:	dcc00317 	ldw	r19,12(sp)
    9d70:	dc800217 	ldw	r18,8(sp)
    9d74:	dc400117 	ldw	r17,4(sp)
    9d78:	dc000017 	ldw	r16,0(sp)
    9d7c:	dec00a04 	addi	sp,sp,40
    9d80:	f800283a 	ret
    9d84:	017fff04 	movi	r5,-4
    9d88:	414a703a 	and	r5,r8,r5
    9d8c:	814d883a 	add	r6,r16,r5
    9d90:	30c01f16 	blt	r6,r3,9e10 <_realloc_r+0x22c>
    9d94:	20800317 	ldw	r2,12(r4)
    9d98:	20c00217 	ldw	r3,8(r4)
    9d9c:	a825883a 	mov	r18,r21
    9da0:	3021883a 	mov	r16,r6
    9da4:	18800315 	stw	r2,12(r3)
    9da8:	10c00215 	stw	r3,8(r2)
    9dac:	003fdb06 	br	9d1c <_realloc_r+0x138>
    9db0:	00800304 	movi	r2,12
    9db4:	a0800015 	stw	r2,0(r20)
    9db8:	0005883a 	mov	r2,zero
    9dbc:	003fe506 	br	9d54 <_realloc_r+0x170>
    9dc0:	98c00117 	ldw	r3,4(r19)
    9dc4:	9c4b883a 	add	r5,r19,r17
    9dc8:	11000054 	ori	r4,r2,1
    9dcc:	18c0004c 	andi	r3,r3,1
    9dd0:	1c62b03a 	or	r17,r3,r17
    9dd4:	9c400115 	stw	r17,4(r19)
    9dd8:	29000115 	stw	r4,4(r5)
    9ddc:	2885883a 	add	r2,r5,r2
    9de0:	10c00117 	ldw	r3,4(r2)
    9de4:	29400204 	addi	r5,r5,8
    9de8:	a009883a 	mov	r4,r20
    9dec:	18c00054 	ori	r3,r3,1
    9df0:	10c00115 	stw	r3,4(r2)
    9df4:	000a9b00 	call	a9b0 <_free_r>
    9df8:	003fd306 	br	9d48 <_realloc_r+0x164>
    9dfc:	017fff04 	movi	r5,-4
    9e00:	414a703a 	and	r5,r8,r5
    9e04:	89800404 	addi	r6,r17,16
    9e08:	8151883a 	add	r8,r16,r5
    9e0c:	4180590e 	bge	r8,r6,9f74 <_realloc_r+0x390>
    9e10:	1080004c 	andi	r2,r2,1
    9e14:	103f9e1e 	bne	r2,zero,9c90 <_realloc_r+0xac>
    9e18:	adbffe17 	ldw	r22,-8(r21)
    9e1c:	00bfff04 	movi	r2,-4
    9e20:	9dadc83a 	sub	r22,r19,r22
    9e24:	b1800117 	ldw	r6,4(r22)
    9e28:	3084703a 	and	r2,r6,r2
    9e2c:	20002026 	beq	r4,zero,9eb0 <_realloc_r+0x2cc>
    9e30:	80af883a 	add	r23,r16,r2
    9e34:	b96f883a 	add	r23,r23,r5
    9e38:	21c05f26 	beq	r4,r7,9fb8 <_realloc_r+0x3d4>
    9e3c:	b8c01c16 	blt	r23,r3,9eb0 <_realloc_r+0x2cc>
    9e40:	20800317 	ldw	r2,12(r4)
    9e44:	20c00217 	ldw	r3,8(r4)
    9e48:	81bfff04 	addi	r6,r16,-4
    9e4c:	01000904 	movi	r4,36
    9e50:	18800315 	stw	r2,12(r3)
    9e54:	10c00215 	stw	r3,8(r2)
    9e58:	b0c00217 	ldw	r3,8(r22)
    9e5c:	b0800317 	ldw	r2,12(r22)
    9e60:	b4800204 	addi	r18,r22,8
    9e64:	18800315 	stw	r2,12(r3)
    9e68:	10c00215 	stw	r3,8(r2)
    9e6c:	21801b36 	bltu	r4,r6,9edc <_realloc_r+0x2f8>
    9e70:	008004c4 	movi	r2,19
    9e74:	1180352e 	bgeu	r2,r6,9f4c <_realloc_r+0x368>
    9e78:	a8800017 	ldw	r2,0(r21)
    9e7c:	b0800215 	stw	r2,8(r22)
    9e80:	a8800117 	ldw	r2,4(r21)
    9e84:	b0800315 	stw	r2,12(r22)
    9e88:	008006c4 	movi	r2,27
    9e8c:	11807f36 	bltu	r2,r6,a08c <_realloc_r+0x4a8>
    9e90:	b0800404 	addi	r2,r22,16
    9e94:	ad400204 	addi	r21,r21,8
    9e98:	00002d06 	br	9f50 <_realloc_r+0x36c>
    9e9c:	adbffe17 	ldw	r22,-8(r21)
    9ea0:	00bfff04 	movi	r2,-4
    9ea4:	9dadc83a 	sub	r22,r19,r22
    9ea8:	b1000117 	ldw	r4,4(r22)
    9eac:	2084703a 	and	r2,r4,r2
    9eb0:	b03f7726 	beq	r22,zero,9c90 <_realloc_r+0xac>
    9eb4:	80af883a 	add	r23,r16,r2
    9eb8:	b8ff7516 	blt	r23,r3,9c90 <_realloc_r+0xac>
    9ebc:	b0800317 	ldw	r2,12(r22)
    9ec0:	b0c00217 	ldw	r3,8(r22)
    9ec4:	81bfff04 	addi	r6,r16,-4
    9ec8:	01000904 	movi	r4,36
    9ecc:	18800315 	stw	r2,12(r3)
    9ed0:	10c00215 	stw	r3,8(r2)
    9ed4:	b4800204 	addi	r18,r22,8
    9ed8:	21bfe52e 	bgeu	r4,r6,9e70 <_realloc_r+0x28c>
    9edc:	a80b883a 	mov	r5,r21
    9ee0:	9009883a 	mov	r4,r18
    9ee4:	00099600 	call	9960 <memmove>
    9ee8:	b821883a 	mov	r16,r23
    9eec:	b027883a 	mov	r19,r22
    9ef0:	003f8a06 	br	9d1c <_realloc_r+0x138>
    9ef4:	300b883a 	mov	r5,r6
    9ef8:	dfc00917 	ldw	ra,36(sp)
    9efc:	df000817 	ldw	fp,32(sp)
    9f00:	ddc00717 	ldw	r23,28(sp)
    9f04:	dd800617 	ldw	r22,24(sp)
    9f08:	dd400517 	ldw	r21,20(sp)
    9f0c:	dd000417 	ldw	r20,16(sp)
    9f10:	dcc00317 	ldw	r19,12(sp)
    9f14:	dc800217 	ldw	r18,8(sp)
    9f18:	dc400117 	ldw	r17,4(sp)
    9f1c:	dc000017 	ldw	r16,0(sp)
    9f20:	dec00a04 	addi	sp,sp,40
    9f24:	0008f281 	jmpi	8f28 <_malloc_r>
    9f28:	a8c00017 	ldw	r3,0(r21)
    9f2c:	90c00015 	stw	r3,0(r18)
    9f30:	a8c00117 	ldw	r3,4(r21)
    9f34:	90c00115 	stw	r3,4(r18)
    9f38:	00c006c4 	movi	r3,27
    9f3c:	19804536 	bltu	r3,r6,a054 <_realloc_r+0x470>
    9f40:	90800204 	addi	r2,r18,8
    9f44:	a8c00204 	addi	r3,r21,8
    9f48:	003f6306 	br	9cd8 <_realloc_r+0xf4>
    9f4c:	9005883a 	mov	r2,r18
    9f50:	a8c00017 	ldw	r3,0(r21)
    9f54:	b821883a 	mov	r16,r23
    9f58:	b027883a 	mov	r19,r22
    9f5c:	10c00015 	stw	r3,0(r2)
    9f60:	a8c00117 	ldw	r3,4(r21)
    9f64:	10c00115 	stw	r3,4(r2)
    9f68:	a8c00217 	ldw	r3,8(r21)
    9f6c:	10c00215 	stw	r3,8(r2)
    9f70:	003f6a06 	br	9d1c <_realloc_r+0x138>
    9f74:	9c67883a 	add	r19,r19,r17
    9f78:	4445c83a 	sub	r2,r8,r17
    9f7c:	e4c00215 	stw	r19,8(fp)
    9f80:	10800054 	ori	r2,r2,1
    9f84:	98800115 	stw	r2,4(r19)
    9f88:	a8bfff17 	ldw	r2,-4(r21)
    9f8c:	a009883a 	mov	r4,r20
    9f90:	1080004c 	andi	r2,r2,1
    9f94:	1462b03a 	or	r17,r2,r17
    9f98:	ac7fff15 	stw	r17,-4(r21)
    9f9c:	000b9080 	call	b908 <__malloc_unlock>
    9fa0:	a805883a 	mov	r2,r21
    9fa4:	003f6b06 	br	9d54 <_realloc_r+0x170>
    9fa8:	a80b883a 	mov	r5,r21
    9fac:	9009883a 	mov	r4,r18
    9fb0:	00099600 	call	9960 <memmove>
    9fb4:	003f4e06 	br	9cf0 <_realloc_r+0x10c>
    9fb8:	89000404 	addi	r4,r17,16
    9fbc:	b93fbc16 	blt	r23,r4,9eb0 <_realloc_r+0x2cc>
    9fc0:	b0800317 	ldw	r2,12(r22)
    9fc4:	b0c00217 	ldw	r3,8(r22)
    9fc8:	81bfff04 	addi	r6,r16,-4
    9fcc:	01000904 	movi	r4,36
    9fd0:	18800315 	stw	r2,12(r3)
    9fd4:	10c00215 	stw	r3,8(r2)
    9fd8:	b4800204 	addi	r18,r22,8
    9fdc:	21804336 	bltu	r4,r6,a0ec <_realloc_r+0x508>
    9fe0:	008004c4 	movi	r2,19
    9fe4:	11803f2e 	bgeu	r2,r6,a0e4 <_realloc_r+0x500>
    9fe8:	a8800017 	ldw	r2,0(r21)
    9fec:	b0800215 	stw	r2,8(r22)
    9ff0:	a8800117 	ldw	r2,4(r21)
    9ff4:	b0800315 	stw	r2,12(r22)
    9ff8:	008006c4 	movi	r2,27
    9ffc:	11803f36 	bltu	r2,r6,a0fc <_realloc_r+0x518>
    a000:	b0800404 	addi	r2,r22,16
    a004:	ad400204 	addi	r21,r21,8
    a008:	a8c00017 	ldw	r3,0(r21)
    a00c:	10c00015 	stw	r3,0(r2)
    a010:	a8c00117 	ldw	r3,4(r21)
    a014:	10c00115 	stw	r3,4(r2)
    a018:	a8c00217 	ldw	r3,8(r21)
    a01c:	10c00215 	stw	r3,8(r2)
    a020:	b447883a 	add	r3,r22,r17
    a024:	bc45c83a 	sub	r2,r23,r17
    a028:	e0c00215 	stw	r3,8(fp)
    a02c:	10800054 	ori	r2,r2,1
    a030:	18800115 	stw	r2,4(r3)
    a034:	b0800117 	ldw	r2,4(r22)
    a038:	a009883a 	mov	r4,r20
    a03c:	1080004c 	andi	r2,r2,1
    a040:	1462b03a 	or	r17,r2,r17
    a044:	b4400115 	stw	r17,4(r22)
    a048:	000b9080 	call	b908 <__malloc_unlock>
    a04c:	9005883a 	mov	r2,r18
    a050:	003f4006 	br	9d54 <_realloc_r+0x170>
    a054:	a8c00217 	ldw	r3,8(r21)
    a058:	90c00215 	stw	r3,8(r18)
    a05c:	a8c00317 	ldw	r3,12(r21)
    a060:	90c00315 	stw	r3,12(r18)
    a064:	30801126 	beq	r6,r2,a0ac <_realloc_r+0x4c8>
    a068:	90800404 	addi	r2,r18,16
    a06c:	a8c00404 	addi	r3,r21,16
    a070:	003f1906 	br	9cd8 <_realloc_r+0xf4>
    a074:	90ffff17 	ldw	r3,-4(r18)
    a078:	00bfff04 	movi	r2,-4
    a07c:	a825883a 	mov	r18,r21
    a080:	1884703a 	and	r2,r3,r2
    a084:	80a1883a 	add	r16,r16,r2
    a088:	003f2406 	br	9d1c <_realloc_r+0x138>
    a08c:	a8800217 	ldw	r2,8(r21)
    a090:	b0800415 	stw	r2,16(r22)
    a094:	a8800317 	ldw	r2,12(r21)
    a098:	b0800515 	stw	r2,20(r22)
    a09c:	31000a26 	beq	r6,r4,a0c8 <_realloc_r+0x4e4>
    a0a0:	b0800604 	addi	r2,r22,24
    a0a4:	ad400404 	addi	r21,r21,16
    a0a8:	003fa906 	br	9f50 <_realloc_r+0x36c>
    a0ac:	a9000417 	ldw	r4,16(r21)
    a0b0:	90800604 	addi	r2,r18,24
    a0b4:	a8c00604 	addi	r3,r21,24
    a0b8:	91000415 	stw	r4,16(r18)
    a0bc:	a9000517 	ldw	r4,20(r21)
    a0c0:	91000515 	stw	r4,20(r18)
    a0c4:	003f0406 	br	9cd8 <_realloc_r+0xf4>
    a0c8:	a8c00417 	ldw	r3,16(r21)
    a0cc:	ad400604 	addi	r21,r21,24
    a0d0:	b0800804 	addi	r2,r22,32
    a0d4:	b0c00615 	stw	r3,24(r22)
    a0d8:	a8ffff17 	ldw	r3,-4(r21)
    a0dc:	b0c00715 	stw	r3,28(r22)
    a0e0:	003f9b06 	br	9f50 <_realloc_r+0x36c>
    a0e4:	9005883a 	mov	r2,r18
    a0e8:	003fc706 	br	a008 <_realloc_r+0x424>
    a0ec:	a80b883a 	mov	r5,r21
    a0f0:	9009883a 	mov	r4,r18
    a0f4:	00099600 	call	9960 <memmove>
    a0f8:	003fc906 	br	a020 <_realloc_r+0x43c>
    a0fc:	a8800217 	ldw	r2,8(r21)
    a100:	b0800415 	stw	r2,16(r22)
    a104:	a8800317 	ldw	r2,12(r21)
    a108:	b0800515 	stw	r2,20(r22)
    a10c:	31000726 	beq	r6,r4,a12c <_realloc_r+0x548>
    a110:	b0800604 	addi	r2,r22,24
    a114:	ad400404 	addi	r21,r21,16
    a118:	003fbb06 	br	a008 <_realloc_r+0x424>
    a11c:	a009883a 	mov	r4,r20
    a120:	000b9080 	call	b908 <__malloc_unlock>
    a124:	0005883a 	mov	r2,zero
    a128:	003f0a06 	br	9d54 <_realloc_r+0x170>
    a12c:	a8c00417 	ldw	r3,16(r21)
    a130:	ad400604 	addi	r21,r21,24
    a134:	b0800804 	addi	r2,r22,32
    a138:	b0c00615 	stw	r3,24(r22)
    a13c:	a8ffff17 	ldw	r3,-4(r21)
    a140:	b0c00715 	stw	r3,28(r22)
    a144:	003fb006 	br	a008 <_realloc_r+0x424>

0000a148 <_sbrk_r>:
    a148:	defffd04 	addi	sp,sp,-12
    a14c:	dc000015 	stw	r16,0(sp)
    a150:	04000074 	movhi	r16,1
    a154:	dc400115 	stw	r17,4(sp)
    a158:	84384004 	addi	r16,r16,-7936
    a15c:	2023883a 	mov	r17,r4
    a160:	2809883a 	mov	r4,r5
    a164:	dfc00215 	stw	ra,8(sp)
    a168:	80000015 	stw	zero,0(r16)
    a16c:	000baf00 	call	baf0 <sbrk>
    a170:	00ffffc4 	movi	r3,-1
    a174:	10c00526 	beq	r2,r3,a18c <_sbrk_r+0x44>
    a178:	dfc00217 	ldw	ra,8(sp)
    a17c:	dc400117 	ldw	r17,4(sp)
    a180:	dc000017 	ldw	r16,0(sp)
    a184:	dec00304 	addi	sp,sp,12
    a188:	f800283a 	ret
    a18c:	80c00017 	ldw	r3,0(r16)
    a190:	183ff926 	beq	r3,zero,a178 <_sbrk_r+0x30>
    a194:	88c00015 	stw	r3,0(r17)
    a198:	003ff706 	br	a178 <_sbrk_r+0x30>

0000a19c <__sread>:
    a19c:	defffe04 	addi	sp,sp,-8
    a1a0:	dc000015 	stw	r16,0(sp)
    a1a4:	2821883a 	mov	r16,r5
    a1a8:	2940038f 	ldh	r5,14(r5)
    a1ac:	dfc00115 	stw	ra,4(sp)
    a1b0:	000aedc0 	call	aedc <_read_r>
    a1b4:	10000716 	blt	r2,zero,a1d4 <__sread+0x38>
    a1b8:	80c01417 	ldw	r3,80(r16)
    a1bc:	1887883a 	add	r3,r3,r2
    a1c0:	80c01415 	stw	r3,80(r16)
    a1c4:	dfc00117 	ldw	ra,4(sp)
    a1c8:	dc000017 	ldw	r16,0(sp)
    a1cc:	dec00204 	addi	sp,sp,8
    a1d0:	f800283a 	ret
    a1d4:	80c0030b 	ldhu	r3,12(r16)
    a1d8:	18fbffcc 	andi	r3,r3,61439
    a1dc:	80c0030d 	sth	r3,12(r16)
    a1e0:	dfc00117 	ldw	ra,4(sp)
    a1e4:	dc000017 	ldw	r16,0(sp)
    a1e8:	dec00204 	addi	sp,sp,8
    a1ec:	f800283a 	ret

0000a1f0 <__seofread>:
    a1f0:	0005883a 	mov	r2,zero
    a1f4:	f800283a 	ret

0000a1f8 <__swrite>:
    a1f8:	2880030b 	ldhu	r2,12(r5)
    a1fc:	defffb04 	addi	sp,sp,-20
    a200:	dcc00315 	stw	r19,12(sp)
    a204:	dc800215 	stw	r18,8(sp)
    a208:	dc400115 	stw	r17,4(sp)
    a20c:	dc000015 	stw	r16,0(sp)
    a210:	dfc00415 	stw	ra,16(sp)
    a214:	10c0400c 	andi	r3,r2,256
    a218:	2821883a 	mov	r16,r5
    a21c:	2023883a 	mov	r17,r4
    a220:	3025883a 	mov	r18,r6
    a224:	3827883a 	mov	r19,r7
    a228:	18000526 	beq	r3,zero,a240 <__swrite+0x48>
    a22c:	2940038f 	ldh	r5,14(r5)
    a230:	01c00084 	movi	r7,2
    a234:	000d883a 	mov	r6,zero
    a238:	000acc00 	call	acc0 <_lseek_r>
    a23c:	8080030b 	ldhu	r2,12(r16)
    a240:	8140038f 	ldh	r5,14(r16)
    a244:	10bbffcc 	andi	r2,r2,61439
    a248:	980f883a 	mov	r7,r19
    a24c:	900d883a 	mov	r6,r18
    a250:	8809883a 	mov	r4,r17
    a254:	8080030d 	sth	r2,12(r16)
    a258:	dfc00417 	ldw	ra,16(sp)
    a25c:	dcc00317 	ldw	r19,12(sp)
    a260:	dc800217 	ldw	r18,8(sp)
    a264:	dc400117 	ldw	r17,4(sp)
    a268:	dc000017 	ldw	r16,0(sp)
    a26c:	dec00504 	addi	sp,sp,20
    a270:	000a2d81 	jmpi	a2d8 <_write_r>

0000a274 <__sseek>:
    a274:	defffe04 	addi	sp,sp,-8
    a278:	dc000015 	stw	r16,0(sp)
    a27c:	2821883a 	mov	r16,r5
    a280:	2940038f 	ldh	r5,14(r5)
    a284:	dfc00115 	stw	ra,4(sp)
    a288:	000acc00 	call	acc0 <_lseek_r>
    a28c:	00ffffc4 	movi	r3,-1
    a290:	10c00826 	beq	r2,r3,a2b4 <__sseek+0x40>
    a294:	80c0030b 	ldhu	r3,12(r16)
    a298:	80801415 	stw	r2,80(r16)
    a29c:	18c40014 	ori	r3,r3,4096
    a2a0:	80c0030d 	sth	r3,12(r16)
    a2a4:	dfc00117 	ldw	ra,4(sp)
    a2a8:	dc000017 	ldw	r16,0(sp)
    a2ac:	dec00204 	addi	sp,sp,8
    a2b0:	f800283a 	ret
    a2b4:	80c0030b 	ldhu	r3,12(r16)
    a2b8:	18fbffcc 	andi	r3,r3,61439
    a2bc:	80c0030d 	sth	r3,12(r16)
    a2c0:	dfc00117 	ldw	ra,4(sp)
    a2c4:	dc000017 	ldw	r16,0(sp)
    a2c8:	dec00204 	addi	sp,sp,8
    a2cc:	f800283a 	ret

0000a2d0 <__sclose>:
    a2d0:	2940038f 	ldh	r5,14(r5)
    a2d4:	000a48c1 	jmpi	a48c <_close_r>

0000a2d8 <_write_r>:
    a2d8:	defffd04 	addi	sp,sp,-12
    a2dc:	2805883a 	mov	r2,r5
    a2e0:	dc000015 	stw	r16,0(sp)
    a2e4:	04000074 	movhi	r16,1
    a2e8:	dc400115 	stw	r17,4(sp)
    a2ec:	300b883a 	mov	r5,r6
    a2f0:	84384004 	addi	r16,r16,-7936
    a2f4:	2023883a 	mov	r17,r4
    a2f8:	380d883a 	mov	r6,r7
    a2fc:	1009883a 	mov	r4,r2
    a300:	dfc00215 	stw	ra,8(sp)
    a304:	80000015 	stw	zero,0(r16)
    a308:	000bbdc0 	call	bbdc <write>
    a30c:	00ffffc4 	movi	r3,-1
    a310:	10c00526 	beq	r2,r3,a328 <_write_r+0x50>
    a314:	dfc00217 	ldw	ra,8(sp)
    a318:	dc400117 	ldw	r17,4(sp)
    a31c:	dc000017 	ldw	r16,0(sp)
    a320:	dec00304 	addi	sp,sp,12
    a324:	f800283a 	ret
    a328:	80c00017 	ldw	r3,0(r16)
    a32c:	183ff926 	beq	r3,zero,a314 <_write_r+0x3c>
    a330:	88c00015 	stw	r3,0(r17)
    a334:	003ff706 	br	a314 <_write_r+0x3c>

0000a338 <__swsetup_r>:
    a338:	00800074 	movhi	r2,1
    a33c:	defffd04 	addi	sp,sp,-12
    a340:	10b5a104 	addi	r2,r2,-10620
    a344:	dc400115 	stw	r17,4(sp)
    a348:	2023883a 	mov	r17,r4
    a34c:	11000017 	ldw	r4,0(r2)
    a350:	dc000015 	stw	r16,0(sp)
    a354:	dfc00215 	stw	ra,8(sp)
    a358:	2821883a 	mov	r16,r5
    a35c:	20000226 	beq	r4,zero,a368 <__swsetup_r+0x30>
    a360:	20800e17 	ldw	r2,56(r4)
    a364:	10003126 	beq	r2,zero,a42c <__swsetup_r+0xf4>
    a368:	8080030b 	ldhu	r2,12(r16)
    a36c:	10c0020c 	andi	r3,r2,8
    a370:	1009883a 	mov	r4,r2
    a374:	18000f26 	beq	r3,zero,a3b4 <__swsetup_r+0x7c>
    a378:	80c00417 	ldw	r3,16(r16)
    a37c:	18001526 	beq	r3,zero,a3d4 <__swsetup_r+0x9c>
    a380:	1100004c 	andi	r4,r2,1
    a384:	20001c1e 	bne	r4,zero,a3f8 <__swsetup_r+0xc0>
    a388:	1080008c 	andi	r2,r2,2
    a38c:	1000291e 	bne	r2,zero,a434 <__swsetup_r+0xfc>
    a390:	80800517 	ldw	r2,20(r16)
    a394:	80800215 	stw	r2,8(r16)
    a398:	18001c26 	beq	r3,zero,a40c <__swsetup_r+0xd4>
    a39c:	0005883a 	mov	r2,zero
    a3a0:	dfc00217 	ldw	ra,8(sp)
    a3a4:	dc400117 	ldw	r17,4(sp)
    a3a8:	dc000017 	ldw	r16,0(sp)
    a3ac:	dec00304 	addi	sp,sp,12
    a3b0:	f800283a 	ret
    a3b4:	2080040c 	andi	r2,r4,16
    a3b8:	10002e26 	beq	r2,zero,a474 <__swsetup_r+0x13c>
    a3bc:	2080010c 	andi	r2,r4,4
    a3c0:	10001e1e 	bne	r2,zero,a43c <__swsetup_r+0x104>
    a3c4:	80c00417 	ldw	r3,16(r16)
    a3c8:	20800214 	ori	r2,r4,8
    a3cc:	8080030d 	sth	r2,12(r16)
    a3d0:	183feb1e 	bne	r3,zero,a380 <__swsetup_r+0x48>
    a3d4:	1100a00c 	andi	r4,r2,640
    a3d8:	01408004 	movi	r5,512
    a3dc:	217fe826 	beq	r4,r5,a380 <__swsetup_r+0x48>
    a3e0:	800b883a 	mov	r5,r16
    a3e4:	8809883a 	mov	r4,r17
    a3e8:	000ad200 	call	ad20 <__smakebuf_r>
    a3ec:	8080030b 	ldhu	r2,12(r16)
    a3f0:	80c00417 	ldw	r3,16(r16)
    a3f4:	003fe206 	br	a380 <__swsetup_r+0x48>
    a3f8:	80800517 	ldw	r2,20(r16)
    a3fc:	80000215 	stw	zero,8(r16)
    a400:	0085c83a 	sub	r2,zero,r2
    a404:	80800615 	stw	r2,24(r16)
    a408:	183fe41e 	bne	r3,zero,a39c <__swsetup_r+0x64>
    a40c:	80c0030b 	ldhu	r3,12(r16)
    a410:	0005883a 	mov	r2,zero
    a414:	1900200c 	andi	r4,r3,128
    a418:	203fe126 	beq	r4,zero,a3a0 <__swsetup_r+0x68>
    a41c:	18c01014 	ori	r3,r3,64
    a420:	80c0030d 	sth	r3,12(r16)
    a424:	00bfffc4 	movi	r2,-1
    a428:	003fdd06 	br	a3a0 <__swsetup_r+0x68>
    a42c:	00088880 	call	8888 <__sinit>
    a430:	003fcd06 	br	a368 <__swsetup_r+0x30>
    a434:	0005883a 	mov	r2,zero
    a438:	003fd606 	br	a394 <__swsetup_r+0x5c>
    a43c:	81400c17 	ldw	r5,48(r16)
    a440:	28000626 	beq	r5,zero,a45c <__swsetup_r+0x124>
    a444:	80801004 	addi	r2,r16,64
    a448:	28800326 	beq	r5,r2,a458 <__swsetup_r+0x120>
    a44c:	8809883a 	mov	r4,r17
    a450:	000a9b00 	call	a9b0 <_free_r>
    a454:	8100030b 	ldhu	r4,12(r16)
    a458:	80000c15 	stw	zero,48(r16)
    a45c:	80c00417 	ldw	r3,16(r16)
    a460:	00bff6c4 	movi	r2,-37
    a464:	1108703a 	and	r4,r2,r4
    a468:	80000115 	stw	zero,4(r16)
    a46c:	80c00015 	stw	r3,0(r16)
    a470:	003fd506 	br	a3c8 <__swsetup_r+0x90>
    a474:	00800244 	movi	r2,9
    a478:	88800015 	stw	r2,0(r17)
    a47c:	20801014 	ori	r2,r4,64
    a480:	8080030d 	sth	r2,12(r16)
    a484:	00bfffc4 	movi	r2,-1
    a488:	003fc506 	br	a3a0 <__swsetup_r+0x68>

0000a48c <_close_r>:
    a48c:	defffd04 	addi	sp,sp,-12
    a490:	dc000015 	stw	r16,0(sp)
    a494:	04000074 	movhi	r16,1
    a498:	dc400115 	stw	r17,4(sp)
    a49c:	84384004 	addi	r16,r16,-7936
    a4a0:	2023883a 	mov	r17,r4
    a4a4:	2809883a 	mov	r4,r5
    a4a8:	dfc00215 	stw	ra,8(sp)
    a4ac:	80000015 	stw	zero,0(r16)
    a4b0:	000b2040 	call	b204 <close>
    a4b4:	00ffffc4 	movi	r3,-1
    a4b8:	10c00526 	beq	r2,r3,a4d0 <_close_r+0x44>
    a4bc:	dfc00217 	ldw	ra,8(sp)
    a4c0:	dc400117 	ldw	r17,4(sp)
    a4c4:	dc000017 	ldw	r16,0(sp)
    a4c8:	dec00304 	addi	sp,sp,12
    a4cc:	f800283a 	ret
    a4d0:	80c00017 	ldw	r3,0(r16)
    a4d4:	183ff926 	beq	r3,zero,a4bc <_close_r+0x30>
    a4d8:	88c00015 	stw	r3,0(r17)
    a4dc:	003ff706 	br	a4bc <_close_r+0x30>

0000a4e0 <_fclose_r>:
    a4e0:	28003926 	beq	r5,zero,a5c8 <_fclose_r+0xe8>
    a4e4:	defffc04 	addi	sp,sp,-16
    a4e8:	dc400115 	stw	r17,4(sp)
    a4ec:	dc000015 	stw	r16,0(sp)
    a4f0:	dfc00315 	stw	ra,12(sp)
    a4f4:	dc800215 	stw	r18,8(sp)
    a4f8:	2023883a 	mov	r17,r4
    a4fc:	2821883a 	mov	r16,r5
    a500:	20000226 	beq	r4,zero,a50c <_fclose_r+0x2c>
    a504:	20800e17 	ldw	r2,56(r4)
    a508:	10002726 	beq	r2,zero,a5a8 <_fclose_r+0xc8>
    a50c:	8080030f 	ldh	r2,12(r16)
    a510:	1000071e 	bne	r2,zero,a530 <_fclose_r+0x50>
    a514:	0005883a 	mov	r2,zero
    a518:	dfc00317 	ldw	ra,12(sp)
    a51c:	dc800217 	ldw	r18,8(sp)
    a520:	dc400117 	ldw	r17,4(sp)
    a524:	dc000017 	ldw	r16,0(sp)
    a528:	dec00404 	addi	sp,sp,16
    a52c:	f800283a 	ret
    a530:	800b883a 	mov	r5,r16
    a534:	8809883a 	mov	r4,r17
    a538:	000a5e40 	call	a5e4 <__sflush_r>
    a53c:	1025883a 	mov	r18,r2
    a540:	80800b17 	ldw	r2,44(r16)
    a544:	10000426 	beq	r2,zero,a558 <_fclose_r+0x78>
    a548:	81400717 	ldw	r5,28(r16)
    a54c:	8809883a 	mov	r4,r17
    a550:	103ee83a 	callr	r2
    a554:	10001616 	blt	r2,zero,a5b0 <_fclose_r+0xd0>
    a558:	8080030b 	ldhu	r2,12(r16)
    a55c:	1080200c 	andi	r2,r2,128
    a560:	1000151e 	bne	r2,zero,a5b8 <_fclose_r+0xd8>
    a564:	81400c17 	ldw	r5,48(r16)
    a568:	28000526 	beq	r5,zero,a580 <_fclose_r+0xa0>
    a56c:	80801004 	addi	r2,r16,64
    a570:	28800226 	beq	r5,r2,a57c <_fclose_r+0x9c>
    a574:	8809883a 	mov	r4,r17
    a578:	000a9b00 	call	a9b0 <_free_r>
    a57c:	80000c15 	stw	zero,48(r16)
    a580:	81401117 	ldw	r5,68(r16)
    a584:	28000326 	beq	r5,zero,a594 <_fclose_r+0xb4>
    a588:	8809883a 	mov	r4,r17
    a58c:	000a9b00 	call	a9b0 <_free_r>
    a590:	80001115 	stw	zero,68(r16)
    a594:	00088980 	call	8898 <__sfp_lock_acquire>
    a598:	8000030d 	sth	zero,12(r16)
    a59c:	000889c0 	call	889c <__sfp_lock_release>
    a5a0:	9005883a 	mov	r2,r18
    a5a4:	003fdc06 	br	a518 <_fclose_r+0x38>
    a5a8:	00088880 	call	8888 <__sinit>
    a5ac:	003fd706 	br	a50c <_fclose_r+0x2c>
    a5b0:	04bfffc4 	movi	r18,-1
    a5b4:	003fe806 	br	a558 <_fclose_r+0x78>
    a5b8:	81400417 	ldw	r5,16(r16)
    a5bc:	8809883a 	mov	r4,r17
    a5c0:	000a9b00 	call	a9b0 <_free_r>
    a5c4:	003fe706 	br	a564 <_fclose_r+0x84>
    a5c8:	0005883a 	mov	r2,zero
    a5cc:	f800283a 	ret

0000a5d0 <fclose>:
    a5d0:	00800074 	movhi	r2,1
    a5d4:	10b5a104 	addi	r2,r2,-10620
    a5d8:	200b883a 	mov	r5,r4
    a5dc:	11000017 	ldw	r4,0(r2)
    a5e0:	000a4e01 	jmpi	a4e0 <_fclose_r>

0000a5e4 <__sflush_r>:
    a5e4:	2880030b 	ldhu	r2,12(r5)
    a5e8:	defffb04 	addi	sp,sp,-20
    a5ec:	dcc00315 	stw	r19,12(sp)
    a5f0:	dc400115 	stw	r17,4(sp)
    a5f4:	dfc00415 	stw	ra,16(sp)
    a5f8:	dc800215 	stw	r18,8(sp)
    a5fc:	dc000015 	stw	r16,0(sp)
    a600:	10c0020c 	andi	r3,r2,8
    a604:	2823883a 	mov	r17,r5
    a608:	2027883a 	mov	r19,r4
    a60c:	1800311e 	bne	r3,zero,a6d4 <__sflush_r+0xf0>
    a610:	28c00117 	ldw	r3,4(r5)
    a614:	10820014 	ori	r2,r2,2048
    a618:	2880030d 	sth	r2,12(r5)
    a61c:	00c04b0e 	bge	zero,r3,a74c <__sflush_r+0x168>
    a620:	8a000a17 	ldw	r8,40(r17)
    a624:	40002326 	beq	r8,zero,a6b4 <__sflush_r+0xd0>
    a628:	9c000017 	ldw	r16,0(r19)
    a62c:	10c4000c 	andi	r3,r2,4096
    a630:	98000015 	stw	zero,0(r19)
    a634:	18004826 	beq	r3,zero,a758 <__sflush_r+0x174>
    a638:	89801417 	ldw	r6,80(r17)
    a63c:	10c0010c 	andi	r3,r2,4
    a640:	18000626 	beq	r3,zero,a65c <__sflush_r+0x78>
    a644:	88c00117 	ldw	r3,4(r17)
    a648:	88800c17 	ldw	r2,48(r17)
    a64c:	30cdc83a 	sub	r6,r6,r3
    a650:	10000226 	beq	r2,zero,a65c <__sflush_r+0x78>
    a654:	88800f17 	ldw	r2,60(r17)
    a658:	308dc83a 	sub	r6,r6,r2
    a65c:	89400717 	ldw	r5,28(r17)
    a660:	000f883a 	mov	r7,zero
    a664:	9809883a 	mov	r4,r19
    a668:	403ee83a 	callr	r8
    a66c:	00ffffc4 	movi	r3,-1
    a670:	10c04426 	beq	r2,r3,a784 <__sflush_r+0x1a0>
    a674:	88c0030b 	ldhu	r3,12(r17)
    a678:	89000417 	ldw	r4,16(r17)
    a67c:	88000115 	stw	zero,4(r17)
    a680:	197dffcc 	andi	r5,r3,63487
    a684:	8940030d 	sth	r5,12(r17)
    a688:	89000015 	stw	r4,0(r17)
    a68c:	18c4000c 	andi	r3,r3,4096
    a690:	18002c1e 	bne	r3,zero,a744 <__sflush_r+0x160>
    a694:	89400c17 	ldw	r5,48(r17)
    a698:	9c000015 	stw	r16,0(r19)
    a69c:	28000526 	beq	r5,zero,a6b4 <__sflush_r+0xd0>
    a6a0:	88801004 	addi	r2,r17,64
    a6a4:	28800226 	beq	r5,r2,a6b0 <__sflush_r+0xcc>
    a6a8:	9809883a 	mov	r4,r19
    a6ac:	000a9b00 	call	a9b0 <_free_r>
    a6b0:	88000c15 	stw	zero,48(r17)
    a6b4:	0005883a 	mov	r2,zero
    a6b8:	dfc00417 	ldw	ra,16(sp)
    a6bc:	dcc00317 	ldw	r19,12(sp)
    a6c0:	dc800217 	ldw	r18,8(sp)
    a6c4:	dc400117 	ldw	r17,4(sp)
    a6c8:	dc000017 	ldw	r16,0(sp)
    a6cc:	dec00504 	addi	sp,sp,20
    a6d0:	f800283a 	ret
    a6d4:	2c800417 	ldw	r18,16(r5)
    a6d8:	903ff626 	beq	r18,zero,a6b4 <__sflush_r+0xd0>
    a6dc:	2c000017 	ldw	r16,0(r5)
    a6e0:	108000cc 	andi	r2,r2,3
    a6e4:	2c800015 	stw	r18,0(r5)
    a6e8:	84a1c83a 	sub	r16,r16,r18
    a6ec:	1000131e 	bne	r2,zero,a73c <__sflush_r+0x158>
    a6f0:	28800517 	ldw	r2,20(r5)
    a6f4:	88800215 	stw	r2,8(r17)
    a6f8:	04000316 	blt	zero,r16,a708 <__sflush_r+0x124>
    a6fc:	003fed06 	br	a6b4 <__sflush_r+0xd0>
    a700:	90a5883a 	add	r18,r18,r2
    a704:	043feb0e 	bge	zero,r16,a6b4 <__sflush_r+0xd0>
    a708:	88800917 	ldw	r2,36(r17)
    a70c:	89400717 	ldw	r5,28(r17)
    a710:	800f883a 	mov	r7,r16
    a714:	900d883a 	mov	r6,r18
    a718:	9809883a 	mov	r4,r19
    a71c:	103ee83a 	callr	r2
    a720:	80a1c83a 	sub	r16,r16,r2
    a724:	00bff616 	blt	zero,r2,a700 <__sflush_r+0x11c>
    a728:	88c0030b 	ldhu	r3,12(r17)
    a72c:	00bfffc4 	movi	r2,-1
    a730:	18c01014 	ori	r3,r3,64
    a734:	88c0030d 	sth	r3,12(r17)
    a738:	003fdf06 	br	a6b8 <__sflush_r+0xd4>
    a73c:	0005883a 	mov	r2,zero
    a740:	003fec06 	br	a6f4 <__sflush_r+0x110>
    a744:	88801415 	stw	r2,80(r17)
    a748:	003fd206 	br	a694 <__sflush_r+0xb0>
    a74c:	28c00f17 	ldw	r3,60(r5)
    a750:	00ffb316 	blt	zero,r3,a620 <__sflush_r+0x3c>
    a754:	003fd706 	br	a6b4 <__sflush_r+0xd0>
    a758:	89400717 	ldw	r5,28(r17)
    a75c:	000d883a 	mov	r6,zero
    a760:	01c00044 	movi	r7,1
    a764:	9809883a 	mov	r4,r19
    a768:	403ee83a 	callr	r8
    a76c:	100d883a 	mov	r6,r2
    a770:	00bfffc4 	movi	r2,-1
    a774:	30801426 	beq	r6,r2,a7c8 <__sflush_r+0x1e4>
    a778:	8880030b 	ldhu	r2,12(r17)
    a77c:	8a000a17 	ldw	r8,40(r17)
    a780:	003fae06 	br	a63c <__sflush_r+0x58>
    a784:	98c00017 	ldw	r3,0(r19)
    a788:	183fba26 	beq	r3,zero,a674 <__sflush_r+0x90>
    a78c:	01000744 	movi	r4,29
    a790:	19000626 	beq	r3,r4,a7ac <__sflush_r+0x1c8>
    a794:	01000584 	movi	r4,22
    a798:	19000426 	beq	r3,r4,a7ac <__sflush_r+0x1c8>
    a79c:	88c0030b 	ldhu	r3,12(r17)
    a7a0:	18c01014 	ori	r3,r3,64
    a7a4:	88c0030d 	sth	r3,12(r17)
    a7a8:	003fc306 	br	a6b8 <__sflush_r+0xd4>
    a7ac:	8880030b 	ldhu	r2,12(r17)
    a7b0:	88c00417 	ldw	r3,16(r17)
    a7b4:	88000115 	stw	zero,4(r17)
    a7b8:	10bdffcc 	andi	r2,r2,63487
    a7bc:	8880030d 	sth	r2,12(r17)
    a7c0:	88c00015 	stw	r3,0(r17)
    a7c4:	003fb306 	br	a694 <__sflush_r+0xb0>
    a7c8:	98800017 	ldw	r2,0(r19)
    a7cc:	103fea26 	beq	r2,zero,a778 <__sflush_r+0x194>
    a7d0:	00c00744 	movi	r3,29
    a7d4:	10c00226 	beq	r2,r3,a7e0 <__sflush_r+0x1fc>
    a7d8:	00c00584 	movi	r3,22
    a7dc:	10c0031e 	bne	r2,r3,a7ec <__sflush_r+0x208>
    a7e0:	9c000015 	stw	r16,0(r19)
    a7e4:	0005883a 	mov	r2,zero
    a7e8:	003fb306 	br	a6b8 <__sflush_r+0xd4>
    a7ec:	88c0030b 	ldhu	r3,12(r17)
    a7f0:	3005883a 	mov	r2,r6
    a7f4:	18c01014 	ori	r3,r3,64
    a7f8:	88c0030d 	sth	r3,12(r17)
    a7fc:	003fae06 	br	a6b8 <__sflush_r+0xd4>

0000a800 <_fflush_r>:
    a800:	defffd04 	addi	sp,sp,-12
    a804:	dc000115 	stw	r16,4(sp)
    a808:	dfc00215 	stw	ra,8(sp)
    a80c:	2021883a 	mov	r16,r4
    a810:	20000226 	beq	r4,zero,a81c <_fflush_r+0x1c>
    a814:	20800e17 	ldw	r2,56(r4)
    a818:	10000c26 	beq	r2,zero,a84c <_fflush_r+0x4c>
    a81c:	2880030f 	ldh	r2,12(r5)
    a820:	1000051e 	bne	r2,zero,a838 <_fflush_r+0x38>
    a824:	0005883a 	mov	r2,zero
    a828:	dfc00217 	ldw	ra,8(sp)
    a82c:	dc000117 	ldw	r16,4(sp)
    a830:	dec00304 	addi	sp,sp,12
    a834:	f800283a 	ret
    a838:	8009883a 	mov	r4,r16
    a83c:	dfc00217 	ldw	ra,8(sp)
    a840:	dc000117 	ldw	r16,4(sp)
    a844:	dec00304 	addi	sp,sp,12
    a848:	000a5e41 	jmpi	a5e4 <__sflush_r>
    a84c:	d9400015 	stw	r5,0(sp)
    a850:	00088880 	call	8888 <__sinit>
    a854:	d9400017 	ldw	r5,0(sp)
    a858:	003ff006 	br	a81c <_fflush_r+0x1c>

0000a85c <fflush>:
    a85c:	20000526 	beq	r4,zero,a874 <fflush+0x18>
    a860:	00800074 	movhi	r2,1
    a864:	10b5a104 	addi	r2,r2,-10620
    a868:	200b883a 	mov	r5,r4
    a86c:	11000017 	ldw	r4,0(r2)
    a870:	000a8001 	jmpi	a800 <_fflush_r>
    a874:	00800074 	movhi	r2,1
    a878:	10b5a004 	addi	r2,r2,-10624
    a87c:	11000017 	ldw	r4,0(r2)
    a880:	01400074 	movhi	r5,1
    a884:	296a0004 	addi	r5,r5,-22528
    a888:	0008e641 	jmpi	8e64 <_fwalk_reent>

0000a88c <_malloc_trim_r>:
    a88c:	defffb04 	addi	sp,sp,-20
    a890:	dcc00315 	stw	r19,12(sp)
    a894:	04c00074 	movhi	r19,1
    a898:	dc800215 	stw	r18,8(sp)
    a89c:	dc400115 	stw	r17,4(sp)
    a8a0:	dc000015 	stw	r16,0(sp)
    a8a4:	dfc00415 	stw	ra,16(sp)
    a8a8:	2821883a 	mov	r16,r5
    a8ac:	9cf42804 	addi	r19,r19,-12128
    a8b0:	2025883a 	mov	r18,r4
    a8b4:	000b8e40 	call	b8e4 <__malloc_lock>
    a8b8:	98800217 	ldw	r2,8(r19)
    a8bc:	14400117 	ldw	r17,4(r2)
    a8c0:	00bfff04 	movi	r2,-4
    a8c4:	88a2703a 	and	r17,r17,r2
    a8c8:	8c21c83a 	sub	r16,r17,r16
    a8cc:	8403fbc4 	addi	r16,r16,4079
    a8d0:	8020d33a 	srli	r16,r16,12
    a8d4:	0083ffc4 	movi	r2,4095
    a8d8:	843fffc4 	addi	r16,r16,-1
    a8dc:	8020933a 	slli	r16,r16,12
    a8e0:	1400060e 	bge	r2,r16,a8fc <_malloc_trim_r+0x70>
    a8e4:	000b883a 	mov	r5,zero
    a8e8:	9009883a 	mov	r4,r18
    a8ec:	000a1480 	call	a148 <_sbrk_r>
    a8f0:	98c00217 	ldw	r3,8(r19)
    a8f4:	1c47883a 	add	r3,r3,r17
    a8f8:	10c00a26 	beq	r2,r3,a924 <_malloc_trim_r+0x98>
    a8fc:	9009883a 	mov	r4,r18
    a900:	000b9080 	call	b908 <__malloc_unlock>
    a904:	0005883a 	mov	r2,zero
    a908:	dfc00417 	ldw	ra,16(sp)
    a90c:	dcc00317 	ldw	r19,12(sp)
    a910:	dc800217 	ldw	r18,8(sp)
    a914:	dc400117 	ldw	r17,4(sp)
    a918:	dc000017 	ldw	r16,0(sp)
    a91c:	dec00504 	addi	sp,sp,20
    a920:	f800283a 	ret
    a924:	040bc83a 	sub	r5,zero,r16
    a928:	9009883a 	mov	r4,r18
    a92c:	000a1480 	call	a148 <_sbrk_r>
    a930:	00ffffc4 	movi	r3,-1
    a934:	10c00d26 	beq	r2,r3,a96c <_malloc_trim_r+0xe0>
    a938:	00c00074 	movhi	r3,1
    a93c:	18f84604 	addi	r3,r3,-7912
    a940:	18800017 	ldw	r2,0(r3)
    a944:	99000217 	ldw	r4,8(r19)
    a948:	8c23c83a 	sub	r17,r17,r16
    a94c:	8c400054 	ori	r17,r17,1
    a950:	1421c83a 	sub	r16,r2,r16
    a954:	24400115 	stw	r17,4(r4)
    a958:	9009883a 	mov	r4,r18
    a95c:	1c000015 	stw	r16,0(r3)
    a960:	000b9080 	call	b908 <__malloc_unlock>
    a964:	00800044 	movi	r2,1
    a968:	003fe706 	br	a908 <_malloc_trim_r+0x7c>
    a96c:	000b883a 	mov	r5,zero
    a970:	9009883a 	mov	r4,r18
    a974:	000a1480 	call	a148 <_sbrk_r>
    a978:	99000217 	ldw	r4,8(r19)
    a97c:	014003c4 	movi	r5,15
    a980:	1107c83a 	sub	r3,r2,r4
    a984:	28ffdd0e 	bge	r5,r3,a8fc <_malloc_trim_r+0x70>
    a988:	01400074 	movhi	r5,1
    a98c:	2975a204 	addi	r5,r5,-10616
    a990:	29400017 	ldw	r5,0(r5)
    a994:	18c00054 	ori	r3,r3,1
    a998:	20c00115 	stw	r3,4(r4)
    a99c:	00c00074 	movhi	r3,1
    a9a0:	1145c83a 	sub	r2,r2,r5
    a9a4:	18f84604 	addi	r3,r3,-7912
    a9a8:	18800015 	stw	r2,0(r3)
    a9ac:	003fd306 	br	a8fc <_malloc_trim_r+0x70>

0000a9b0 <_free_r>:
    a9b0:	28004126 	beq	r5,zero,aab8 <_free_r+0x108>
    a9b4:	defffd04 	addi	sp,sp,-12
    a9b8:	dc400115 	stw	r17,4(sp)
    a9bc:	dc000015 	stw	r16,0(sp)
    a9c0:	2023883a 	mov	r17,r4
    a9c4:	2821883a 	mov	r16,r5
    a9c8:	dfc00215 	stw	ra,8(sp)
    a9cc:	000b8e40 	call	b8e4 <__malloc_lock>
    a9d0:	81ffff17 	ldw	r7,-4(r16)
    a9d4:	00bfff84 	movi	r2,-2
    a9d8:	01000074 	movhi	r4,1
    a9dc:	81bffe04 	addi	r6,r16,-8
    a9e0:	3884703a 	and	r2,r7,r2
    a9e4:	21342804 	addi	r4,r4,-12128
    a9e8:	308b883a 	add	r5,r6,r2
    a9ec:	2a400117 	ldw	r9,4(r5)
    a9f0:	22000217 	ldw	r8,8(r4)
    a9f4:	00ffff04 	movi	r3,-4
    a9f8:	48c6703a 	and	r3,r9,r3
    a9fc:	2a005726 	beq	r5,r8,ab5c <_free_r+0x1ac>
    aa00:	28c00115 	stw	r3,4(r5)
    aa04:	39c0004c 	andi	r7,r7,1
    aa08:	3800091e 	bne	r7,zero,aa30 <_free_r+0x80>
    aa0c:	823ffe17 	ldw	r8,-8(r16)
    aa10:	22400204 	addi	r9,r4,8
    aa14:	320dc83a 	sub	r6,r6,r8
    aa18:	31c00217 	ldw	r7,8(r6)
    aa1c:	1205883a 	add	r2,r2,r8
    aa20:	3a406526 	beq	r7,r9,abb8 <_free_r+0x208>
    aa24:	32000317 	ldw	r8,12(r6)
    aa28:	3a000315 	stw	r8,12(r7)
    aa2c:	41c00215 	stw	r7,8(r8)
    aa30:	28cf883a 	add	r7,r5,r3
    aa34:	39c00117 	ldw	r7,4(r7)
    aa38:	39c0004c 	andi	r7,r7,1
    aa3c:	38003a26 	beq	r7,zero,ab28 <_free_r+0x178>
    aa40:	10c00054 	ori	r3,r2,1
    aa44:	30c00115 	stw	r3,4(r6)
    aa48:	3087883a 	add	r3,r6,r2
    aa4c:	18800015 	stw	r2,0(r3)
    aa50:	00c07fc4 	movi	r3,511
    aa54:	18801936 	bltu	r3,r2,aabc <_free_r+0x10c>
    aa58:	1004d0fa 	srli	r2,r2,3
    aa5c:	01c00044 	movi	r7,1
    aa60:	21400117 	ldw	r5,4(r4)
    aa64:	10c00044 	addi	r3,r2,1
    aa68:	18c7883a 	add	r3,r3,r3
    aa6c:	1005d0ba 	srai	r2,r2,2
    aa70:	18c7883a 	add	r3,r3,r3
    aa74:	18c7883a 	add	r3,r3,r3
    aa78:	1907883a 	add	r3,r3,r4
    aa7c:	3884983a 	sll	r2,r7,r2
    aa80:	19c00017 	ldw	r7,0(r3)
    aa84:	1a3ffe04 	addi	r8,r3,-8
    aa88:	1144b03a 	or	r2,r2,r5
    aa8c:	32000315 	stw	r8,12(r6)
    aa90:	31c00215 	stw	r7,8(r6)
    aa94:	20800115 	stw	r2,4(r4)
    aa98:	19800015 	stw	r6,0(r3)
    aa9c:	39800315 	stw	r6,12(r7)
    aaa0:	8809883a 	mov	r4,r17
    aaa4:	dfc00217 	ldw	ra,8(sp)
    aaa8:	dc400117 	ldw	r17,4(sp)
    aaac:	dc000017 	ldw	r16,0(sp)
    aab0:	dec00304 	addi	sp,sp,12
    aab4:	000b9081 	jmpi	b908 <__malloc_unlock>
    aab8:	f800283a 	ret
    aabc:	100ad27a 	srli	r5,r2,9
    aac0:	00c00104 	movi	r3,4
    aac4:	19404a36 	bltu	r3,r5,abf0 <_free_r+0x240>
    aac8:	100ad1ba 	srli	r5,r2,6
    aacc:	28c00e44 	addi	r3,r5,57
    aad0:	18c7883a 	add	r3,r3,r3
    aad4:	29400e04 	addi	r5,r5,56
    aad8:	18c7883a 	add	r3,r3,r3
    aadc:	18c7883a 	add	r3,r3,r3
    aae0:	1909883a 	add	r4,r3,r4
    aae4:	20c00017 	ldw	r3,0(r4)
    aae8:	01c00074 	movhi	r7,1
    aaec:	213ffe04 	addi	r4,r4,-8
    aaf0:	39f42804 	addi	r7,r7,-12128
    aaf4:	20c04426 	beq	r4,r3,ac08 <_free_r+0x258>
    aaf8:	01ffff04 	movi	r7,-4
    aafc:	19400117 	ldw	r5,4(r3)
    ab00:	29ca703a 	and	r5,r5,r7
    ab04:	1140022e 	bgeu	r2,r5,ab10 <_free_r+0x160>
    ab08:	18c00217 	ldw	r3,8(r3)
    ab0c:	20fffb1e 	bne	r4,r3,aafc <_free_r+0x14c>
    ab10:	19000317 	ldw	r4,12(r3)
    ab14:	31000315 	stw	r4,12(r6)
    ab18:	30c00215 	stw	r3,8(r6)
    ab1c:	21800215 	stw	r6,8(r4)
    ab20:	19800315 	stw	r6,12(r3)
    ab24:	003fde06 	br	aaa0 <_free_r+0xf0>
    ab28:	29c00217 	ldw	r7,8(r5)
    ab2c:	10c5883a 	add	r2,r2,r3
    ab30:	00c00074 	movhi	r3,1
    ab34:	18f42a04 	addi	r3,r3,-12120
    ab38:	38c03b26 	beq	r7,r3,ac28 <_free_r+0x278>
    ab3c:	2a000317 	ldw	r8,12(r5)
    ab40:	11400054 	ori	r5,r2,1
    ab44:	3087883a 	add	r3,r6,r2
    ab48:	3a000315 	stw	r8,12(r7)
    ab4c:	41c00215 	stw	r7,8(r8)
    ab50:	31400115 	stw	r5,4(r6)
    ab54:	18800015 	stw	r2,0(r3)
    ab58:	003fbd06 	br	aa50 <_free_r+0xa0>
    ab5c:	39c0004c 	andi	r7,r7,1
    ab60:	10c5883a 	add	r2,r2,r3
    ab64:	3800071e 	bne	r7,zero,ab84 <_free_r+0x1d4>
    ab68:	81fffe17 	ldw	r7,-8(r16)
    ab6c:	31cdc83a 	sub	r6,r6,r7
    ab70:	30c00317 	ldw	r3,12(r6)
    ab74:	31400217 	ldw	r5,8(r6)
    ab78:	11c5883a 	add	r2,r2,r7
    ab7c:	28c00315 	stw	r3,12(r5)
    ab80:	19400215 	stw	r5,8(r3)
    ab84:	10c00054 	ori	r3,r2,1
    ab88:	30c00115 	stw	r3,4(r6)
    ab8c:	00c00074 	movhi	r3,1
    ab90:	18f5a304 	addi	r3,r3,-10612
    ab94:	18c00017 	ldw	r3,0(r3)
    ab98:	21800215 	stw	r6,8(r4)
    ab9c:	10ffc036 	bltu	r2,r3,aaa0 <_free_r+0xf0>
    aba0:	00800074 	movhi	r2,1
    aba4:	10b83f04 	addi	r2,r2,-7940
    aba8:	11400017 	ldw	r5,0(r2)
    abac:	8809883a 	mov	r4,r17
    abb0:	000a88c0 	call	a88c <_malloc_trim_r>
    abb4:	003fba06 	br	aaa0 <_free_r+0xf0>
    abb8:	28c9883a 	add	r4,r5,r3
    abbc:	21000117 	ldw	r4,4(r4)
    abc0:	2100004c 	andi	r4,r4,1
    abc4:	2000391e 	bne	r4,zero,acac <_free_r+0x2fc>
    abc8:	29c00217 	ldw	r7,8(r5)
    abcc:	29000317 	ldw	r4,12(r5)
    abd0:	1885883a 	add	r2,r3,r2
    abd4:	10c00054 	ori	r3,r2,1
    abd8:	39000315 	stw	r4,12(r7)
    abdc:	21c00215 	stw	r7,8(r4)
    abe0:	30c00115 	stw	r3,4(r6)
    abe4:	308d883a 	add	r6,r6,r2
    abe8:	30800015 	stw	r2,0(r6)
    abec:	003fac06 	br	aaa0 <_free_r+0xf0>
    abf0:	00c00504 	movi	r3,20
    abf4:	19401536 	bltu	r3,r5,ac4c <_free_r+0x29c>
    abf8:	28c01704 	addi	r3,r5,92
    abfc:	18c7883a 	add	r3,r3,r3
    ac00:	294016c4 	addi	r5,r5,91
    ac04:	003fb406 	br	aad8 <_free_r+0x128>
    ac08:	280bd0ba 	srai	r5,r5,2
    ac0c:	00c00044 	movi	r3,1
    ac10:	38800117 	ldw	r2,4(r7)
    ac14:	194a983a 	sll	r5,r3,r5
    ac18:	2007883a 	mov	r3,r4
    ac1c:	2884b03a 	or	r2,r5,r2
    ac20:	38800115 	stw	r2,4(r7)
    ac24:	003fbb06 	br	ab14 <_free_r+0x164>
    ac28:	21800515 	stw	r6,20(r4)
    ac2c:	21800415 	stw	r6,16(r4)
    ac30:	10c00054 	ori	r3,r2,1
    ac34:	31c00315 	stw	r7,12(r6)
    ac38:	31c00215 	stw	r7,8(r6)
    ac3c:	30c00115 	stw	r3,4(r6)
    ac40:	308d883a 	add	r6,r6,r2
    ac44:	30800015 	stw	r2,0(r6)
    ac48:	003f9506 	br	aaa0 <_free_r+0xf0>
    ac4c:	00c01504 	movi	r3,84
    ac50:	19400536 	bltu	r3,r5,ac68 <_free_r+0x2b8>
    ac54:	100ad33a 	srli	r5,r2,12
    ac58:	28c01bc4 	addi	r3,r5,111
    ac5c:	18c7883a 	add	r3,r3,r3
    ac60:	29401b84 	addi	r5,r5,110
    ac64:	003f9c06 	br	aad8 <_free_r+0x128>
    ac68:	00c05504 	movi	r3,340
    ac6c:	19400536 	bltu	r3,r5,ac84 <_free_r+0x2d4>
    ac70:	100ad3fa 	srli	r5,r2,15
    ac74:	28c01e04 	addi	r3,r5,120
    ac78:	18c7883a 	add	r3,r3,r3
    ac7c:	29401dc4 	addi	r5,r5,119
    ac80:	003f9506 	br	aad8 <_free_r+0x128>
    ac84:	00c15504 	movi	r3,1364
    ac88:	19400536 	bltu	r3,r5,aca0 <_free_r+0x2f0>
    ac8c:	100ad4ba 	srli	r5,r2,18
    ac90:	28c01f44 	addi	r3,r5,125
    ac94:	18c7883a 	add	r3,r3,r3
    ac98:	29401f04 	addi	r5,r5,124
    ac9c:	003f8e06 	br	aad8 <_free_r+0x128>
    aca0:	00c03f84 	movi	r3,254
    aca4:	01401f84 	movi	r5,126
    aca8:	003f8b06 	br	aad8 <_free_r+0x128>
    acac:	10c00054 	ori	r3,r2,1
    acb0:	30c00115 	stw	r3,4(r6)
    acb4:	308d883a 	add	r6,r6,r2
    acb8:	30800015 	stw	r2,0(r6)
    acbc:	003f7806 	br	aaa0 <_free_r+0xf0>

0000acc0 <_lseek_r>:
    acc0:	defffd04 	addi	sp,sp,-12
    acc4:	2805883a 	mov	r2,r5
    acc8:	dc000015 	stw	r16,0(sp)
    accc:	04000074 	movhi	r16,1
    acd0:	dc400115 	stw	r17,4(sp)
    acd4:	300b883a 	mov	r5,r6
    acd8:	84384004 	addi	r16,r16,-7936
    acdc:	2023883a 	mov	r17,r4
    ace0:	380d883a 	mov	r6,r7
    ace4:	1009883a 	mov	r4,r2
    ace8:	dfc00215 	stw	ra,8(sp)
    acec:	80000015 	stw	zero,0(r16)
    acf0:	000b78c0 	call	b78c <lseek>
    acf4:	00ffffc4 	movi	r3,-1
    acf8:	10c00526 	beq	r2,r3,ad10 <_lseek_r+0x50>
    acfc:	dfc00217 	ldw	ra,8(sp)
    ad00:	dc400117 	ldw	r17,4(sp)
    ad04:	dc000017 	ldw	r16,0(sp)
    ad08:	dec00304 	addi	sp,sp,12
    ad0c:	f800283a 	ret
    ad10:	80c00017 	ldw	r3,0(r16)
    ad14:	183ff926 	beq	r3,zero,acfc <_lseek_r+0x3c>
    ad18:	88c00015 	stw	r3,0(r17)
    ad1c:	003ff706 	br	acfc <_lseek_r+0x3c>

0000ad20 <__smakebuf_r>:
    ad20:	2880030b 	ldhu	r2,12(r5)
    ad24:	10c0008c 	andi	r3,r2,2
    ad28:	1800411e 	bne	r3,zero,ae30 <__smakebuf_r+0x110>
    ad2c:	deffec04 	addi	sp,sp,-80
    ad30:	dc000f15 	stw	r16,60(sp)
    ad34:	2821883a 	mov	r16,r5
    ad38:	2940038f 	ldh	r5,14(r5)
    ad3c:	dc401015 	stw	r17,64(sp)
    ad40:	dfc01315 	stw	ra,76(sp)
    ad44:	dcc01215 	stw	r19,72(sp)
    ad48:	dc801115 	stw	r18,68(sp)
    ad4c:	2023883a 	mov	r17,r4
    ad50:	28001c16 	blt	r5,zero,adc4 <__smakebuf_r+0xa4>
    ad54:	d80d883a 	mov	r6,sp
    ad58:	000af3c0 	call	af3c <_fstat_r>
    ad5c:	10001816 	blt	r2,zero,adc0 <__smakebuf_r+0xa0>
    ad60:	d8800117 	ldw	r2,4(sp)
    ad64:	00e00014 	movui	r3,32768
    ad68:	10bc000c 	andi	r2,r2,61440
    ad6c:	14c80020 	cmpeqi	r19,r2,8192
    ad70:	10c03726 	beq	r2,r3,ae50 <__smakebuf_r+0x130>
    ad74:	80c0030b 	ldhu	r3,12(r16)
    ad78:	18c20014 	ori	r3,r3,2048
    ad7c:	80c0030d 	sth	r3,12(r16)
    ad80:	00c80004 	movi	r3,8192
    ad84:	10c0521e 	bne	r2,r3,aed0 <__smakebuf_r+0x1b0>
    ad88:	8140038f 	ldh	r5,14(r16)
    ad8c:	8809883a 	mov	r4,r17
    ad90:	000af980 	call	af98 <_isatty_r>
    ad94:	10004c26 	beq	r2,zero,aec8 <__smakebuf_r+0x1a8>
    ad98:	8080030b 	ldhu	r2,12(r16)
    ad9c:	80c010c4 	addi	r3,r16,67
    ada0:	80c00015 	stw	r3,0(r16)
    ada4:	10800054 	ori	r2,r2,1
    ada8:	8080030d 	sth	r2,12(r16)
    adac:	00800044 	movi	r2,1
    adb0:	80c00415 	stw	r3,16(r16)
    adb4:	80800515 	stw	r2,20(r16)
    adb8:	04810004 	movi	r18,1024
    adbc:	00000706 	br	addc <__smakebuf_r+0xbc>
    adc0:	8080030b 	ldhu	r2,12(r16)
    adc4:	10c0200c 	andi	r3,r2,128
    adc8:	18001f1e 	bne	r3,zero,ae48 <__smakebuf_r+0x128>
    adcc:	04810004 	movi	r18,1024
    add0:	10820014 	ori	r2,r2,2048
    add4:	8080030d 	sth	r2,12(r16)
    add8:	0027883a 	mov	r19,zero
    addc:	900b883a 	mov	r5,r18
    ade0:	8809883a 	mov	r4,r17
    ade4:	0008f280 	call	8f28 <_malloc_r>
    ade8:	10002c26 	beq	r2,zero,ae9c <__smakebuf_r+0x17c>
    adec:	80c0030b 	ldhu	r3,12(r16)
    adf0:	01000074 	movhi	r4,1
    adf4:	21214c04 	addi	r4,r4,-31440
    adf8:	89000f15 	stw	r4,60(r17)
    adfc:	18c02014 	ori	r3,r3,128
    ae00:	80c0030d 	sth	r3,12(r16)
    ae04:	80800015 	stw	r2,0(r16)
    ae08:	80800415 	stw	r2,16(r16)
    ae0c:	84800515 	stw	r18,20(r16)
    ae10:	98001a1e 	bne	r19,zero,ae7c <__smakebuf_r+0x15c>
    ae14:	dfc01317 	ldw	ra,76(sp)
    ae18:	dcc01217 	ldw	r19,72(sp)
    ae1c:	dc801117 	ldw	r18,68(sp)
    ae20:	dc401017 	ldw	r17,64(sp)
    ae24:	dc000f17 	ldw	r16,60(sp)
    ae28:	dec01404 	addi	sp,sp,80
    ae2c:	f800283a 	ret
    ae30:	288010c4 	addi	r2,r5,67
    ae34:	28800015 	stw	r2,0(r5)
    ae38:	28800415 	stw	r2,16(r5)
    ae3c:	00800044 	movi	r2,1
    ae40:	28800515 	stw	r2,20(r5)
    ae44:	f800283a 	ret
    ae48:	04801004 	movi	r18,64
    ae4c:	003fe006 	br	add0 <__smakebuf_r+0xb0>
    ae50:	81000a17 	ldw	r4,40(r16)
    ae54:	00c00074 	movhi	r3,1
    ae58:	18e89d04 	addi	r3,r3,-23948
    ae5c:	20ffc51e 	bne	r4,r3,ad74 <__smakebuf_r+0x54>
    ae60:	8080030b 	ldhu	r2,12(r16)
    ae64:	04810004 	movi	r18,1024
    ae68:	84801315 	stw	r18,76(r16)
    ae6c:	1484b03a 	or	r2,r2,r18
    ae70:	8080030d 	sth	r2,12(r16)
    ae74:	0027883a 	mov	r19,zero
    ae78:	003fd806 	br	addc <__smakebuf_r+0xbc>
    ae7c:	8140038f 	ldh	r5,14(r16)
    ae80:	8809883a 	mov	r4,r17
    ae84:	000af980 	call	af98 <_isatty_r>
    ae88:	103fe226 	beq	r2,zero,ae14 <__smakebuf_r+0xf4>
    ae8c:	8080030b 	ldhu	r2,12(r16)
    ae90:	10800054 	ori	r2,r2,1
    ae94:	8080030d 	sth	r2,12(r16)
    ae98:	003fde06 	br	ae14 <__smakebuf_r+0xf4>
    ae9c:	8080030b 	ldhu	r2,12(r16)
    aea0:	10c0800c 	andi	r3,r2,512
    aea4:	183fdb1e 	bne	r3,zero,ae14 <__smakebuf_r+0xf4>
    aea8:	10800094 	ori	r2,r2,2
    aeac:	80c010c4 	addi	r3,r16,67
    aeb0:	8080030d 	sth	r2,12(r16)
    aeb4:	00800044 	movi	r2,1
    aeb8:	80c00015 	stw	r3,0(r16)
    aebc:	80c00415 	stw	r3,16(r16)
    aec0:	80800515 	stw	r2,20(r16)
    aec4:	003fd306 	br	ae14 <__smakebuf_r+0xf4>
    aec8:	04810004 	movi	r18,1024
    aecc:	003fc306 	br	addc <__smakebuf_r+0xbc>
    aed0:	0027883a 	mov	r19,zero
    aed4:	04810004 	movi	r18,1024
    aed8:	003fc006 	br	addc <__smakebuf_r+0xbc>

0000aedc <_read_r>:
    aedc:	defffd04 	addi	sp,sp,-12
    aee0:	2805883a 	mov	r2,r5
    aee4:	dc000015 	stw	r16,0(sp)
    aee8:	04000074 	movhi	r16,1
    aeec:	dc400115 	stw	r17,4(sp)
    aef0:	300b883a 	mov	r5,r6
    aef4:	84384004 	addi	r16,r16,-7936
    aef8:	2023883a 	mov	r17,r4
    aefc:	380d883a 	mov	r6,r7
    af00:	1009883a 	mov	r4,r2
    af04:	dfc00215 	stw	ra,8(sp)
    af08:	80000015 	stw	zero,0(r16)
    af0c:	000b9680 	call	b968 <read>
    af10:	00ffffc4 	movi	r3,-1
    af14:	10c00526 	beq	r2,r3,af2c <_read_r+0x50>
    af18:	dfc00217 	ldw	ra,8(sp)
    af1c:	dc400117 	ldw	r17,4(sp)
    af20:	dc000017 	ldw	r16,0(sp)
    af24:	dec00304 	addi	sp,sp,12
    af28:	f800283a 	ret
    af2c:	80c00017 	ldw	r3,0(r16)
    af30:	183ff926 	beq	r3,zero,af18 <_read_r+0x3c>
    af34:	88c00015 	stw	r3,0(r17)
    af38:	003ff706 	br	af18 <_read_r+0x3c>

0000af3c <_fstat_r>:
    af3c:	defffd04 	addi	sp,sp,-12
    af40:	2805883a 	mov	r2,r5
    af44:	dc000015 	stw	r16,0(sp)
    af48:	04000074 	movhi	r16,1
    af4c:	dc400115 	stw	r17,4(sp)
    af50:	84384004 	addi	r16,r16,-7936
    af54:	2023883a 	mov	r17,r4
    af58:	300b883a 	mov	r5,r6
    af5c:	1009883a 	mov	r4,r2
    af60:	dfc00215 	stw	ra,8(sp)
    af64:	80000015 	stw	zero,0(r16)
    af68:	000b3440 	call	b344 <fstat>
    af6c:	00ffffc4 	movi	r3,-1
    af70:	10c00526 	beq	r2,r3,af88 <_fstat_r+0x4c>
    af74:	dfc00217 	ldw	ra,8(sp)
    af78:	dc400117 	ldw	r17,4(sp)
    af7c:	dc000017 	ldw	r16,0(sp)
    af80:	dec00304 	addi	sp,sp,12
    af84:	f800283a 	ret
    af88:	80c00017 	ldw	r3,0(r16)
    af8c:	183ff926 	beq	r3,zero,af74 <_fstat_r+0x38>
    af90:	88c00015 	stw	r3,0(r17)
    af94:	003ff706 	br	af74 <_fstat_r+0x38>

0000af98 <_isatty_r>:
    af98:	defffd04 	addi	sp,sp,-12
    af9c:	dc000015 	stw	r16,0(sp)
    afa0:	04000074 	movhi	r16,1
    afa4:	dc400115 	stw	r17,4(sp)
    afa8:	84384004 	addi	r16,r16,-7936
    afac:	2023883a 	mov	r17,r4
    afb0:	2809883a 	mov	r4,r5
    afb4:	dfc00215 	stw	ra,8(sp)
    afb8:	80000015 	stw	zero,0(r16)
    afbc:	000b5b80 	call	b5b8 <isatty>
    afc0:	00ffffc4 	movi	r3,-1
    afc4:	10c00526 	beq	r2,r3,afdc <_isatty_r+0x44>
    afc8:	dfc00217 	ldw	ra,8(sp)
    afcc:	dc400117 	ldw	r17,4(sp)
    afd0:	dc000017 	ldw	r16,0(sp)
    afd4:	dec00304 	addi	sp,sp,12
    afd8:	f800283a 	ret
    afdc:	80c00017 	ldw	r3,0(r16)
    afe0:	183ff926 	beq	r3,zero,afc8 <_isatty_r+0x30>
    afe4:	88c00015 	stw	r3,0(r17)
    afe8:	003ff706 	br	afc8 <_isatty_r+0x30>

0000afec <__divsi3>:
    afec:	20001b16 	blt	r4,zero,b05c <__divsi3+0x70>
    aff0:	000f883a 	mov	r7,zero
    aff4:	28001616 	blt	r5,zero,b050 <__divsi3+0x64>
    aff8:	200d883a 	mov	r6,r4
    affc:	29001a2e 	bgeu	r5,r4,b068 <__divsi3+0x7c>
    b000:	00800804 	movi	r2,32
    b004:	00c00044 	movi	r3,1
    b008:	00000106 	br	b010 <__divsi3+0x24>
    b00c:	10000d26 	beq	r2,zero,b044 <__divsi3+0x58>
    b010:	294b883a 	add	r5,r5,r5
    b014:	10bfffc4 	addi	r2,r2,-1
    b018:	18c7883a 	add	r3,r3,r3
    b01c:	293ffb36 	bltu	r5,r4,b00c <__divsi3+0x20>
    b020:	0005883a 	mov	r2,zero
    b024:	18000726 	beq	r3,zero,b044 <__divsi3+0x58>
    b028:	0005883a 	mov	r2,zero
    b02c:	31400236 	bltu	r6,r5,b038 <__divsi3+0x4c>
    b030:	314dc83a 	sub	r6,r6,r5
    b034:	10c4b03a 	or	r2,r2,r3
    b038:	1806d07a 	srli	r3,r3,1
    b03c:	280ad07a 	srli	r5,r5,1
    b040:	183ffa1e 	bne	r3,zero,b02c <__divsi3+0x40>
    b044:	38000126 	beq	r7,zero,b04c <__divsi3+0x60>
    b048:	0085c83a 	sub	r2,zero,r2
    b04c:	f800283a 	ret
    b050:	014bc83a 	sub	r5,zero,r5
    b054:	39c0005c 	xori	r7,r7,1
    b058:	003fe706 	br	aff8 <__divsi3+0xc>
    b05c:	0109c83a 	sub	r4,zero,r4
    b060:	01c00044 	movi	r7,1
    b064:	003fe306 	br	aff4 <__divsi3+0x8>
    b068:	00c00044 	movi	r3,1
    b06c:	003fee06 	br	b028 <__divsi3+0x3c>

0000b070 <__modsi3>:
    b070:	20001716 	blt	r4,zero,b0d0 <__modsi3+0x60>
    b074:	000f883a 	mov	r7,zero
    b078:	2005883a 	mov	r2,r4
    b07c:	28001216 	blt	r5,zero,b0c8 <__modsi3+0x58>
    b080:	2900162e 	bgeu	r5,r4,b0dc <__modsi3+0x6c>
    b084:	01800804 	movi	r6,32
    b088:	00c00044 	movi	r3,1
    b08c:	00000106 	br	b094 <__modsi3+0x24>
    b090:	30000a26 	beq	r6,zero,b0bc <__modsi3+0x4c>
    b094:	294b883a 	add	r5,r5,r5
    b098:	31bfffc4 	addi	r6,r6,-1
    b09c:	18c7883a 	add	r3,r3,r3
    b0a0:	293ffb36 	bltu	r5,r4,b090 <__modsi3+0x20>
    b0a4:	18000526 	beq	r3,zero,b0bc <__modsi3+0x4c>
    b0a8:	1806d07a 	srli	r3,r3,1
    b0ac:	11400136 	bltu	r2,r5,b0b4 <__modsi3+0x44>
    b0b0:	1145c83a 	sub	r2,r2,r5
    b0b4:	280ad07a 	srli	r5,r5,1
    b0b8:	183ffb1e 	bne	r3,zero,b0a8 <__modsi3+0x38>
    b0bc:	38000126 	beq	r7,zero,b0c4 <__modsi3+0x54>
    b0c0:	0085c83a 	sub	r2,zero,r2
    b0c4:	f800283a 	ret
    b0c8:	014bc83a 	sub	r5,zero,r5
    b0cc:	003fec06 	br	b080 <__modsi3+0x10>
    b0d0:	0109c83a 	sub	r4,zero,r4
    b0d4:	01c00044 	movi	r7,1
    b0d8:	003fe706 	br	b078 <__modsi3+0x8>
    b0dc:	00c00044 	movi	r3,1
    b0e0:	003ff106 	br	b0a8 <__modsi3+0x38>

0000b0e4 <__udivsi3>:
    b0e4:	200d883a 	mov	r6,r4
    b0e8:	2900152e 	bgeu	r5,r4,b140 <__udivsi3+0x5c>
    b0ec:	28001416 	blt	r5,zero,b140 <__udivsi3+0x5c>
    b0f0:	00800804 	movi	r2,32
    b0f4:	00c00044 	movi	r3,1
    b0f8:	00000206 	br	b104 <__udivsi3+0x20>
    b0fc:	10000e26 	beq	r2,zero,b138 <__udivsi3+0x54>
    b100:	28000516 	blt	r5,zero,b118 <__udivsi3+0x34>
    b104:	294b883a 	add	r5,r5,r5
    b108:	10bfffc4 	addi	r2,r2,-1
    b10c:	18c7883a 	add	r3,r3,r3
    b110:	293ffa36 	bltu	r5,r4,b0fc <__udivsi3+0x18>
    b114:	18000826 	beq	r3,zero,b138 <__udivsi3+0x54>
    b118:	0005883a 	mov	r2,zero
    b11c:	31400236 	bltu	r6,r5,b128 <__udivsi3+0x44>
    b120:	314dc83a 	sub	r6,r6,r5
    b124:	10c4b03a 	or	r2,r2,r3
    b128:	1806d07a 	srli	r3,r3,1
    b12c:	280ad07a 	srli	r5,r5,1
    b130:	183ffa1e 	bne	r3,zero,b11c <__udivsi3+0x38>
    b134:	f800283a 	ret
    b138:	0005883a 	mov	r2,zero
    b13c:	f800283a 	ret
    b140:	00c00044 	movi	r3,1
    b144:	003ff406 	br	b118 <__udivsi3+0x34>

0000b148 <__umodsi3>:
    b148:	2005883a 	mov	r2,r4
    b14c:	2900122e 	bgeu	r5,r4,b198 <__umodsi3+0x50>
    b150:	28001116 	blt	r5,zero,b198 <__umodsi3+0x50>
    b154:	01800804 	movi	r6,32
    b158:	00c00044 	movi	r3,1
    b15c:	00000206 	br	b168 <__umodsi3+0x20>
    b160:	30000c26 	beq	r6,zero,b194 <__umodsi3+0x4c>
    b164:	28000516 	blt	r5,zero,b17c <__umodsi3+0x34>
    b168:	294b883a 	add	r5,r5,r5
    b16c:	31bfffc4 	addi	r6,r6,-1
    b170:	18c7883a 	add	r3,r3,r3
    b174:	293ffa36 	bltu	r5,r4,b160 <__umodsi3+0x18>
    b178:	18000626 	beq	r3,zero,b194 <__umodsi3+0x4c>
    b17c:	1806d07a 	srli	r3,r3,1
    b180:	11400136 	bltu	r2,r5,b188 <__umodsi3+0x40>
    b184:	1145c83a 	sub	r2,r2,r5
    b188:	280ad07a 	srli	r5,r5,1
    b18c:	183ffb1e 	bne	r3,zero,b17c <__umodsi3+0x34>
    b190:	f800283a 	ret
    b194:	f800283a 	ret
    b198:	00c00044 	movi	r3,1
    b19c:	003ff706 	br	b17c <__umodsi3+0x34>

0000b1a0 <__mulsi3>:
    b1a0:	0005883a 	mov	r2,zero
    b1a4:	20000726 	beq	r4,zero,b1c4 <__mulsi3+0x24>
    b1a8:	20c0004c 	andi	r3,r4,1
    b1ac:	2008d07a 	srli	r4,r4,1
    b1b0:	18000126 	beq	r3,zero,b1b8 <__mulsi3+0x18>
    b1b4:	1145883a 	add	r2,r2,r5
    b1b8:	294b883a 	add	r5,r5,r5
    b1bc:	203ffa1e 	bne	r4,zero,b1a8 <__mulsi3+0x8>
    b1c0:	f800283a 	ret
    b1c4:	f800283a 	ret

0000b1c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b1c8:	defffe04 	addi	sp,sp,-8
    b1cc:	dfc00115 	stw	ra,4(sp)
    b1d0:	df000015 	stw	fp,0(sp)
    b1d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b1d8:	d0a00a17 	ldw	r2,-32728(gp)
    b1dc:	10000326 	beq	r2,zero,b1ec <alt_get_errno+0x24>
    b1e0:	d0a00a17 	ldw	r2,-32728(gp)
    b1e4:	103ee83a 	callr	r2
    b1e8:	00000106 	br	b1f0 <alt_get_errno+0x28>
    b1ec:	d0a2a104 	addi	r2,gp,-30076
}
    b1f0:	e037883a 	mov	sp,fp
    b1f4:	dfc00117 	ldw	ra,4(sp)
    b1f8:	df000017 	ldw	fp,0(sp)
    b1fc:	dec00204 	addi	sp,sp,8
    b200:	f800283a 	ret

0000b204 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b204:	defffb04 	addi	sp,sp,-20
    b208:	dfc00415 	stw	ra,16(sp)
    b20c:	df000315 	stw	fp,12(sp)
    b210:	df000304 	addi	fp,sp,12
    b214:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b218:	e0bfff17 	ldw	r2,-4(fp)
    b21c:	10000816 	blt	r2,zero,b240 <close+0x3c>
    b220:	01400304 	movi	r5,12
    b224:	e13fff17 	ldw	r4,-4(fp)
    b228:	000b1a00 	call	b1a0 <__mulsi3>
    b22c:	1007883a 	mov	r3,r2
    b230:	00800074 	movhi	r2,1
    b234:	10b53404 	addi	r2,r2,-11056
    b238:	1885883a 	add	r2,r3,r2
    b23c:	00000106 	br	b244 <close+0x40>
    b240:	0005883a 	mov	r2,zero
    b244:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b248:	e0bffd17 	ldw	r2,-12(fp)
    b24c:	10001926 	beq	r2,zero,b2b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b250:	e0bffd17 	ldw	r2,-12(fp)
    b254:	10800017 	ldw	r2,0(r2)
    b258:	10800417 	ldw	r2,16(r2)
    b25c:	10000626 	beq	r2,zero,b278 <close+0x74>
    b260:	e0bffd17 	ldw	r2,-12(fp)
    b264:	10800017 	ldw	r2,0(r2)
    b268:	10800417 	ldw	r2,16(r2)
    b26c:	e13ffd17 	ldw	r4,-12(fp)
    b270:	103ee83a 	callr	r2
    b274:	00000106 	br	b27c <close+0x78>
    b278:	0005883a 	mov	r2,zero
    b27c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b280:	e13fff17 	ldw	r4,-4(fp)
    b284:	000ba6c0 	call	ba6c <alt_release_fd>
    if (rval < 0)
    b288:	e0bffe17 	ldw	r2,-8(fp)
    b28c:	1000070e 	bge	r2,zero,b2ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
    b290:	000b1c80 	call	b1c8 <alt_get_errno>
    b294:	1007883a 	mov	r3,r2
    b298:	e0bffe17 	ldw	r2,-8(fp)
    b29c:	0085c83a 	sub	r2,zero,r2
    b2a0:	18800015 	stw	r2,0(r3)
      return -1;
    b2a4:	00bfffc4 	movi	r2,-1
    b2a8:	00000706 	br	b2c8 <close+0xc4>
    }
    return 0;
    b2ac:	0005883a 	mov	r2,zero
    b2b0:	00000506 	br	b2c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b2b4:	000b1c80 	call	b1c8 <alt_get_errno>
    b2b8:	1007883a 	mov	r3,r2
    b2bc:	00801444 	movi	r2,81
    b2c0:	18800015 	stw	r2,0(r3)
    return -1;
    b2c4:	00bfffc4 	movi	r2,-1
  }
}
    b2c8:	e037883a 	mov	sp,fp
    b2cc:	dfc00117 	ldw	ra,4(sp)
    b2d0:	df000017 	ldw	fp,0(sp)
    b2d4:	dec00204 	addi	sp,sp,8
    b2d8:	f800283a 	ret

0000b2dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b2dc:	defffc04 	addi	sp,sp,-16
    b2e0:	df000315 	stw	fp,12(sp)
    b2e4:	df000304 	addi	fp,sp,12
    b2e8:	e13ffd15 	stw	r4,-12(fp)
    b2ec:	e17ffe15 	stw	r5,-8(fp)
    b2f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b2f4:	e0bfff17 	ldw	r2,-4(fp)
}
    b2f8:	e037883a 	mov	sp,fp
    b2fc:	df000017 	ldw	fp,0(sp)
    b300:	dec00104 	addi	sp,sp,4
    b304:	f800283a 	ret

0000b308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b308:	defffe04 	addi	sp,sp,-8
    b30c:	dfc00115 	stw	ra,4(sp)
    b310:	df000015 	stw	fp,0(sp)
    b314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b318:	d0a00a17 	ldw	r2,-32728(gp)
    b31c:	10000326 	beq	r2,zero,b32c <alt_get_errno+0x24>
    b320:	d0a00a17 	ldw	r2,-32728(gp)
    b324:	103ee83a 	callr	r2
    b328:	00000106 	br	b330 <alt_get_errno+0x28>
    b32c:	d0a2a104 	addi	r2,gp,-30076
}
    b330:	e037883a 	mov	sp,fp
    b334:	dfc00117 	ldw	ra,4(sp)
    b338:	df000017 	ldw	fp,0(sp)
    b33c:	dec00204 	addi	sp,sp,8
    b340:	f800283a 	ret

0000b344 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b344:	defffb04 	addi	sp,sp,-20
    b348:	dfc00415 	stw	ra,16(sp)
    b34c:	df000315 	stw	fp,12(sp)
    b350:	df000304 	addi	fp,sp,12
    b354:	e13ffe15 	stw	r4,-8(fp)
    b358:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b35c:	e0bffe17 	ldw	r2,-8(fp)
    b360:	10000816 	blt	r2,zero,b384 <fstat+0x40>
    b364:	01400304 	movi	r5,12
    b368:	e13ffe17 	ldw	r4,-8(fp)
    b36c:	000b1a00 	call	b1a0 <__mulsi3>
    b370:	1007883a 	mov	r3,r2
    b374:	00800074 	movhi	r2,1
    b378:	10b53404 	addi	r2,r2,-11056
    b37c:	1885883a 	add	r2,r3,r2
    b380:	00000106 	br	b388 <fstat+0x44>
    b384:	0005883a 	mov	r2,zero
    b388:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    b38c:	e0bffd17 	ldw	r2,-12(fp)
    b390:	10001026 	beq	r2,zero,b3d4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b394:	e0bffd17 	ldw	r2,-12(fp)
    b398:	10800017 	ldw	r2,0(r2)
    b39c:	10800817 	ldw	r2,32(r2)
    b3a0:	10000726 	beq	r2,zero,b3c0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    b3a4:	e0bffd17 	ldw	r2,-12(fp)
    b3a8:	10800017 	ldw	r2,0(r2)
    b3ac:	10800817 	ldw	r2,32(r2)
    b3b0:	e17fff17 	ldw	r5,-4(fp)
    b3b4:	e13ffd17 	ldw	r4,-12(fp)
    b3b8:	103ee83a 	callr	r2
    b3bc:	00000a06 	br	b3e8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b3c0:	e0bfff17 	ldw	r2,-4(fp)
    b3c4:	00c80004 	movi	r3,8192
    b3c8:	10c00115 	stw	r3,4(r2)
      return 0;
    b3cc:	0005883a 	mov	r2,zero
    b3d0:	00000506 	br	b3e8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b3d4:	000b3080 	call	b308 <alt_get_errno>
    b3d8:	1007883a 	mov	r3,r2
    b3dc:	00801444 	movi	r2,81
    b3e0:	18800015 	stw	r2,0(r3)
    return -1;
    b3e4:	00bfffc4 	movi	r2,-1
  }
}
    b3e8:	e037883a 	mov	sp,fp
    b3ec:	dfc00117 	ldw	ra,4(sp)
    b3f0:	df000017 	ldw	fp,0(sp)
    b3f4:	dec00204 	addi	sp,sp,8
    b3f8:	f800283a 	ret

0000b3fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b3fc:	defff004 	addi	sp,sp,-64
    b400:	df000f15 	stw	fp,60(sp)
    b404:	df000f04 	addi	fp,sp,60
    b408:	e13ffd15 	stw	r4,-12(fp)
    b40c:	e17ffe15 	stw	r5,-8(fp)
    b410:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    b414:	00bffa84 	movi	r2,-22
    b418:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b41c:	e0bffd17 	ldw	r2,-12(fp)
    b420:	10800828 	cmpgeui	r2,r2,32
    b424:	1000501e 	bne	r2,zero,b568 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b428:	0005303a 	rdctl	r2,status
    b42c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b430:	e0fff617 	ldw	r3,-40(fp)
    b434:	00bfff84 	movi	r2,-2
    b438:	1884703a 	and	r2,r3,r2
    b43c:	1001703a 	wrctl	status,r2
  
  return context;
    b440:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b444:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    b448:	00800074 	movhi	r2,1
    b44c:	10b85004 	addi	r2,r2,-7872
    b450:	e0fffd17 	ldw	r3,-12(fp)
    b454:	180690fa 	slli	r3,r3,3
    b458:	10c5883a 	add	r2,r2,r3
    b45c:	e0ffff17 	ldw	r3,-4(fp)
    b460:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    b464:	00800074 	movhi	r2,1
    b468:	10b85004 	addi	r2,r2,-7872
    b46c:	e0fffd17 	ldw	r3,-12(fp)
    b470:	180690fa 	slli	r3,r3,3
    b474:	10c5883a 	add	r2,r2,r3
    b478:	10800104 	addi	r2,r2,4
    b47c:	e0fffe17 	ldw	r3,-8(fp)
    b480:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b484:	e0bfff17 	ldw	r2,-4(fp)
    b488:	10001926 	beq	r2,zero,b4f0 <alt_irq_register+0xf4>
    b48c:	e0bffd17 	ldw	r2,-12(fp)
    b490:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b494:	0005303a 	rdctl	r2,status
    b498:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b49c:	e0fff717 	ldw	r3,-36(fp)
    b4a0:	00bfff84 	movi	r2,-2
    b4a4:	1884703a 	and	r2,r3,r2
    b4a8:	1001703a 	wrctl	status,r2
  
  return context;
    b4ac:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b4b0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    b4b4:	00c00044 	movi	r3,1
    b4b8:	e0bff217 	ldw	r2,-56(fp)
    b4bc:	1884983a 	sll	r2,r3,r2
    b4c0:	1007883a 	mov	r3,r2
    b4c4:	d0a2a217 	ldw	r2,-30072(gp)
    b4c8:	1884b03a 	or	r2,r3,r2
    b4cc:	d0a2a215 	stw	r2,-30072(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b4d0:	d0a2a217 	ldw	r2,-30072(gp)
    b4d4:	100170fa 	wrctl	ienable,r2
    b4d8:	e0bff817 	ldw	r2,-32(fp)
    b4dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4e0:	e0bff917 	ldw	r2,-28(fp)
    b4e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b4e8:	0005883a 	mov	r2,zero
    b4ec:	00001906 	br	b554 <alt_irq_register+0x158>
    b4f0:	e0bffd17 	ldw	r2,-12(fp)
    b4f4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4f8:	0005303a 	rdctl	r2,status
    b4fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b500:	e0fffa17 	ldw	r3,-24(fp)
    b504:	00bfff84 	movi	r2,-2
    b508:	1884703a 	and	r2,r3,r2
    b50c:	1001703a 	wrctl	status,r2
  
  return context;
    b510:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b514:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    b518:	00c00044 	movi	r3,1
    b51c:	e0bff417 	ldw	r2,-48(fp)
    b520:	1884983a 	sll	r2,r3,r2
    b524:	0084303a 	nor	r2,zero,r2
    b528:	1007883a 	mov	r3,r2
    b52c:	d0a2a217 	ldw	r2,-30072(gp)
    b530:	1884703a 	and	r2,r3,r2
    b534:	d0a2a215 	stw	r2,-30072(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b538:	d0a2a217 	ldw	r2,-30072(gp)
    b53c:	100170fa 	wrctl	ienable,r2
    b540:	e0bffb17 	ldw	r2,-20(fp)
    b544:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b548:	e0bffc17 	ldw	r2,-16(fp)
    b54c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b550:	0005883a 	mov	r2,zero
    b554:	e0bff115 	stw	r2,-60(fp)
    b558:	e0bff317 	ldw	r2,-52(fp)
    b55c:	e0bff515 	stw	r2,-44(fp)
    b560:	e0bff517 	ldw	r2,-44(fp)
    b564:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b568:	e0bff117 	ldw	r2,-60(fp)
}
    b56c:	e037883a 	mov	sp,fp
    b570:	df000017 	ldw	fp,0(sp)
    b574:	dec00104 	addi	sp,sp,4
    b578:	f800283a 	ret

0000b57c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b57c:	defffe04 	addi	sp,sp,-8
    b580:	dfc00115 	stw	ra,4(sp)
    b584:	df000015 	stw	fp,0(sp)
    b588:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b58c:	d0a00a17 	ldw	r2,-32728(gp)
    b590:	10000326 	beq	r2,zero,b5a0 <alt_get_errno+0x24>
    b594:	d0a00a17 	ldw	r2,-32728(gp)
    b598:	103ee83a 	callr	r2
    b59c:	00000106 	br	b5a4 <alt_get_errno+0x28>
    b5a0:	d0a2a104 	addi	r2,gp,-30076
}
    b5a4:	e037883a 	mov	sp,fp
    b5a8:	dfc00117 	ldw	ra,4(sp)
    b5ac:	df000017 	ldw	fp,0(sp)
    b5b0:	dec00204 	addi	sp,sp,8
    b5b4:	f800283a 	ret

0000b5b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b5b8:	deffed04 	addi	sp,sp,-76
    b5bc:	dfc01215 	stw	ra,72(sp)
    b5c0:	df001115 	stw	fp,68(sp)
    b5c4:	df001104 	addi	fp,sp,68
    b5c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b5cc:	e0bfff17 	ldw	r2,-4(fp)
    b5d0:	10000816 	blt	r2,zero,b5f4 <isatty+0x3c>
    b5d4:	01400304 	movi	r5,12
    b5d8:	e13fff17 	ldw	r4,-4(fp)
    b5dc:	000b1a00 	call	b1a0 <__mulsi3>
    b5e0:	1007883a 	mov	r3,r2
    b5e4:	00800074 	movhi	r2,1
    b5e8:	10b53404 	addi	r2,r2,-11056
    b5ec:	1885883a 	add	r2,r3,r2
    b5f0:	00000106 	br	b5f8 <isatty+0x40>
    b5f4:	0005883a 	mov	r2,zero
    b5f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b5fc:	e0bfef17 	ldw	r2,-68(fp)
    b600:	10000e26 	beq	r2,zero,b63c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b604:	e0bfef17 	ldw	r2,-68(fp)
    b608:	10800017 	ldw	r2,0(r2)
    b60c:	10800817 	ldw	r2,32(r2)
    b610:	1000021e 	bne	r2,zero,b61c <isatty+0x64>
    {
      return 1;
    b614:	00800044 	movi	r2,1
    b618:	00000d06 	br	b650 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b61c:	e0bff004 	addi	r2,fp,-64
    b620:	100b883a 	mov	r5,r2
    b624:	e13fff17 	ldw	r4,-4(fp)
    b628:	000b3440 	call	b344 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b62c:	e0bff117 	ldw	r2,-60(fp)
    b630:	10880020 	cmpeqi	r2,r2,8192
    b634:	10803fcc 	andi	r2,r2,255
    b638:	00000506 	br	b650 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b63c:	000b57c0 	call	b57c <alt_get_errno>
    b640:	1007883a 	mov	r3,r2
    b644:	00801444 	movi	r2,81
    b648:	18800015 	stw	r2,0(r3)
    return 0;
    b64c:	0005883a 	mov	r2,zero
  }
}
    b650:	e037883a 	mov	sp,fp
    b654:	dfc00117 	ldw	ra,4(sp)
    b658:	df000017 	ldw	fp,0(sp)
    b65c:	dec00204 	addi	sp,sp,8
    b660:	f800283a 	ret

0000b664 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b664:	defffc04 	addi	sp,sp,-16
    b668:	df000315 	stw	fp,12(sp)
    b66c:	df000304 	addi	fp,sp,12
    b670:	e13ffd15 	stw	r4,-12(fp)
    b674:	e17ffe15 	stw	r5,-8(fp)
    b678:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b67c:	e0fffe17 	ldw	r3,-8(fp)
    b680:	e0bffd17 	ldw	r2,-12(fp)
    b684:	18800c26 	beq	r3,r2,b6b8 <alt_load_section+0x54>
  {
    while( to != end )
    b688:	00000806 	br	b6ac <alt_load_section+0x48>
    {
      *to++ = *from++;
    b68c:	e0bffe17 	ldw	r2,-8(fp)
    b690:	10c00104 	addi	r3,r2,4
    b694:	e0fffe15 	stw	r3,-8(fp)
    b698:	e0fffd17 	ldw	r3,-12(fp)
    b69c:	19000104 	addi	r4,r3,4
    b6a0:	e13ffd15 	stw	r4,-12(fp)
    b6a4:	18c00017 	ldw	r3,0(r3)
    b6a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b6ac:	e0fffe17 	ldw	r3,-8(fp)
    b6b0:	e0bfff17 	ldw	r2,-4(fp)
    b6b4:	18bff51e 	bne	r3,r2,b68c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b6b8:	0001883a 	nop
    b6bc:	e037883a 	mov	sp,fp
    b6c0:	df000017 	ldw	fp,0(sp)
    b6c4:	dec00104 	addi	sp,sp,4
    b6c8:	f800283a 	ret

0000b6cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b6cc:	defffe04 	addi	sp,sp,-8
    b6d0:	dfc00115 	stw	ra,4(sp)
    b6d4:	df000015 	stw	fp,0(sp)
    b6d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b6dc:	01800074 	movhi	r6,1
    b6e0:	31b5ac04 	addi	r6,r6,-10576
    b6e4:	01400074 	movhi	r5,1
    b6e8:	29731f04 	addi	r5,r5,-13188
    b6ec:	01000074 	movhi	r4,1
    b6f0:	2135ac04 	addi	r4,r4,-10576
    b6f4:	000b6640 	call	b664 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b6f8:	01800074 	movhi	r6,1
    b6fc:	31a08c04 	addi	r6,r6,-32208
    b700:	01400074 	movhi	r5,1
    b704:	29600804 	addi	r5,r5,-32736
    b708:	01000074 	movhi	r4,1
    b70c:	21200804 	addi	r4,r4,-32736
    b710:	000b6640 	call	b664 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b714:	01800074 	movhi	r6,1
    b718:	31b31f04 	addi	r6,r6,-13188
    b71c:	01400074 	movhi	r5,1
    b720:	29730c04 	addi	r5,r5,-13264
    b724:	01000074 	movhi	r4,1
    b728:	21330c04 	addi	r4,r4,-13264
    b72c:	000b6640 	call	b664 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b730:	000bfbc0 	call	bfbc <alt_dcache_flush_all>
  alt_icache_flush_all();
    b734:	000c17c0 	call	c17c <alt_icache_flush_all>
}
    b738:	0001883a 	nop
    b73c:	e037883a 	mov	sp,fp
    b740:	dfc00117 	ldw	ra,4(sp)
    b744:	df000017 	ldw	fp,0(sp)
    b748:	dec00204 	addi	sp,sp,8
    b74c:	f800283a 	ret

0000b750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b750:	defffe04 	addi	sp,sp,-8
    b754:	dfc00115 	stw	ra,4(sp)
    b758:	df000015 	stw	fp,0(sp)
    b75c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b760:	d0a00a17 	ldw	r2,-32728(gp)
    b764:	10000326 	beq	r2,zero,b774 <alt_get_errno+0x24>
    b768:	d0a00a17 	ldw	r2,-32728(gp)
    b76c:	103ee83a 	callr	r2
    b770:	00000106 	br	b778 <alt_get_errno+0x28>
    b774:	d0a2a104 	addi	r2,gp,-30076
}
    b778:	e037883a 	mov	sp,fp
    b77c:	dfc00117 	ldw	ra,4(sp)
    b780:	df000017 	ldw	fp,0(sp)
    b784:	dec00204 	addi	sp,sp,8
    b788:	f800283a 	ret

0000b78c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b78c:	defff904 	addi	sp,sp,-28
    b790:	dfc00615 	stw	ra,24(sp)
    b794:	df000515 	stw	fp,20(sp)
    b798:	df000504 	addi	fp,sp,20
    b79c:	e13ffd15 	stw	r4,-12(fp)
    b7a0:	e17ffe15 	stw	r5,-8(fp)
    b7a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b7a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7ac:	e0bffd17 	ldw	r2,-12(fp)
    b7b0:	10000816 	blt	r2,zero,b7d4 <lseek+0x48>
    b7b4:	01400304 	movi	r5,12
    b7b8:	e13ffd17 	ldw	r4,-12(fp)
    b7bc:	000b1a00 	call	b1a0 <__mulsi3>
    b7c0:	1007883a 	mov	r3,r2
    b7c4:	00800074 	movhi	r2,1
    b7c8:	10b53404 	addi	r2,r2,-11056
    b7cc:	1885883a 	add	r2,r3,r2
    b7d0:	00000106 	br	b7d8 <lseek+0x4c>
    b7d4:	0005883a 	mov	r2,zero
    b7d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b7dc:	e0bffc17 	ldw	r2,-16(fp)
    b7e0:	10001026 	beq	r2,zero,b824 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b7e4:	e0bffc17 	ldw	r2,-16(fp)
    b7e8:	10800017 	ldw	r2,0(r2)
    b7ec:	10800717 	ldw	r2,28(r2)
    b7f0:	10000926 	beq	r2,zero,b818 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b7f4:	e0bffc17 	ldw	r2,-16(fp)
    b7f8:	10800017 	ldw	r2,0(r2)
    b7fc:	10800717 	ldw	r2,28(r2)
    b800:	e1bfff17 	ldw	r6,-4(fp)
    b804:	e17ffe17 	ldw	r5,-8(fp)
    b808:	e13ffc17 	ldw	r4,-16(fp)
    b80c:	103ee83a 	callr	r2
    b810:	e0bffb15 	stw	r2,-20(fp)
    b814:	00000506 	br	b82c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b818:	00bfde84 	movi	r2,-134
    b81c:	e0bffb15 	stw	r2,-20(fp)
    b820:	00000206 	br	b82c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b824:	00bfebc4 	movi	r2,-81
    b828:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b82c:	e0bffb17 	ldw	r2,-20(fp)
    b830:	1000070e 	bge	r2,zero,b850 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    b834:	000b7500 	call	b750 <alt_get_errno>
    b838:	1007883a 	mov	r3,r2
    b83c:	e0bffb17 	ldw	r2,-20(fp)
    b840:	0085c83a 	sub	r2,zero,r2
    b844:	18800015 	stw	r2,0(r3)
    rc = -1;
    b848:	00bfffc4 	movi	r2,-1
    b84c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b850:	e0bffb17 	ldw	r2,-20(fp)
}
    b854:	e037883a 	mov	sp,fp
    b858:	dfc00117 	ldw	ra,4(sp)
    b85c:	df000017 	ldw	fp,0(sp)
    b860:	dec00204 	addi	sp,sp,8
    b864:	f800283a 	ret

0000b868 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b868:	defffd04 	addi	sp,sp,-12
    b86c:	dfc00215 	stw	ra,8(sp)
    b870:	df000115 	stw	fp,4(sp)
    b874:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b878:	0009883a 	mov	r4,zero
    b87c:	000bd100 	call	bd10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b880:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b884:	000bd480 	call	bd48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b888:	01800074 	movhi	r6,1
    b88c:	31b31504 	addi	r6,r6,-13228
    b890:	01400074 	movhi	r5,1
    b894:	29731504 	addi	r5,r5,-13228
    b898:	01000074 	movhi	r4,1
    b89c:	21331504 	addi	r4,r4,-13228
    b8a0:	000c2800 	call	c280 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b8a4:	000c0bc0 	call	c0bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b8a8:	01000074 	movhi	r4,1
    b8ac:	21304704 	addi	r4,r4,-16100
    b8b0:	000c89c0 	call	c89c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b8b4:	d0a2a317 	ldw	r2,-30068(gp)
    b8b8:	d0e2a417 	ldw	r3,-30064(gp)
    b8bc:	d122a517 	ldw	r4,-30060(gp)
    b8c0:	200d883a 	mov	r6,r4
    b8c4:	180b883a 	mov	r5,r3
    b8c8:	1009883a 	mov	r4,r2
    b8cc:	000826c0 	call	826c <main>
    b8d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b8d4:	01000044 	movi	r4,1
    b8d8:	000b2040 	call	b204 <close>
  exit (result);
    b8dc:	e13fff17 	ldw	r4,-4(fp)
    b8e0:	000c8b00 	call	c8b0 <exit>

0000b8e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b8e4:	defffe04 	addi	sp,sp,-8
    b8e8:	df000115 	stw	fp,4(sp)
    b8ec:	df000104 	addi	fp,sp,4
    b8f0:	e13fff15 	stw	r4,-4(fp)
}
    b8f4:	0001883a 	nop
    b8f8:	e037883a 	mov	sp,fp
    b8fc:	df000017 	ldw	fp,0(sp)
    b900:	dec00104 	addi	sp,sp,4
    b904:	f800283a 	ret

0000b908 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b908:	defffe04 	addi	sp,sp,-8
    b90c:	df000115 	stw	fp,4(sp)
    b910:	df000104 	addi	fp,sp,4
    b914:	e13fff15 	stw	r4,-4(fp)
}
    b918:	0001883a 	nop
    b91c:	e037883a 	mov	sp,fp
    b920:	df000017 	ldw	fp,0(sp)
    b924:	dec00104 	addi	sp,sp,4
    b928:	f800283a 	ret

0000b92c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b92c:	defffe04 	addi	sp,sp,-8
    b930:	dfc00115 	stw	ra,4(sp)
    b934:	df000015 	stw	fp,0(sp)
    b938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b93c:	d0a00a17 	ldw	r2,-32728(gp)
    b940:	10000326 	beq	r2,zero,b950 <alt_get_errno+0x24>
    b944:	d0a00a17 	ldw	r2,-32728(gp)
    b948:	103ee83a 	callr	r2
    b94c:	00000106 	br	b954 <alt_get_errno+0x28>
    b950:	d0a2a104 	addi	r2,gp,-30076
}
    b954:	e037883a 	mov	sp,fp
    b958:	dfc00117 	ldw	ra,4(sp)
    b95c:	df000017 	ldw	fp,0(sp)
    b960:	dec00204 	addi	sp,sp,8
    b964:	f800283a 	ret

0000b968 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b968:	defff904 	addi	sp,sp,-28
    b96c:	dfc00615 	stw	ra,24(sp)
    b970:	df000515 	stw	fp,20(sp)
    b974:	df000504 	addi	fp,sp,20
    b978:	e13ffd15 	stw	r4,-12(fp)
    b97c:	e17ffe15 	stw	r5,-8(fp)
    b980:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b984:	e0bffd17 	ldw	r2,-12(fp)
    b988:	10000816 	blt	r2,zero,b9ac <read+0x44>
    b98c:	01400304 	movi	r5,12
    b990:	e13ffd17 	ldw	r4,-12(fp)
    b994:	000b1a00 	call	b1a0 <__mulsi3>
    b998:	1007883a 	mov	r3,r2
    b99c:	00800074 	movhi	r2,1
    b9a0:	10b53404 	addi	r2,r2,-11056
    b9a4:	1885883a 	add	r2,r3,r2
    b9a8:	00000106 	br	b9b0 <read+0x48>
    b9ac:	0005883a 	mov	r2,zero
    b9b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b9b4:	e0bffb17 	ldw	r2,-20(fp)
    b9b8:	10002226 	beq	r2,zero,ba44 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b9bc:	e0bffb17 	ldw	r2,-20(fp)
    b9c0:	10800217 	ldw	r2,8(r2)
    b9c4:	108000cc 	andi	r2,r2,3
    b9c8:	10800060 	cmpeqi	r2,r2,1
    b9cc:	1000181e 	bne	r2,zero,ba30 <read+0xc8>
        (fd->dev->read))
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	10800017 	ldw	r2,0(r2)
    b9d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b9dc:	10001426 	beq	r2,zero,ba30 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b9e0:	e0bffb17 	ldw	r2,-20(fp)
    b9e4:	10800017 	ldw	r2,0(r2)
    b9e8:	10800517 	ldw	r2,20(r2)
    b9ec:	e0ffff17 	ldw	r3,-4(fp)
    b9f0:	180d883a 	mov	r6,r3
    b9f4:	e17ffe17 	ldw	r5,-8(fp)
    b9f8:	e13ffb17 	ldw	r4,-20(fp)
    b9fc:	103ee83a 	callr	r2
    ba00:	e0bffc15 	stw	r2,-16(fp)
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	1000070e 	bge	r2,zero,ba28 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    ba0c:	000b92c0 	call	b92c <alt_get_errno>
    ba10:	1007883a 	mov	r3,r2
    ba14:	e0bffc17 	ldw	r2,-16(fp)
    ba18:	0085c83a 	sub	r2,zero,r2
    ba1c:	18800015 	stw	r2,0(r3)
          return -1;
    ba20:	00bfffc4 	movi	r2,-1
    ba24:	00000c06 	br	ba58 <read+0xf0>
        }
        return rval;
    ba28:	e0bffc17 	ldw	r2,-16(fp)
    ba2c:	00000a06 	br	ba58 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ba30:	000b92c0 	call	b92c <alt_get_errno>
    ba34:	1007883a 	mov	r3,r2
    ba38:	00800344 	movi	r2,13
    ba3c:	18800015 	stw	r2,0(r3)
    ba40:	00000406 	br	ba54 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ba44:	000b92c0 	call	b92c <alt_get_errno>
    ba48:	1007883a 	mov	r3,r2
    ba4c:	00801444 	movi	r2,81
    ba50:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ba54:	00bfffc4 	movi	r2,-1
}
    ba58:	e037883a 	mov	sp,fp
    ba5c:	dfc00117 	ldw	ra,4(sp)
    ba60:	df000017 	ldw	fp,0(sp)
    ba64:	dec00204 	addi	sp,sp,8
    ba68:	f800283a 	ret

0000ba6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ba6c:	defffc04 	addi	sp,sp,-16
    ba70:	dfc00315 	stw	ra,12(sp)
    ba74:	df000215 	stw	fp,8(sp)
    ba78:	dc000115 	stw	r16,4(sp)
    ba7c:	df000204 	addi	fp,sp,8
    ba80:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    ba84:	e0bffe17 	ldw	r2,-8(fp)
    ba88:	108000d0 	cmplti	r2,r2,3
    ba8c:	1000111e 	bne	r2,zero,bad4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    ba90:	04000074 	movhi	r16,1
    ba94:	84353404 	addi	r16,r16,-11056
    ba98:	e0bffe17 	ldw	r2,-8(fp)
    ba9c:	01400304 	movi	r5,12
    baa0:	1009883a 	mov	r4,r2
    baa4:	000b1a00 	call	b1a0 <__mulsi3>
    baa8:	8085883a 	add	r2,r16,r2
    baac:	10800204 	addi	r2,r2,8
    bab0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    bab4:	04000074 	movhi	r16,1
    bab8:	84353404 	addi	r16,r16,-11056
    babc:	e0bffe17 	ldw	r2,-8(fp)
    bac0:	01400304 	movi	r5,12
    bac4:	1009883a 	mov	r4,r2
    bac8:	000b1a00 	call	b1a0 <__mulsi3>
    bacc:	8085883a 	add	r2,r16,r2
    bad0:	10000015 	stw	zero,0(r2)
  }
}
    bad4:	0001883a 	nop
    bad8:	e6ffff04 	addi	sp,fp,-4
    badc:	dfc00217 	ldw	ra,8(sp)
    bae0:	df000117 	ldw	fp,4(sp)
    bae4:	dc000017 	ldw	r16,0(sp)
    bae8:	dec00304 	addi	sp,sp,12
    baec:	f800283a 	ret

0000baf0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    baf0:	defff904 	addi	sp,sp,-28
    baf4:	df000615 	stw	fp,24(sp)
    baf8:	df000604 	addi	fp,sp,24
    bafc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb00:	0005303a 	rdctl	r2,status
    bb04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb08:	e0fffe17 	ldw	r3,-8(fp)
    bb0c:	00bfff84 	movi	r2,-2
    bb10:	1884703a 	and	r2,r3,r2
    bb14:	1001703a 	wrctl	status,r2
  
  return context;
    bb18:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    bb1c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    bb20:	d0a00c17 	ldw	r2,-32720(gp)
    bb24:	10c000c4 	addi	r3,r2,3
    bb28:	00bfff04 	movi	r2,-4
    bb2c:	1884703a 	and	r2,r3,r2
    bb30:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    bb34:	d0e00c17 	ldw	r3,-32720(gp)
    bb38:	e0bfff17 	ldw	r2,-4(fp)
    bb3c:	1887883a 	add	r3,r3,r2
    bb40:	00800074 	movhi	r2,1
    bb44:	10800004 	addi	r2,r2,0
    bb48:	10c0062e 	bgeu	r2,r3,bb64 <sbrk+0x74>
    bb4c:	e0bffb17 	ldw	r2,-20(fp)
    bb50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb54:	e0bffa17 	ldw	r2,-24(fp)
    bb58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    bb5c:	00bfffc4 	movi	r2,-1
    bb60:	00000b06 	br	bb90 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    bb64:	d0a00c17 	ldw	r2,-32720(gp)
    bb68:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    bb6c:	d0e00c17 	ldw	r3,-32720(gp)
    bb70:	e0bfff17 	ldw	r2,-4(fp)
    bb74:	1885883a 	add	r2,r3,r2
    bb78:	d0a00c15 	stw	r2,-32720(gp)
    bb7c:	e0bffb17 	ldw	r2,-20(fp)
    bb80:	e0bffc15 	stw	r2,-16(fp)
    bb84:	e0bffc17 	ldw	r2,-16(fp)
    bb88:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    bb8c:	e0bffd17 	ldw	r2,-12(fp)
} 
    bb90:	e037883a 	mov	sp,fp
    bb94:	df000017 	ldw	fp,0(sp)
    bb98:	dec00104 	addi	sp,sp,4
    bb9c:	f800283a 	ret

0000bba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bba0:	defffe04 	addi	sp,sp,-8
    bba4:	dfc00115 	stw	ra,4(sp)
    bba8:	df000015 	stw	fp,0(sp)
    bbac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bbb0:	d0a00a17 	ldw	r2,-32728(gp)
    bbb4:	10000326 	beq	r2,zero,bbc4 <alt_get_errno+0x24>
    bbb8:	d0a00a17 	ldw	r2,-32728(gp)
    bbbc:	103ee83a 	callr	r2
    bbc0:	00000106 	br	bbc8 <alt_get_errno+0x28>
    bbc4:	d0a2a104 	addi	r2,gp,-30076
}
    bbc8:	e037883a 	mov	sp,fp
    bbcc:	dfc00117 	ldw	ra,4(sp)
    bbd0:	df000017 	ldw	fp,0(sp)
    bbd4:	dec00204 	addi	sp,sp,8
    bbd8:	f800283a 	ret

0000bbdc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bbdc:	defff904 	addi	sp,sp,-28
    bbe0:	dfc00615 	stw	ra,24(sp)
    bbe4:	df000515 	stw	fp,20(sp)
    bbe8:	df000504 	addi	fp,sp,20
    bbec:	e13ffd15 	stw	r4,-12(fp)
    bbf0:	e17ffe15 	stw	r5,-8(fp)
    bbf4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bbf8:	e0bffd17 	ldw	r2,-12(fp)
    bbfc:	10000816 	blt	r2,zero,bc20 <write+0x44>
    bc00:	01400304 	movi	r5,12
    bc04:	e13ffd17 	ldw	r4,-12(fp)
    bc08:	000b1a00 	call	b1a0 <__mulsi3>
    bc0c:	1007883a 	mov	r3,r2
    bc10:	00800074 	movhi	r2,1
    bc14:	10b53404 	addi	r2,r2,-11056
    bc18:	1885883a 	add	r2,r3,r2
    bc1c:	00000106 	br	bc24 <write+0x48>
    bc20:	0005883a 	mov	r2,zero
    bc24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    bc28:	e0bffb17 	ldw	r2,-20(fp)
    bc2c:	10002126 	beq	r2,zero,bcb4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bc30:	e0bffb17 	ldw	r2,-20(fp)
    bc34:	10800217 	ldw	r2,8(r2)
    bc38:	108000cc 	andi	r2,r2,3
    bc3c:	10001826 	beq	r2,zero,bca0 <write+0xc4>
    bc40:	e0bffb17 	ldw	r2,-20(fp)
    bc44:	10800017 	ldw	r2,0(r2)
    bc48:	10800617 	ldw	r2,24(r2)
    bc4c:	10001426 	beq	r2,zero,bca0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bc50:	e0bffb17 	ldw	r2,-20(fp)
    bc54:	10800017 	ldw	r2,0(r2)
    bc58:	10800617 	ldw	r2,24(r2)
    bc5c:	e0ffff17 	ldw	r3,-4(fp)
    bc60:	180d883a 	mov	r6,r3
    bc64:	e17ffe17 	ldw	r5,-8(fp)
    bc68:	e13ffb17 	ldw	r4,-20(fp)
    bc6c:	103ee83a 	callr	r2
    bc70:	e0bffc15 	stw	r2,-16(fp)
    bc74:	e0bffc17 	ldw	r2,-16(fp)
    bc78:	1000070e 	bge	r2,zero,bc98 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    bc7c:	000bba00 	call	bba0 <alt_get_errno>
    bc80:	1007883a 	mov	r3,r2
    bc84:	e0bffc17 	ldw	r2,-16(fp)
    bc88:	0085c83a 	sub	r2,zero,r2
    bc8c:	18800015 	stw	r2,0(r3)
        return -1;
    bc90:	00bfffc4 	movi	r2,-1
    bc94:	00000c06 	br	bcc8 <write+0xec>
      }
      return rval;
    bc98:	e0bffc17 	ldw	r2,-16(fp)
    bc9c:	00000a06 	br	bcc8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    bca0:	000bba00 	call	bba0 <alt_get_errno>
    bca4:	1007883a 	mov	r3,r2
    bca8:	00800344 	movi	r2,13
    bcac:	18800015 	stw	r2,0(r3)
    bcb0:	00000406 	br	bcc4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    bcb4:	000bba00 	call	bba0 <alt_get_errno>
    bcb8:	1007883a 	mov	r3,r2
    bcbc:	00801444 	movi	r2,81
    bcc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bcc4:	00bfffc4 	movi	r2,-1
}
    bcc8:	e037883a 	mov	sp,fp
    bccc:	dfc00117 	ldw	ra,4(sp)
    bcd0:	df000017 	ldw	fp,0(sp)
    bcd4:	dec00204 	addi	sp,sp,8
    bcd8:	f800283a 	ret

0000bcdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bcdc:	defffd04 	addi	sp,sp,-12
    bce0:	dfc00215 	stw	ra,8(sp)
    bce4:	df000115 	stw	fp,4(sp)
    bce8:	df000104 	addi	fp,sp,4
    bcec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bcf0:	d1600704 	addi	r5,gp,-32740
    bcf4:	e13fff17 	ldw	r4,-4(fp)
    bcf8:	000c0180 	call	c018 <alt_dev_llist_insert>
}
    bcfc:	e037883a 	mov	sp,fp
    bd00:	dfc00117 	ldw	ra,4(sp)
    bd04:	df000017 	ldw	fp,0(sp)
    bd08:	dec00204 	addi	sp,sp,8
    bd0c:	f800283a 	ret

0000bd10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    bd10:	defffd04 	addi	sp,sp,-12
    bd14:	dfc00215 	stw	ra,8(sp)
    bd18:	df000115 	stw	fp,4(sp)
    bd1c:	df000104 	addi	fp,sp,4
    bd20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    bd24:	000c5800 	call	c580 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bd28:	00800044 	movi	r2,1
    bd2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    bd30:	0001883a 	nop
    bd34:	e037883a 	mov	sp,fp
    bd38:	dfc00117 	ldw	ra,4(sp)
    bd3c:	df000017 	ldw	fp,0(sp)
    bd40:	dec00204 	addi	sp,sp,8
    bd44:	f800283a 	ret

0000bd48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bd48:	defffe04 	addi	sp,sp,-8
    bd4c:	dfc00115 	stw	ra,4(sp)
    bd50:	df000015 	stw	fp,0(sp)
    bd54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    bd58:	01000074 	movhi	r4,1
    bd5c:	21359404 	addi	r4,r4,-10672
    bd60:	000bcdc0 	call	bcdc <alt_dev_reg>
}
    bd64:	0001883a 	nop
    bd68:	e037883a 	mov	sp,fp
    bd6c:	dfc00117 	ldw	ra,4(sp)
    bd70:	df000017 	ldw	fp,0(sp)
    bd74:	dec00204 	addi	sp,sp,8
    bd78:	f800283a 	ret

0000bd7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bd7c:	defffa04 	addi	sp,sp,-24
    bd80:	dfc00515 	stw	ra,20(sp)
    bd84:	df000415 	stw	fp,16(sp)
    bd88:	df000404 	addi	fp,sp,16
    bd8c:	e13ffd15 	stw	r4,-12(fp)
    bd90:	e17ffe15 	stw	r5,-8(fp)
    bd94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bd98:	e0bffd17 	ldw	r2,-12(fp)
    bd9c:	10800017 	ldw	r2,0(r2)
    bda0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bda4:	e0bffc17 	ldw	r2,-16(fp)
    bda8:	10c00a04 	addi	r3,r2,40
    bdac:	e0bffd17 	ldw	r2,-12(fp)
    bdb0:	10800217 	ldw	r2,8(r2)
    bdb4:	100f883a 	mov	r7,r2
    bdb8:	e1bfff17 	ldw	r6,-4(fp)
    bdbc:	e17ffe17 	ldw	r5,-8(fp)
    bdc0:	1809883a 	mov	r4,r3
    bdc4:	000be3c0 	call	be3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bdc8:	e037883a 	mov	sp,fp
    bdcc:	dfc00117 	ldw	ra,4(sp)
    bdd0:	df000017 	ldw	fp,0(sp)
    bdd4:	dec00204 	addi	sp,sp,8
    bdd8:	f800283a 	ret

0000bddc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bddc:	defffa04 	addi	sp,sp,-24
    bde0:	dfc00515 	stw	ra,20(sp)
    bde4:	df000415 	stw	fp,16(sp)
    bde8:	df000404 	addi	fp,sp,16
    bdec:	e13ffd15 	stw	r4,-12(fp)
    bdf0:	e17ffe15 	stw	r5,-8(fp)
    bdf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bdf8:	e0bffd17 	ldw	r2,-12(fp)
    bdfc:	10800017 	ldw	r2,0(r2)
    be00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    be04:	e0bffc17 	ldw	r2,-16(fp)
    be08:	10c00a04 	addi	r3,r2,40
    be0c:	e0bffd17 	ldw	r2,-12(fp)
    be10:	10800217 	ldw	r2,8(r2)
    be14:	100f883a 	mov	r7,r2
    be18:	e1bfff17 	ldw	r6,-4(fp)
    be1c:	e17ffe17 	ldw	r5,-8(fp)
    be20:	1809883a 	mov	r4,r3
    be24:	000bf280 	call	bf28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    be28:	e037883a 	mov	sp,fp
    be2c:	dfc00117 	ldw	ra,4(sp)
    be30:	df000017 	ldw	fp,0(sp)
    be34:	dec00204 	addi	sp,sp,8
    be38:	f800283a 	ret

0000be3c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    be3c:	defff704 	addi	sp,sp,-36
    be40:	df000815 	stw	fp,32(sp)
    be44:	df000804 	addi	fp,sp,32
    be48:	e13ffc15 	stw	r4,-16(fp)
    be4c:	e17ffd15 	stw	r5,-12(fp)
    be50:	e1bffe15 	stw	r6,-8(fp)
    be54:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    be58:	e0bffc17 	ldw	r2,-16(fp)
    be5c:	10800017 	ldw	r2,0(r2)
    be60:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    be64:	e0bffd17 	ldw	r2,-12(fp)
    be68:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    be6c:	e0bffe17 	ldw	r2,-8(fp)
    be70:	e0fffd17 	ldw	r3,-12(fp)
    be74:	1885883a 	add	r2,r3,r2
    be78:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    be7c:	00001206 	br	bec8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    be80:	e0bff917 	ldw	r2,-28(fp)
    be84:	10800037 	ldwio	r2,0(r2)
    be88:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    be8c:	e0bffb17 	ldw	r2,-20(fp)
    be90:	10a0000c 	andi	r2,r2,32768
    be94:	10000626 	beq	r2,zero,beb0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    be98:	e0bff817 	ldw	r2,-32(fp)
    be9c:	10c00044 	addi	r3,r2,1
    bea0:	e0fff815 	stw	r3,-32(fp)
    bea4:	e0fffb17 	ldw	r3,-20(fp)
    bea8:	10c00005 	stb	r3,0(r2)
    beac:	00000606 	br	bec8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    beb0:	e0fff817 	ldw	r3,-32(fp)
    beb4:	e0bffd17 	ldw	r2,-12(fp)
    beb8:	1880071e 	bne	r3,r2,bed8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    bebc:	e0bfff17 	ldw	r2,-4(fp)
    bec0:	1090000c 	andi	r2,r2,16384
    bec4:	1000061e 	bne	r2,zero,bee0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bec8:	e0fff817 	ldw	r3,-32(fp)
    becc:	e0bffa17 	ldw	r2,-24(fp)
    bed0:	18bfeb36 	bltu	r3,r2,be80 <altera_avalon_jtag_uart_read+0x44>
    bed4:	00000306 	br	bee4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bed8:	0001883a 	nop
    bedc:	00000106 	br	bee4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    bee0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bee4:	e0fff817 	ldw	r3,-32(fp)
    bee8:	e0bffd17 	ldw	r2,-12(fp)
    beec:	18800426 	beq	r3,r2,bf00 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    bef0:	e0fff817 	ldw	r3,-32(fp)
    bef4:	e0bffd17 	ldw	r2,-12(fp)
    bef8:	1885c83a 	sub	r2,r3,r2
    befc:	00000606 	br	bf18 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    bf00:	e0bfff17 	ldw	r2,-4(fp)
    bf04:	1090000c 	andi	r2,r2,16384
    bf08:	10000226 	beq	r2,zero,bf14 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    bf0c:	00bffd44 	movi	r2,-11
    bf10:	00000106 	br	bf18 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    bf14:	00bffec4 	movi	r2,-5
}
    bf18:	e037883a 	mov	sp,fp
    bf1c:	df000017 	ldw	fp,0(sp)
    bf20:	dec00104 	addi	sp,sp,4
    bf24:	f800283a 	ret

0000bf28 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bf28:	defff904 	addi	sp,sp,-28
    bf2c:	df000615 	stw	fp,24(sp)
    bf30:	df000604 	addi	fp,sp,24
    bf34:	e13ffc15 	stw	r4,-16(fp)
    bf38:	e17ffd15 	stw	r5,-12(fp)
    bf3c:	e1bffe15 	stw	r6,-8(fp)
    bf40:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bf44:	e0bffc17 	ldw	r2,-16(fp)
    bf48:	10800017 	ldw	r2,0(r2)
    bf4c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bf50:	e0bffe17 	ldw	r2,-8(fp)
    bf54:	e0fffd17 	ldw	r3,-12(fp)
    bf58:	1885883a 	add	r2,r3,r2
    bf5c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bf60:	00000e06 	br	bf9c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bf64:	e0bffa17 	ldw	r2,-24(fp)
    bf68:	10800104 	addi	r2,r2,4
    bf6c:	10800037 	ldwio	r2,0(r2)
    bf70:	10bfffec 	andhi	r2,r2,65535
    bf74:	10000926 	beq	r2,zero,bf9c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bf78:	e0fffa17 	ldw	r3,-24(fp)
    bf7c:	e0bffd17 	ldw	r2,-12(fp)
    bf80:	11000044 	addi	r4,r2,1
    bf84:	e13ffd15 	stw	r4,-12(fp)
    bf88:	10800003 	ldbu	r2,0(r2)
    bf8c:	10803fcc 	andi	r2,r2,255
    bf90:	1080201c 	xori	r2,r2,128
    bf94:	10bfe004 	addi	r2,r2,-128
    bf98:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bf9c:	e0fffd17 	ldw	r3,-12(fp)
    bfa0:	e0bffb17 	ldw	r2,-20(fp)
    bfa4:	18bfef36 	bltu	r3,r2,bf64 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bfa8:	e0bffe17 	ldw	r2,-8(fp)
}
    bfac:	e037883a 	mov	sp,fp
    bfb0:	df000017 	ldw	fp,0(sp)
    bfb4:	dec00104 	addi	sp,sp,4
    bfb8:	f800283a 	ret

0000bfbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bfbc:	deffff04 	addi	sp,sp,-4
    bfc0:	df000015 	stw	fp,0(sp)
    bfc4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bfc8:	0001883a 	nop
    bfcc:	e037883a 	mov	sp,fp
    bfd0:	df000017 	ldw	fp,0(sp)
    bfd4:	dec00104 	addi	sp,sp,4
    bfd8:	f800283a 	ret

0000bfdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bfdc:	defffe04 	addi	sp,sp,-8
    bfe0:	dfc00115 	stw	ra,4(sp)
    bfe4:	df000015 	stw	fp,0(sp)
    bfe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bfec:	d0a00a17 	ldw	r2,-32728(gp)
    bff0:	10000326 	beq	r2,zero,c000 <alt_get_errno+0x24>
    bff4:	d0a00a17 	ldw	r2,-32728(gp)
    bff8:	103ee83a 	callr	r2
    bffc:	00000106 	br	c004 <alt_get_errno+0x28>
    c000:	d0a2a104 	addi	r2,gp,-30076
}
    c004:	e037883a 	mov	sp,fp
    c008:	dfc00117 	ldw	ra,4(sp)
    c00c:	df000017 	ldw	fp,0(sp)
    c010:	dec00204 	addi	sp,sp,8
    c014:	f800283a 	ret

0000c018 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c018:	defffa04 	addi	sp,sp,-24
    c01c:	dfc00515 	stw	ra,20(sp)
    c020:	df000415 	stw	fp,16(sp)
    c024:	df000404 	addi	fp,sp,16
    c028:	e13ffe15 	stw	r4,-8(fp)
    c02c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c030:	e0bffe17 	ldw	r2,-8(fp)
    c034:	10000326 	beq	r2,zero,c044 <alt_dev_llist_insert+0x2c>
    c038:	e0bffe17 	ldw	r2,-8(fp)
    c03c:	10800217 	ldw	r2,8(r2)
    c040:	1000061e 	bne	r2,zero,c05c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    c044:	000bfdc0 	call	bfdc <alt_get_errno>
    c048:	1007883a 	mov	r3,r2
    c04c:	00800584 	movi	r2,22
    c050:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c054:	00bffa84 	movi	r2,-22
    c058:	00001306 	br	c0a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c05c:	e0bffe17 	ldw	r2,-8(fp)
    c060:	e0ffff17 	ldw	r3,-4(fp)
    c064:	e0fffc15 	stw	r3,-16(fp)
    c068:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c06c:	e0bffd17 	ldw	r2,-12(fp)
    c070:	e0fffc17 	ldw	r3,-16(fp)
    c074:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c078:	e0bffc17 	ldw	r2,-16(fp)
    c07c:	10c00017 	ldw	r3,0(r2)
    c080:	e0bffd17 	ldw	r2,-12(fp)
    c084:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c088:	e0bffc17 	ldw	r2,-16(fp)
    c08c:	10800017 	ldw	r2,0(r2)
    c090:	e0fffd17 	ldw	r3,-12(fp)
    c094:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c098:	e0bffc17 	ldw	r2,-16(fp)
    c09c:	e0fffd17 	ldw	r3,-12(fp)
    c0a0:	10c00015 	stw	r3,0(r2)

  return 0;  
    c0a4:	0005883a 	mov	r2,zero
}
    c0a8:	e037883a 	mov	sp,fp
    c0ac:	dfc00117 	ldw	ra,4(sp)
    c0b0:	df000017 	ldw	fp,0(sp)
    c0b4:	dec00204 	addi	sp,sp,8
    c0b8:	f800283a 	ret

0000c0bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c0bc:	defffd04 	addi	sp,sp,-12
    c0c0:	dfc00215 	stw	ra,8(sp)
    c0c4:	df000115 	stw	fp,4(sp)
    c0c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c0cc:	00800074 	movhi	r2,1
    c0d0:	10b30b04 	addi	r2,r2,-13268
    c0d4:	e0bfff15 	stw	r2,-4(fp)
    c0d8:	00000606 	br	c0f4 <_do_ctors+0x38>
        (*ctor) (); 
    c0dc:	e0bfff17 	ldw	r2,-4(fp)
    c0e0:	10800017 	ldw	r2,0(r2)
    c0e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c0e8:	e0bfff17 	ldw	r2,-4(fp)
    c0ec:	10bfff04 	addi	r2,r2,-4
    c0f0:	e0bfff15 	stw	r2,-4(fp)
    c0f4:	e0ffff17 	ldw	r3,-4(fp)
    c0f8:	00800074 	movhi	r2,1
    c0fc:	10b30c04 	addi	r2,r2,-13264
    c100:	18bff62e 	bgeu	r3,r2,c0dc <_do_ctors+0x20>
        (*ctor) (); 
}
    c104:	0001883a 	nop
    c108:	e037883a 	mov	sp,fp
    c10c:	dfc00117 	ldw	ra,4(sp)
    c110:	df000017 	ldw	fp,0(sp)
    c114:	dec00204 	addi	sp,sp,8
    c118:	f800283a 	ret

0000c11c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c11c:	defffd04 	addi	sp,sp,-12
    c120:	dfc00215 	stw	ra,8(sp)
    c124:	df000115 	stw	fp,4(sp)
    c128:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c12c:	00800074 	movhi	r2,1
    c130:	10b30b04 	addi	r2,r2,-13268
    c134:	e0bfff15 	stw	r2,-4(fp)
    c138:	00000606 	br	c154 <_do_dtors+0x38>
        (*dtor) (); 
    c13c:	e0bfff17 	ldw	r2,-4(fp)
    c140:	10800017 	ldw	r2,0(r2)
    c144:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c148:	e0bfff17 	ldw	r2,-4(fp)
    c14c:	10bfff04 	addi	r2,r2,-4
    c150:	e0bfff15 	stw	r2,-4(fp)
    c154:	e0ffff17 	ldw	r3,-4(fp)
    c158:	00800074 	movhi	r2,1
    c15c:	10b30c04 	addi	r2,r2,-13264
    c160:	18bff62e 	bgeu	r3,r2,c13c <_do_dtors+0x20>
        (*dtor) (); 
}
    c164:	0001883a 	nop
    c168:	e037883a 	mov	sp,fp
    c16c:	dfc00117 	ldw	ra,4(sp)
    c170:	df000017 	ldw	fp,0(sp)
    c174:	dec00204 	addi	sp,sp,8
    c178:	f800283a 	ret

0000c17c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c17c:	deffff04 	addi	sp,sp,-4
    c180:	df000015 	stw	fp,0(sp)
    c184:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c188:	0001883a 	nop
    c18c:	e037883a 	mov	sp,fp
    c190:	df000017 	ldw	fp,0(sp)
    c194:	dec00104 	addi	sp,sp,4
    c198:	f800283a 	ret

0000c19c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c19c:	defff804 	addi	sp,sp,-32
    c1a0:	dfc00715 	stw	ra,28(sp)
    c1a4:	df000615 	stw	fp,24(sp)
    c1a8:	dc000515 	stw	r16,20(sp)
    c1ac:	df000604 	addi	fp,sp,24
    c1b0:	e13ffb15 	stw	r4,-20(fp)
    c1b4:	e17ffc15 	stw	r5,-16(fp)
    c1b8:	e1bffd15 	stw	r6,-12(fp)
    c1bc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    c1c0:	e1bffe17 	ldw	r6,-8(fp)
    c1c4:	e17ffd17 	ldw	r5,-12(fp)
    c1c8:	e13ffc17 	ldw	r4,-16(fp)
    c1cc:	000c4240 	call	c424 <open>
    c1d0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    c1d4:	e0bffa17 	ldw	r2,-24(fp)
    c1d8:	10002216 	blt	r2,zero,c264 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c1dc:	04000074 	movhi	r16,1
    c1e0:	84353404 	addi	r16,r16,-11056
    c1e4:	e0bffa17 	ldw	r2,-24(fp)
    c1e8:	01400304 	movi	r5,12
    c1ec:	1009883a 	mov	r4,r2
    c1f0:	000b1a00 	call	b1a0 <__mulsi3>
    c1f4:	8085883a 	add	r2,r16,r2
    c1f8:	10c00017 	ldw	r3,0(r2)
    c1fc:	e0bffb17 	ldw	r2,-20(fp)
    c200:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c204:	04000074 	movhi	r16,1
    c208:	84353404 	addi	r16,r16,-11056
    c20c:	e0bffa17 	ldw	r2,-24(fp)
    c210:	01400304 	movi	r5,12
    c214:	1009883a 	mov	r4,r2
    c218:	000b1a00 	call	b1a0 <__mulsi3>
    c21c:	8085883a 	add	r2,r16,r2
    c220:	10800104 	addi	r2,r2,4
    c224:	10c00017 	ldw	r3,0(r2)
    c228:	e0bffb17 	ldw	r2,-20(fp)
    c22c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c230:	04000074 	movhi	r16,1
    c234:	84353404 	addi	r16,r16,-11056
    c238:	e0bffa17 	ldw	r2,-24(fp)
    c23c:	01400304 	movi	r5,12
    c240:	1009883a 	mov	r4,r2
    c244:	000b1a00 	call	b1a0 <__mulsi3>
    c248:	8085883a 	add	r2,r16,r2
    c24c:	10800204 	addi	r2,r2,8
    c250:	10c00017 	ldw	r3,0(r2)
    c254:	e0bffb17 	ldw	r2,-20(fp)
    c258:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c25c:	e13ffa17 	ldw	r4,-24(fp)
    c260:	000ba6c0 	call	ba6c <alt_release_fd>
  }
} 
    c264:	0001883a 	nop
    c268:	e6ffff04 	addi	sp,fp,-4
    c26c:	dfc00217 	ldw	ra,8(sp)
    c270:	df000117 	ldw	fp,4(sp)
    c274:	dc000017 	ldw	r16,0(sp)
    c278:	dec00304 	addi	sp,sp,12
    c27c:	f800283a 	ret

0000c280 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c280:	defffb04 	addi	sp,sp,-20
    c284:	dfc00415 	stw	ra,16(sp)
    c288:	df000315 	stw	fp,12(sp)
    c28c:	df000304 	addi	fp,sp,12
    c290:	e13ffd15 	stw	r4,-12(fp)
    c294:	e17ffe15 	stw	r5,-8(fp)
    c298:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c29c:	01c07fc4 	movi	r7,511
    c2a0:	01800044 	movi	r6,1
    c2a4:	e17ffd17 	ldw	r5,-12(fp)
    c2a8:	01000074 	movhi	r4,1
    c2ac:	21353704 	addi	r4,r4,-11044
    c2b0:	000c19c0 	call	c19c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c2b4:	01c07fc4 	movi	r7,511
    c2b8:	000d883a 	mov	r6,zero
    c2bc:	e17ffe17 	ldw	r5,-8(fp)
    c2c0:	01000074 	movhi	r4,1
    c2c4:	21353404 	addi	r4,r4,-11056
    c2c8:	000c19c0 	call	c19c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c2cc:	01c07fc4 	movi	r7,511
    c2d0:	01800044 	movi	r6,1
    c2d4:	e17fff17 	ldw	r5,-4(fp)
    c2d8:	01000074 	movhi	r4,1
    c2dc:	21353a04 	addi	r4,r4,-11032
    c2e0:	000c19c0 	call	c19c <alt_open_fd>
}  
    c2e4:	0001883a 	nop
    c2e8:	e037883a 	mov	sp,fp
    c2ec:	dfc00117 	ldw	ra,4(sp)
    c2f0:	df000017 	ldw	fp,0(sp)
    c2f4:	dec00204 	addi	sp,sp,8
    c2f8:	f800283a 	ret

0000c2fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c2fc:	defffe04 	addi	sp,sp,-8
    c300:	dfc00115 	stw	ra,4(sp)
    c304:	df000015 	stw	fp,0(sp)
    c308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c30c:	d0a00a17 	ldw	r2,-32728(gp)
    c310:	10000326 	beq	r2,zero,c320 <alt_get_errno+0x24>
    c314:	d0a00a17 	ldw	r2,-32728(gp)
    c318:	103ee83a 	callr	r2
    c31c:	00000106 	br	c324 <alt_get_errno+0x28>
    c320:	d0a2a104 	addi	r2,gp,-30076
}
    c324:	e037883a 	mov	sp,fp
    c328:	dfc00117 	ldw	ra,4(sp)
    c32c:	df000017 	ldw	fp,0(sp)
    c330:	dec00204 	addi	sp,sp,8
    c334:	f800283a 	ret

0000c338 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c338:	defffb04 	addi	sp,sp,-20
    c33c:	dfc00415 	stw	ra,16(sp)
    c340:	df000315 	stw	fp,12(sp)
    c344:	dc000215 	stw	r16,8(sp)
    c348:	df000304 	addi	fp,sp,12
    c34c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c350:	e0bffe17 	ldw	r2,-8(fp)
    c354:	10800217 	ldw	r2,8(r2)
    c358:	10d00034 	orhi	r3,r2,16384
    c35c:	e0bffe17 	ldw	r2,-8(fp)
    c360:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c364:	e03ffd15 	stw	zero,-12(fp)
    c368:	00002306 	br	c3f8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c36c:	04000074 	movhi	r16,1
    c370:	84353404 	addi	r16,r16,-11056
    c374:	e0bffd17 	ldw	r2,-12(fp)
    c378:	01400304 	movi	r5,12
    c37c:	1009883a 	mov	r4,r2
    c380:	000b1a00 	call	b1a0 <__mulsi3>
    c384:	8085883a 	add	r2,r16,r2
    c388:	10c00017 	ldw	r3,0(r2)
    c38c:	e0bffe17 	ldw	r2,-8(fp)
    c390:	10800017 	ldw	r2,0(r2)
    c394:	1880151e 	bne	r3,r2,c3ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c398:	04000074 	movhi	r16,1
    c39c:	84353404 	addi	r16,r16,-11056
    c3a0:	e0bffd17 	ldw	r2,-12(fp)
    c3a4:	01400304 	movi	r5,12
    c3a8:	1009883a 	mov	r4,r2
    c3ac:	000b1a00 	call	b1a0 <__mulsi3>
    c3b0:	8085883a 	add	r2,r16,r2
    c3b4:	10800204 	addi	r2,r2,8
    c3b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c3bc:	10000b0e 	bge	r2,zero,c3ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c3c0:	01400304 	movi	r5,12
    c3c4:	e13ffd17 	ldw	r4,-12(fp)
    c3c8:	000b1a00 	call	b1a0 <__mulsi3>
    c3cc:	1007883a 	mov	r3,r2
    c3d0:	00800074 	movhi	r2,1
    c3d4:	10b53404 	addi	r2,r2,-11056
    c3d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c3dc:	e0bffe17 	ldw	r2,-8(fp)
    c3e0:	18800226 	beq	r3,r2,c3ec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c3e4:	00bffcc4 	movi	r2,-13
    c3e8:	00000806 	br	c40c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c3ec:	e0bffd17 	ldw	r2,-12(fp)
    c3f0:	10800044 	addi	r2,r2,1
    c3f4:	e0bffd15 	stw	r2,-12(fp)
    c3f8:	d0a00917 	ldw	r2,-32732(gp)
    c3fc:	1007883a 	mov	r3,r2
    c400:	e0bffd17 	ldw	r2,-12(fp)
    c404:	18bfd92e 	bgeu	r3,r2,c36c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c408:	0005883a 	mov	r2,zero
}
    c40c:	e6ffff04 	addi	sp,fp,-4
    c410:	dfc00217 	ldw	ra,8(sp)
    c414:	df000117 	ldw	fp,4(sp)
    c418:	dc000017 	ldw	r16,0(sp)
    c41c:	dec00304 	addi	sp,sp,12
    c420:	f800283a 	ret

0000c424 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c424:	defff604 	addi	sp,sp,-40
    c428:	dfc00915 	stw	ra,36(sp)
    c42c:	df000815 	stw	fp,32(sp)
    c430:	df000804 	addi	fp,sp,32
    c434:	e13ffd15 	stw	r4,-12(fp)
    c438:	e17ffe15 	stw	r5,-8(fp)
    c43c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c440:	00bfffc4 	movi	r2,-1
    c444:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c448:	00bffb44 	movi	r2,-19
    c44c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c450:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c454:	d1600704 	addi	r5,gp,-32740
    c458:	e13ffd17 	ldw	r4,-12(fp)
    c45c:	000c5a40 	call	c5a4 <alt_find_dev>
    c460:	e0bff815 	stw	r2,-32(fp)
    c464:	e0bff817 	ldw	r2,-32(fp)
    c468:	1000051e 	bne	r2,zero,c480 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c46c:	e13ffd17 	ldw	r4,-12(fp)
    c470:	000c6340 	call	c634 <alt_find_file>
    c474:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c478:	00800044 	movi	r2,1
    c47c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c480:	e0bff817 	ldw	r2,-32(fp)
    c484:	10002b26 	beq	r2,zero,c534 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c488:	e13ff817 	ldw	r4,-32(fp)
    c48c:	000c73c0 	call	c73c <alt_get_fd>
    c490:	e0bff915 	stw	r2,-28(fp)
    c494:	e0bff917 	ldw	r2,-28(fp)
    c498:	1000030e 	bge	r2,zero,c4a8 <open+0x84>
    {
      status = index;
    c49c:	e0bff917 	ldw	r2,-28(fp)
    c4a0:	e0bffa15 	stw	r2,-24(fp)
    c4a4:	00002506 	br	c53c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c4a8:	01400304 	movi	r5,12
    c4ac:	e13ff917 	ldw	r4,-28(fp)
    c4b0:	000b1a00 	call	b1a0 <__mulsi3>
    c4b4:	1007883a 	mov	r3,r2
    c4b8:	00800074 	movhi	r2,1
    c4bc:	10b53404 	addi	r2,r2,-11056
    c4c0:	1885883a 	add	r2,r3,r2
    c4c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c4c8:	e0fffe17 	ldw	r3,-8(fp)
    c4cc:	00900034 	movhi	r2,16384
    c4d0:	10bfffc4 	addi	r2,r2,-1
    c4d4:	1886703a 	and	r3,r3,r2
    c4d8:	e0bffc17 	ldw	r2,-16(fp)
    c4dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c4e0:	e0bffb17 	ldw	r2,-20(fp)
    c4e4:	1000051e 	bne	r2,zero,c4fc <open+0xd8>
    c4e8:	e13ffc17 	ldw	r4,-16(fp)
    c4ec:	000c3380 	call	c338 <alt_file_locked>
    c4f0:	e0bffa15 	stw	r2,-24(fp)
    c4f4:	e0bffa17 	ldw	r2,-24(fp)
    c4f8:	10001016 	blt	r2,zero,c53c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c4fc:	e0bff817 	ldw	r2,-32(fp)
    c500:	10800317 	ldw	r2,12(r2)
    c504:	10000826 	beq	r2,zero,c528 <open+0x104>
    c508:	e0bff817 	ldw	r2,-32(fp)
    c50c:	10800317 	ldw	r2,12(r2)
    c510:	e1ffff17 	ldw	r7,-4(fp)
    c514:	e1bffe17 	ldw	r6,-8(fp)
    c518:	e17ffd17 	ldw	r5,-12(fp)
    c51c:	e13ffc17 	ldw	r4,-16(fp)
    c520:	103ee83a 	callr	r2
    c524:	00000106 	br	c52c <open+0x108>
    c528:	0005883a 	mov	r2,zero
    c52c:	e0bffa15 	stw	r2,-24(fp)
    c530:	00000206 	br	c53c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c534:	00bffb44 	movi	r2,-19
    c538:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c53c:	e0bffa17 	ldw	r2,-24(fp)
    c540:	1000090e 	bge	r2,zero,c568 <open+0x144>
  {
    alt_release_fd (index);  
    c544:	e13ff917 	ldw	r4,-28(fp)
    c548:	000ba6c0 	call	ba6c <alt_release_fd>
    ALT_ERRNO = -status;
    c54c:	000c2fc0 	call	c2fc <alt_get_errno>
    c550:	1007883a 	mov	r3,r2
    c554:	e0bffa17 	ldw	r2,-24(fp)
    c558:	0085c83a 	sub	r2,zero,r2
    c55c:	18800015 	stw	r2,0(r3)
    return -1;
    c560:	00bfffc4 	movi	r2,-1
    c564:	00000106 	br	c56c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c568:	e0bff917 	ldw	r2,-28(fp)
}
    c56c:	e037883a 	mov	sp,fp
    c570:	dfc00117 	ldw	ra,4(sp)
    c574:	df000017 	ldw	fp,0(sp)
    c578:	dec00204 	addi	sp,sp,8
    c57c:	f800283a 	ret

0000c580 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c580:	deffff04 	addi	sp,sp,-4
    c584:	df000015 	stw	fp,0(sp)
    c588:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c58c:	000170fa 	wrctl	ienable,zero
}
    c590:	0001883a 	nop
    c594:	e037883a 	mov	sp,fp
    c598:	df000017 	ldw	fp,0(sp)
    c59c:	dec00104 	addi	sp,sp,4
    c5a0:	f800283a 	ret

0000c5a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c5a4:	defffa04 	addi	sp,sp,-24
    c5a8:	dfc00515 	stw	ra,20(sp)
    c5ac:	df000415 	stw	fp,16(sp)
    c5b0:	df000404 	addi	fp,sp,16
    c5b4:	e13ffe15 	stw	r4,-8(fp)
    c5b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c5bc:	e0bfff17 	ldw	r2,-4(fp)
    c5c0:	10800017 	ldw	r2,0(r2)
    c5c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c5c8:	e13ffe17 	ldw	r4,-8(fp)
    c5cc:	00084900 	call	8490 <strlen>
    c5d0:	10800044 	addi	r2,r2,1
    c5d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c5d8:	00000d06 	br	c610 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c5dc:	e0bffc17 	ldw	r2,-16(fp)
    c5e0:	10800217 	ldw	r2,8(r2)
    c5e4:	e0fffd17 	ldw	r3,-12(fp)
    c5e8:	180d883a 	mov	r6,r3
    c5ec:	e17ffe17 	ldw	r5,-8(fp)
    c5f0:	1009883a 	mov	r4,r2
    c5f4:	000c8e80 	call	c8e8 <memcmp>
    c5f8:	1000021e 	bne	r2,zero,c604 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c5fc:	e0bffc17 	ldw	r2,-16(fp)
    c600:	00000706 	br	c620 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c604:	e0bffc17 	ldw	r2,-16(fp)
    c608:	10800017 	ldw	r2,0(r2)
    c60c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c610:	e0fffc17 	ldw	r3,-16(fp)
    c614:	e0bfff17 	ldw	r2,-4(fp)
    c618:	18bff01e 	bne	r3,r2,c5dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c61c:	0005883a 	mov	r2,zero
}
    c620:	e037883a 	mov	sp,fp
    c624:	dfc00117 	ldw	ra,4(sp)
    c628:	df000017 	ldw	fp,0(sp)
    c62c:	dec00204 	addi	sp,sp,8
    c630:	f800283a 	ret

0000c634 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c634:	defffb04 	addi	sp,sp,-20
    c638:	dfc00415 	stw	ra,16(sp)
    c63c:	df000315 	stw	fp,12(sp)
    c640:	df000304 	addi	fp,sp,12
    c644:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c648:	d0a00517 	ldw	r2,-32748(gp)
    c64c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c650:	00003106 	br	c718 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c654:	e0bffd17 	ldw	r2,-12(fp)
    c658:	10800217 	ldw	r2,8(r2)
    c65c:	1009883a 	mov	r4,r2
    c660:	00084900 	call	8490 <strlen>
    c664:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c668:	e0bffd17 	ldw	r2,-12(fp)
    c66c:	10c00217 	ldw	r3,8(r2)
    c670:	e0bffe17 	ldw	r2,-8(fp)
    c674:	10bfffc4 	addi	r2,r2,-1
    c678:	1885883a 	add	r2,r3,r2
    c67c:	10800003 	ldbu	r2,0(r2)
    c680:	10803fcc 	andi	r2,r2,255
    c684:	1080201c 	xori	r2,r2,128
    c688:	10bfe004 	addi	r2,r2,-128
    c68c:	10800bd8 	cmpnei	r2,r2,47
    c690:	1000031e 	bne	r2,zero,c6a0 <alt_find_file+0x6c>
    {
      len -= 1;
    c694:	e0bffe17 	ldw	r2,-8(fp)
    c698:	10bfffc4 	addi	r2,r2,-1
    c69c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c6a0:	e0bffe17 	ldw	r2,-8(fp)
    c6a4:	e0ffff17 	ldw	r3,-4(fp)
    c6a8:	1885883a 	add	r2,r3,r2
    c6ac:	10800003 	ldbu	r2,0(r2)
    c6b0:	10803fcc 	andi	r2,r2,255
    c6b4:	1080201c 	xori	r2,r2,128
    c6b8:	10bfe004 	addi	r2,r2,-128
    c6bc:	10800be0 	cmpeqi	r2,r2,47
    c6c0:	1000081e 	bne	r2,zero,c6e4 <alt_find_file+0xb0>
    c6c4:	e0bffe17 	ldw	r2,-8(fp)
    c6c8:	e0ffff17 	ldw	r3,-4(fp)
    c6cc:	1885883a 	add	r2,r3,r2
    c6d0:	10800003 	ldbu	r2,0(r2)
    c6d4:	10803fcc 	andi	r2,r2,255
    c6d8:	1080201c 	xori	r2,r2,128
    c6dc:	10bfe004 	addi	r2,r2,-128
    c6e0:	10000a1e 	bne	r2,zero,c70c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c6e4:	e0bffd17 	ldw	r2,-12(fp)
    c6e8:	10800217 	ldw	r2,8(r2)
    c6ec:	e0fffe17 	ldw	r3,-8(fp)
    c6f0:	180d883a 	mov	r6,r3
    c6f4:	e17fff17 	ldw	r5,-4(fp)
    c6f8:	1009883a 	mov	r4,r2
    c6fc:	000c8e80 	call	c8e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c700:	1000021e 	bne	r2,zero,c70c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c704:	e0bffd17 	ldw	r2,-12(fp)
    c708:	00000706 	br	c728 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c70c:	e0bffd17 	ldw	r2,-12(fp)
    c710:	10800017 	ldw	r2,0(r2)
    c714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c718:	e0fffd17 	ldw	r3,-12(fp)
    c71c:	d0a00504 	addi	r2,gp,-32748
    c720:	18bfcc1e 	bne	r3,r2,c654 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c724:	0005883a 	mov	r2,zero
}
    c728:	e037883a 	mov	sp,fp
    c72c:	dfc00117 	ldw	ra,4(sp)
    c730:	df000017 	ldw	fp,0(sp)
    c734:	dec00204 	addi	sp,sp,8
    c738:	f800283a 	ret

0000c73c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c73c:	defffa04 	addi	sp,sp,-24
    c740:	dfc00515 	stw	ra,20(sp)
    c744:	df000415 	stw	fp,16(sp)
    c748:	dc000315 	stw	r16,12(sp)
    c74c:	df000404 	addi	fp,sp,16
    c750:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c754:	00bffa04 	movi	r2,-24
    c758:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c75c:	e03ffc15 	stw	zero,-16(fp)
    c760:	00001d06 	br	c7d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c764:	04000074 	movhi	r16,1
    c768:	84353404 	addi	r16,r16,-11056
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	01400304 	movi	r5,12
    c774:	1009883a 	mov	r4,r2
    c778:	000b1a00 	call	b1a0 <__mulsi3>
    c77c:	8085883a 	add	r2,r16,r2
    c780:	10800017 	ldw	r2,0(r2)
    c784:	1000111e 	bne	r2,zero,c7cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c788:	04000074 	movhi	r16,1
    c78c:	84353404 	addi	r16,r16,-11056
    c790:	e0bffc17 	ldw	r2,-16(fp)
    c794:	01400304 	movi	r5,12
    c798:	1009883a 	mov	r4,r2
    c79c:	000b1a00 	call	b1a0 <__mulsi3>
    c7a0:	8085883a 	add	r2,r16,r2
    c7a4:	e0fffe17 	ldw	r3,-8(fp)
    c7a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c7ac:	d0e00917 	ldw	r3,-32732(gp)
    c7b0:	e0bffc17 	ldw	r2,-16(fp)
    c7b4:	1880020e 	bge	r3,r2,c7c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c7b8:	e0bffc17 	ldw	r2,-16(fp)
    c7bc:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
    c7c0:	e0bffc17 	ldw	r2,-16(fp)
    c7c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c7c8:	00000606 	br	c7e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c7cc:	e0bffc17 	ldw	r2,-16(fp)
    c7d0:	10800044 	addi	r2,r2,1
    c7d4:	e0bffc15 	stw	r2,-16(fp)
    c7d8:	e0bffc17 	ldw	r2,-16(fp)
    c7dc:	10800810 	cmplti	r2,r2,32
    c7e0:	103fe01e 	bne	r2,zero,c764 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c7e4:	e0bffd17 	ldw	r2,-12(fp)
}
    c7e8:	e6ffff04 	addi	sp,fp,-4
    c7ec:	dfc00217 	ldw	ra,8(sp)
    c7f0:	df000117 	ldw	fp,4(sp)
    c7f4:	dc000017 	ldw	r16,0(sp)
    c7f8:	dec00304 	addi	sp,sp,12
    c7fc:	f800283a 	ret

0000c800 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    c800:	defffe04 	addi	sp,sp,-8
    c804:	df000115 	stw	fp,4(sp)
    c808:	df000104 	addi	fp,sp,4
    c80c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    c810:	e0bfff17 	ldw	r2,-4(fp)
    c814:	10bffe84 	addi	r2,r2,-6
    c818:	10c00428 	cmpgeui	r3,r2,16
    c81c:	18001a1e 	bne	r3,zero,c888 <alt_exception_cause_generated_bad_addr+0x88>
    c820:	100690ba 	slli	r3,r2,2
    c824:	00800074 	movhi	r2,1
    c828:	10b20e04 	addi	r2,r2,-14280
    c82c:	1885883a 	add	r2,r3,r2
    c830:	10800017 	ldw	r2,0(r2)
    c834:	1000683a 	jmp	r2
    c838:	0000c878 	rdprs	zero,zero,801
    c83c:	0000c878 	rdprs	zero,zero,801
    c840:	0000c888 	cmpgei	zero,zero,802
    c844:	0000c888 	cmpgei	zero,zero,802
    c848:	0000c888 	cmpgei	zero,zero,802
    c84c:	0000c878 	rdprs	zero,zero,801
    c850:	0000c880 	call	c88 <__alt_mem_onchip_memory2_0-0x7378>
    c854:	0000c888 	cmpgei	zero,zero,802
    c858:	0000c878 	rdprs	zero,zero,801
    c85c:	0000c878 	rdprs	zero,zero,801
    c860:	0000c888 	cmpgei	zero,zero,802
    c864:	0000c878 	rdprs	zero,zero,801
    c868:	0000c880 	call	c88 <__alt_mem_onchip_memory2_0-0x7378>
    c86c:	0000c888 	cmpgei	zero,zero,802
    c870:	0000c888 	cmpgei	zero,zero,802
    c874:	0000c878 	rdprs	zero,zero,801
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    c878:	00800044 	movi	r2,1
    c87c:	00000306 	br	c88c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    c880:	0005883a 	mov	r2,zero
    c884:	00000106 	br	c88c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    c888:	0005883a 	mov	r2,zero
  }
}
    c88c:	e037883a 	mov	sp,fp
    c890:	df000017 	ldw	fp,0(sp)
    c894:	dec00104 	addi	sp,sp,4
    c898:	f800283a 	ret

0000c89c <atexit>:
    c89c:	200b883a 	mov	r5,r4
    c8a0:	000f883a 	mov	r7,zero
    c8a4:	000d883a 	mov	r6,zero
    c8a8:	0009883a 	mov	r4,zero
    c8ac:	000c9641 	jmpi	c964 <__register_exitproc>

0000c8b0 <exit>:
    c8b0:	defffe04 	addi	sp,sp,-8
    c8b4:	000b883a 	mov	r5,zero
    c8b8:	dc000015 	stw	r16,0(sp)
    c8bc:	dfc00115 	stw	ra,4(sp)
    c8c0:	2021883a 	mov	r16,r4
    c8c4:	000ca7c0 	call	ca7c <__call_exitprocs>
    c8c8:	00800074 	movhi	r2,1
    c8cc:	10b5a004 	addi	r2,r2,-10624
    c8d0:	11000017 	ldw	r4,0(r2)
    c8d4:	20800f17 	ldw	r2,60(r4)
    c8d8:	10000126 	beq	r2,zero,c8e0 <exit+0x30>
    c8dc:	103ee83a 	callr	r2
    c8e0:	8009883a 	mov	r4,r16
    c8e4:	000cbfc0 	call	cbfc <_exit>

0000c8e8 <memcmp>:
    c8e8:	01c000c4 	movi	r7,3
    c8ec:	3980192e 	bgeu	r7,r6,c954 <memcmp+0x6c>
    c8f0:	2144b03a 	or	r2,r4,r5
    c8f4:	11c4703a 	and	r2,r2,r7
    c8f8:	10000f26 	beq	r2,zero,c938 <memcmp+0x50>
    c8fc:	20800003 	ldbu	r2,0(r4)
    c900:	28c00003 	ldbu	r3,0(r5)
    c904:	10c0151e 	bne	r2,r3,c95c <memcmp+0x74>
    c908:	31bfff84 	addi	r6,r6,-2
    c90c:	01ffffc4 	movi	r7,-1
    c910:	00000406 	br	c924 <memcmp+0x3c>
    c914:	20800003 	ldbu	r2,0(r4)
    c918:	28c00003 	ldbu	r3,0(r5)
    c91c:	31bfffc4 	addi	r6,r6,-1
    c920:	10c00e1e 	bne	r2,r3,c95c <memcmp+0x74>
    c924:	21000044 	addi	r4,r4,1
    c928:	29400044 	addi	r5,r5,1
    c92c:	31fff91e 	bne	r6,r7,c914 <memcmp+0x2c>
    c930:	0005883a 	mov	r2,zero
    c934:	f800283a 	ret
    c938:	20c00017 	ldw	r3,0(r4)
    c93c:	28800017 	ldw	r2,0(r5)
    c940:	18bfee1e 	bne	r3,r2,c8fc <memcmp+0x14>
    c944:	31bfff04 	addi	r6,r6,-4
    c948:	21000104 	addi	r4,r4,4
    c94c:	29400104 	addi	r5,r5,4
    c950:	39bff936 	bltu	r7,r6,c938 <memcmp+0x50>
    c954:	303fe91e 	bne	r6,zero,c8fc <memcmp+0x14>
    c958:	003ff506 	br	c930 <memcmp+0x48>
    c95c:	10c5c83a 	sub	r2,r2,r3
    c960:	f800283a 	ret

0000c964 <__register_exitproc>:
    c964:	defffa04 	addi	sp,sp,-24
    c968:	dc000315 	stw	r16,12(sp)
    c96c:	04000074 	movhi	r16,1
    c970:	8435a004 	addi	r16,r16,-10624
    c974:	80c00017 	ldw	r3,0(r16)
    c978:	dc400415 	stw	r17,16(sp)
    c97c:	dfc00515 	stw	ra,20(sp)
    c980:	18805217 	ldw	r2,328(r3)
    c984:	2023883a 	mov	r17,r4
    c988:	10003726 	beq	r2,zero,ca68 <__register_exitproc+0x104>
    c98c:	10c00117 	ldw	r3,4(r2)
    c990:	010007c4 	movi	r4,31
    c994:	20c00e16 	blt	r4,r3,c9d0 <__register_exitproc+0x6c>
    c998:	1a000044 	addi	r8,r3,1
    c99c:	8800221e 	bne	r17,zero,ca28 <__register_exitproc+0xc4>
    c9a0:	18c00084 	addi	r3,r3,2
    c9a4:	18c7883a 	add	r3,r3,r3
    c9a8:	18c7883a 	add	r3,r3,r3
    c9ac:	12000115 	stw	r8,4(r2)
    c9b0:	10c7883a 	add	r3,r2,r3
    c9b4:	19400015 	stw	r5,0(r3)
    c9b8:	0005883a 	mov	r2,zero
    c9bc:	dfc00517 	ldw	ra,20(sp)
    c9c0:	dc400417 	ldw	r17,16(sp)
    c9c4:	dc000317 	ldw	r16,12(sp)
    c9c8:	dec00604 	addi	sp,sp,24
    c9cc:	f800283a 	ret
    c9d0:	00800034 	movhi	r2,0
    c9d4:	10800004 	addi	r2,r2,0
    c9d8:	10002626 	beq	r2,zero,ca74 <__register_exitproc+0x110>
    c9dc:	01006404 	movi	r4,400
    c9e0:	d9400015 	stw	r5,0(sp)
    c9e4:	d9800115 	stw	r6,4(sp)
    c9e8:	d9c00215 	stw	r7,8(sp)
    c9ec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c9f0:	d9400017 	ldw	r5,0(sp)
    c9f4:	d9800117 	ldw	r6,4(sp)
    c9f8:	d9c00217 	ldw	r7,8(sp)
    c9fc:	10001d26 	beq	r2,zero,ca74 <__register_exitproc+0x110>
    ca00:	81000017 	ldw	r4,0(r16)
    ca04:	10000115 	stw	zero,4(r2)
    ca08:	02000044 	movi	r8,1
    ca0c:	22405217 	ldw	r9,328(r4)
    ca10:	0007883a 	mov	r3,zero
    ca14:	12400015 	stw	r9,0(r2)
    ca18:	20805215 	stw	r2,328(r4)
    ca1c:	10006215 	stw	zero,392(r2)
    ca20:	10006315 	stw	zero,396(r2)
    ca24:	883fde26 	beq	r17,zero,c9a0 <__register_exitproc+0x3c>
    ca28:	18c9883a 	add	r4,r3,r3
    ca2c:	2109883a 	add	r4,r4,r4
    ca30:	1109883a 	add	r4,r2,r4
    ca34:	21802215 	stw	r6,136(r4)
    ca38:	01800044 	movi	r6,1
    ca3c:	12406217 	ldw	r9,392(r2)
    ca40:	30cc983a 	sll	r6,r6,r3
    ca44:	4992b03a 	or	r9,r9,r6
    ca48:	12406215 	stw	r9,392(r2)
    ca4c:	21c04215 	stw	r7,264(r4)
    ca50:	01000084 	movi	r4,2
    ca54:	893fd21e 	bne	r17,r4,c9a0 <__register_exitproc+0x3c>
    ca58:	11006317 	ldw	r4,396(r2)
    ca5c:	218cb03a 	or	r6,r4,r6
    ca60:	11806315 	stw	r6,396(r2)
    ca64:	003fce06 	br	c9a0 <__register_exitproc+0x3c>
    ca68:	18805304 	addi	r2,r3,332
    ca6c:	18805215 	stw	r2,328(r3)
    ca70:	003fc606 	br	c98c <__register_exitproc+0x28>
    ca74:	00bfffc4 	movi	r2,-1
    ca78:	003fd006 	br	c9bc <__register_exitproc+0x58>

0000ca7c <__call_exitprocs>:
    ca7c:	defff504 	addi	sp,sp,-44
    ca80:	df000915 	stw	fp,36(sp)
    ca84:	dd400615 	stw	r21,24(sp)
    ca88:	dc800315 	stw	r18,12(sp)
    ca8c:	dfc00a15 	stw	ra,40(sp)
    ca90:	ddc00815 	stw	r23,32(sp)
    ca94:	dd800715 	stw	r22,28(sp)
    ca98:	dd000515 	stw	r20,20(sp)
    ca9c:	dcc00415 	stw	r19,16(sp)
    caa0:	dc400215 	stw	r17,8(sp)
    caa4:	dc000115 	stw	r16,4(sp)
    caa8:	d9000015 	stw	r4,0(sp)
    caac:	2839883a 	mov	fp,r5
    cab0:	04800044 	movi	r18,1
    cab4:	057fffc4 	movi	r21,-1
    cab8:	00800074 	movhi	r2,1
    cabc:	10b5a004 	addi	r2,r2,-10624
    cac0:	12000017 	ldw	r8,0(r2)
    cac4:	45005217 	ldw	r20,328(r8)
    cac8:	44c05204 	addi	r19,r8,328
    cacc:	a0001c26 	beq	r20,zero,cb40 <__call_exitprocs+0xc4>
    cad0:	a0800117 	ldw	r2,4(r20)
    cad4:	15ffffc4 	addi	r23,r2,-1
    cad8:	b8000d16 	blt	r23,zero,cb10 <__call_exitprocs+0x94>
    cadc:	14000044 	addi	r16,r2,1
    cae0:	8421883a 	add	r16,r16,r16
    cae4:	8421883a 	add	r16,r16,r16
    cae8:	84402004 	addi	r17,r16,128
    caec:	a463883a 	add	r17,r20,r17
    caf0:	a421883a 	add	r16,r20,r16
    caf4:	e0001e26 	beq	fp,zero,cb70 <__call_exitprocs+0xf4>
    caf8:	80804017 	ldw	r2,256(r16)
    cafc:	e0801c26 	beq	fp,r2,cb70 <__call_exitprocs+0xf4>
    cb00:	bdffffc4 	addi	r23,r23,-1
    cb04:	843fff04 	addi	r16,r16,-4
    cb08:	8c7fff04 	addi	r17,r17,-4
    cb0c:	bd7ff91e 	bne	r23,r21,caf4 <__call_exitprocs+0x78>
    cb10:	00800034 	movhi	r2,0
    cb14:	10800004 	addi	r2,r2,0
    cb18:	10000926 	beq	r2,zero,cb40 <__call_exitprocs+0xc4>
    cb1c:	a0800117 	ldw	r2,4(r20)
    cb20:	1000301e 	bne	r2,zero,cbe4 <__call_exitprocs+0x168>
    cb24:	a0800017 	ldw	r2,0(r20)
    cb28:	10003226 	beq	r2,zero,cbf4 <__call_exitprocs+0x178>
    cb2c:	a009883a 	mov	r4,r20
    cb30:	98800015 	stw	r2,0(r19)
    cb34:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    cb38:	9d000017 	ldw	r20,0(r19)
    cb3c:	a03fe41e 	bne	r20,zero,cad0 <__call_exitprocs+0x54>
    cb40:	dfc00a17 	ldw	ra,40(sp)
    cb44:	df000917 	ldw	fp,36(sp)
    cb48:	ddc00817 	ldw	r23,32(sp)
    cb4c:	dd800717 	ldw	r22,28(sp)
    cb50:	dd400617 	ldw	r21,24(sp)
    cb54:	dd000517 	ldw	r20,20(sp)
    cb58:	dcc00417 	ldw	r19,16(sp)
    cb5c:	dc800317 	ldw	r18,12(sp)
    cb60:	dc400217 	ldw	r17,8(sp)
    cb64:	dc000117 	ldw	r16,4(sp)
    cb68:	dec00b04 	addi	sp,sp,44
    cb6c:	f800283a 	ret
    cb70:	a0800117 	ldw	r2,4(r20)
    cb74:	80c00017 	ldw	r3,0(r16)
    cb78:	10bfffc4 	addi	r2,r2,-1
    cb7c:	15c01426 	beq	r2,r23,cbd0 <__call_exitprocs+0x154>
    cb80:	80000015 	stw	zero,0(r16)
    cb84:	183fde26 	beq	r3,zero,cb00 <__call_exitprocs+0x84>
    cb88:	95c8983a 	sll	r4,r18,r23
    cb8c:	a0806217 	ldw	r2,392(r20)
    cb90:	a5800117 	ldw	r22,4(r20)
    cb94:	2084703a 	and	r2,r4,r2
    cb98:	10000b26 	beq	r2,zero,cbc8 <__call_exitprocs+0x14c>
    cb9c:	a0806317 	ldw	r2,396(r20)
    cba0:	2088703a 	and	r4,r4,r2
    cba4:	20000c1e 	bne	r4,zero,cbd8 <__call_exitprocs+0x15c>
    cba8:	89400017 	ldw	r5,0(r17)
    cbac:	d9000017 	ldw	r4,0(sp)
    cbb0:	183ee83a 	callr	r3
    cbb4:	a0800117 	ldw	r2,4(r20)
    cbb8:	15bfbf1e 	bne	r2,r22,cab8 <__call_exitprocs+0x3c>
    cbbc:	98800017 	ldw	r2,0(r19)
    cbc0:	153fcf26 	beq	r2,r20,cb00 <__call_exitprocs+0x84>
    cbc4:	003fbc06 	br	cab8 <__call_exitprocs+0x3c>
    cbc8:	183ee83a 	callr	r3
    cbcc:	003ff906 	br	cbb4 <__call_exitprocs+0x138>
    cbd0:	a5c00115 	stw	r23,4(r20)
    cbd4:	003feb06 	br	cb84 <__call_exitprocs+0x108>
    cbd8:	89000017 	ldw	r4,0(r17)
    cbdc:	183ee83a 	callr	r3
    cbe0:	003ff406 	br	cbb4 <__call_exitprocs+0x138>
    cbe4:	a0800017 	ldw	r2,0(r20)
    cbe8:	a027883a 	mov	r19,r20
    cbec:	1029883a 	mov	r20,r2
    cbf0:	003fb606 	br	cacc <__call_exitprocs+0x50>
    cbf4:	0005883a 	mov	r2,zero
    cbf8:	003ffb06 	br	cbe8 <__call_exitprocs+0x16c>

0000cbfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    cbfc:	defffd04 	addi	sp,sp,-12
    cc00:	df000215 	stw	fp,8(sp)
    cc04:	df000204 	addi	fp,sp,8
    cc08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    cc0c:	0001883a 	nop
    cc10:	e0bfff17 	ldw	r2,-4(fp)
    cc14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    cc18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    cc1c:	10000226 	beq	r2,zero,cc28 <_exit+0x2c>
    ALT_SIM_FAIL();
    cc20:	002af070 	cmpltui	zero,zero,43969
    cc24:	00000106 	br	cc2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    cc28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cc2c:	003fff06 	br	cc2c <_exit+0x30>
